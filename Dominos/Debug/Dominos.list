
Dominos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e46c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020c4  0800e63c  0800e63c  0001e63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010700  08010700  000300b0  2**0
                  CONTENTS
  4 .ARM          00000008  08010700  08010700  00020700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010708  08010708  000300b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010708  08010708  00020708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801070c  0801070c  0002070c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08010710  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d28  200000b0  080107c0  000300b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008dd8  080107c0  00038dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d097  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005747  00000000  00000000  0005d177  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000026a0  00000000  00000000  000628c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023f8  00000000  00000000  00064f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e66f  00000000  00000000  00067358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002015b  00000000  00000000  000959c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00115121  00000000  00000000  000b5b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cac43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a664  00000000  00000000  001cacc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e624 	.word	0x0800e624

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	0800e624 	.word	0x0800e624

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200000cc 	.word	0x200000cc
 8000614:	20000124 	.word	0x20000124

08000618 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000622:	20c8      	movs	r0, #200	; 0xc8
 8000624:	f002 fa56 	bl	8002ad4 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000628:	f000 fa7a 	bl	8000b20 <ft5336_I2C_InitializeIfRequired>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800065c:	2300      	movs	r3, #0
 800065e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000660:	f000 fa5e 	bl	8000b20 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
 8000668:	e010      	b.n	800068c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	21a8      	movs	r1, #168	; 0xa8
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fa11 	bl	8002a98 <TS_IO_Read>
 8000676:	4603      	mov	r3, r0
 8000678:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800067a:	7b7b      	ldrb	r3, [r7, #13]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b51      	cmp	r3, #81	; 0x51
 8000680:	d101      	bne.n	8000686 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	3301      	adds	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d802      	bhi.n	8000698 <ft5336_ReadID+0x4e>
 8000692:	7bbb      	ldrb	r3, [r7, #14]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0e8      	beq.n	800066a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	b29b      	uxth	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fa44 	bl	8000b40 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f932 	bl	8000924 <ft5336_TS_DisableIT>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2102      	movs	r1, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 f9db 	bl	8002a98 <TS_IO_Read>
 80006e2:	4603      	mov	r3, r0
 80006e4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d901      	bls.n	80006fe <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000704:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	b2db      	uxtb	r3, r3
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000324 	.word	0x20000324

0800071c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800073e:	4b6d      	ldr	r3, [pc, #436]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000740:	789a      	ldrb	r2, [r3, #2]
 8000742:	4b6c      	ldr	r3, [pc, #432]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	429a      	cmp	r2, r3
 8000748:	f080 80cf 	bcs.w	80008ea <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800074c:	4b69      	ldr	r3, [pc, #420]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 800074e:	789b      	ldrb	r3, [r3, #2]
 8000750:	2b09      	cmp	r3, #9
 8000752:	d871      	bhi.n	8000838 <ft5336_TS_GetXY+0x11c>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <ft5336_TS_GetXY+0x40>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	08000785 	.word	0x08000785
 8000760:	08000797 	.word	0x08000797
 8000764:	080007a9 	.word	0x080007a9
 8000768:	080007bb 	.word	0x080007bb
 800076c:	080007cd 	.word	0x080007cd
 8000770:	080007df 	.word	0x080007df
 8000774:	080007f1 	.word	0x080007f1
 8000778:	08000803 	.word	0x08000803
 800077c:	08000815 	.word	0x08000815
 8000780:	08000827 	.word	0x08000827
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000784:	2304      	movs	r3, #4
 8000786:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000788:	2303      	movs	r3, #3
 800078a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800078c:	2306      	movs	r3, #6
 800078e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000790:	2305      	movs	r3, #5
 8000792:	753b      	strb	r3, [r7, #20]
      break;
 8000794:	e051      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000796:	230a      	movs	r3, #10
 8000798:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800079a:	2309      	movs	r3, #9
 800079c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800079e:	230c      	movs	r3, #12
 80007a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80007a2:	230b      	movs	r3, #11
 80007a4:	753b      	strb	r3, [r7, #20]
      break;
 80007a6:	e048      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80007a8:	2310      	movs	r3, #16
 80007aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80007ac:	230f      	movs	r3, #15
 80007ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80007b0:	2312      	movs	r3, #18
 80007b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80007b4:	2311      	movs	r3, #17
 80007b6:	753b      	strb	r3, [r7, #20]
      break;
 80007b8:	e03f      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80007ba:	2316      	movs	r3, #22
 80007bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80007be:	2315      	movs	r3, #21
 80007c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80007c2:	2318      	movs	r3, #24
 80007c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80007c6:	2317      	movs	r3, #23
 80007c8:	753b      	strb	r3, [r7, #20]
      break;
 80007ca:	e036      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80007cc:	231c      	movs	r3, #28
 80007ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007d0:	231b      	movs	r3, #27
 80007d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007d4:	231e      	movs	r3, #30
 80007d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007d8:	231d      	movs	r3, #29
 80007da:	753b      	strb	r3, [r7, #20]
      break;
 80007dc:	e02d      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007de:	2322      	movs	r3, #34	; 0x22
 80007e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007e2:	2321      	movs	r3, #33	; 0x21
 80007e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007e6:	2324      	movs	r3, #36	; 0x24
 80007e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007ea:	2323      	movs	r3, #35	; 0x23
 80007ec:	753b      	strb	r3, [r7, #20]
      break;
 80007ee:	e024      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007f0:	2328      	movs	r3, #40	; 0x28
 80007f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007f4:	2327      	movs	r3, #39	; 0x27
 80007f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007f8:	232a      	movs	r3, #42	; 0x2a
 80007fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007fc:	2329      	movs	r3, #41	; 0x29
 80007fe:	753b      	strb	r3, [r7, #20]
      break;
 8000800:	e01b      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000802:	232e      	movs	r3, #46	; 0x2e
 8000804:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000806:	232d      	movs	r3, #45	; 0x2d
 8000808:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800080a:	2330      	movs	r3, #48	; 0x30
 800080c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800080e:	232f      	movs	r3, #47	; 0x2f
 8000810:	753b      	strb	r3, [r7, #20]
      break;
 8000812:	e012      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000814:	2334      	movs	r3, #52	; 0x34
 8000816:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000818:	2333      	movs	r3, #51	; 0x33
 800081a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800081c:	2336      	movs	r3, #54	; 0x36
 800081e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000820:	2335      	movs	r3, #53	; 0x35
 8000822:	753b      	strb	r3, [r7, #20]
      break;
 8000824:	e009      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000826:	233a      	movs	r3, #58	; 0x3a
 8000828:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800082a:	2339      	movs	r3, #57	; 0x39
 800082c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800082e:	233c      	movs	r3, #60	; 0x3c
 8000830:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000832:	233b      	movs	r3, #59	; 0x3b
 8000834:	753b      	strb	r3, [r7, #20]
      break;
 8000836:	e000      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000838:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	7dfa      	ldrb	r2, [r7, #23]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f002 f928 	bl	8002a98 <TS_IO_Read>
 8000848:	4603      	mov	r3, r0
 800084a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800084c:	7cfb      	ldrb	r3, [r7, #19]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	b29a      	uxth	r2, r3
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000854:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	7dba      	ldrb	r2, [r7, #22]
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f002 f91a 	bl	8002a98 <TS_IO_Read>
 8000864:	4603      	mov	r3, r0
 8000866:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000868:	7cfb      	ldrb	r3, [r7, #19]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000872:	b21a      	sxth	r2, r3
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b21b      	sxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b21b      	sxth	r3, r3
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000882:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000886:	881a      	ldrh	r2, [r3, #0]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	7d7a      	ldrb	r2, [r7, #21]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f002 f8ff 	bl	8002a98 <TS_IO_Read>
 800089a:	4603      	mov	r3, r0
 800089c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800089e:	7cfb      	ldrb	r3, [r7, #19]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008a6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80008a8:	89fb      	ldrh	r3, [r7, #14]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	7d3a      	ldrb	r2, [r7, #20]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 f8f1 	bl	8002a98 <TS_IO_Read>
 80008b6:	4603      	mov	r3, r0
 80008b8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80008ba:	7cfb      	ldrb	r3, [r7, #19]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	021b      	lsls	r3, r3, #8
 80008c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d8:	881a      	ldrh	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000324 	.word	0x20000324
 80008f8:	20000328 	.word	0x20000328

080008fc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800090a:	2301      	movs	r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	7bfa      	ldrb	r2, [r7, #15]
 8000914:	21a4      	movs	r1, #164	; 0xa4
 8000916:	4618      	mov	r0, r3
 8000918:	f002 f8a4 	bl	8002a64 <TS_IO_Write>
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	21a4      	movs	r1, #164	; 0xa4
 800093e:	4618      	mov	r0, r3
 8000940:	f002 f890 	bl	8002a64 <TS_IO_Write>
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	6039      	str	r1, [r7, #0]
 8000984:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2101      	movs	r1, #1
 8000990:	4618      	mov	r0, r3
 8000992:	f002 f881 	bl	8002a98 <TS_IO_Read>
 8000996:	4603      	mov	r3, r0
 8000998:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	4603      	mov	r3, r0
 80009ba:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <ft5336_TS_GetTouchInfo+0x158>)
 80009ce:	785b      	ldrb	r3, [r3, #1]
 80009d0:	461a      	mov	r2, r3
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	4293      	cmp	r3, r2
 80009d6:	f080 8090 	bcs.w	8000afa <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b09      	cmp	r3, #9
 80009de:	d85d      	bhi.n	8000a9c <ft5336_TS_GetTouchInfo+0xf0>
 80009e0:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <ft5336_TS_GetTouchInfo+0x3c>)
 80009e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e6:	bf00      	nop
 80009e8:	08000a11 	.word	0x08000a11
 80009ec:	08000a1f 	.word	0x08000a1f
 80009f0:	08000a2d 	.word	0x08000a2d
 80009f4:	08000a3b 	.word	0x08000a3b
 80009f8:	08000a49 	.word	0x08000a49
 80009fc:	08000a57 	.word	0x08000a57
 8000a00:	08000a65 	.word	0x08000a65
 8000a04:	08000a73 	.word	0x08000a73
 8000a08:	08000a81 	.word	0x08000a81
 8000a0c:	08000a8f 	.word	0x08000a8f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000a10:	2303      	movs	r3, #3
 8000a12:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000a14:	2307      	movs	r3, #7
 8000a16:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	757b      	strb	r3, [r7, #21]
      break;
 8000a1c:	e03f      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000a1e:	2309      	movs	r3, #9
 8000a20:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000a22:	230d      	movs	r3, #13
 8000a24:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000a26:	230e      	movs	r3, #14
 8000a28:	757b      	strb	r3, [r7, #21]
      break;
 8000a2a:	e038      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000a30:	2313      	movs	r3, #19
 8000a32:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000a34:	2314      	movs	r3, #20
 8000a36:	757b      	strb	r3, [r7, #21]
      break;
 8000a38:	e031      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000a3a:	2315      	movs	r3, #21
 8000a3c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000a3e:	2319      	movs	r3, #25
 8000a40:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000a42:	231a      	movs	r3, #26
 8000a44:	757b      	strb	r3, [r7, #21]
      break;
 8000a46:	e02a      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000a48:	231b      	movs	r3, #27
 8000a4a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000a4c:	231f      	movs	r3, #31
 8000a4e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000a50:	2320      	movs	r3, #32
 8000a52:	757b      	strb	r3, [r7, #21]
      break;
 8000a54:	e023      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000a56:	2321      	movs	r3, #33	; 0x21
 8000a58:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000a5a:	2325      	movs	r3, #37	; 0x25
 8000a5c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000a5e:	2326      	movs	r3, #38	; 0x26
 8000a60:	757b      	strb	r3, [r7, #21]
      break;
 8000a62:	e01c      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000a64:	2327      	movs	r3, #39	; 0x27
 8000a66:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a68:	232b      	movs	r3, #43	; 0x2b
 8000a6a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a6c:	232c      	movs	r3, #44	; 0x2c
 8000a6e:	757b      	strb	r3, [r7, #21]
      break;
 8000a70:	e015      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a72:	232d      	movs	r3, #45	; 0x2d
 8000a74:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a76:	2331      	movs	r3, #49	; 0x31
 8000a78:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a7a:	2332      	movs	r3, #50	; 0x32
 8000a7c:	757b      	strb	r3, [r7, #21]
      break;
 8000a7e:	e00e      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a80:	2333      	movs	r3, #51	; 0x33
 8000a82:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a84:	2337      	movs	r3, #55	; 0x37
 8000a86:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a88:	2338      	movs	r3, #56	; 0x38
 8000a8a:	757b      	strb	r3, [r7, #21]
      break;
 8000a8c:	e007      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a8e:	2339      	movs	r3, #57	; 0x39
 8000a90:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a92:	233d      	movs	r3, #61	; 0x3d
 8000a94:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a96:	233e      	movs	r3, #62	; 0x3e
 8000a98:	757b      	strb	r3, [r7, #21]
      break;
 8000a9a:	e000      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a9c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	7dfa      	ldrb	r2, [r7, #23]
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 fff6 	bl	8002a98 <TS_IO_Read>
 8000aac:	4603      	mov	r3, r0
 8000aae:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000ab0:	7d3b      	ldrb	r3, [r7, #20]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	119b      	asrs	r3, r3, #6
 8000ab6:	f003 0203 	and.w	r2, r3, #3
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	7dba      	ldrb	r2, [r7, #22]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 ffe6 	bl	8002a98 <TS_IO_Read>
 8000acc:	4603      	mov	r3, r0
 8000ace:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000ad0:	7d3b      	ldrb	r3, [r7, #20]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	7d7a      	ldrb	r2, [r7, #21]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 ffd8 	bl	8002a98 <TS_IO_Read>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000aec:	7d3b      	ldrb	r3, [r7, #20]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	111b      	asrs	r3, r3, #4
 8000af2:	f003 0204 	and.w	r2, r3, #4
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000324 	.word	0x20000324

08000b08 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000324 	.word	0x20000324

08000b20 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000b24:	f7ff fff0 	bl	8000b08 <ft5336_Get_I2C_InitializedStatus>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d104      	bne.n	8000b38 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000b2e:	f001 ff8f 	bl	8002a50 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000b32:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000324 	.word	0x20000324

08000b40 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <draw>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rxbuffer[10];
int draw( number, xdo, ydo, u) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
	if (u == 1) {
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d10a      	bne.n	8000b86 <draw+0x2a>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000b70:	48a1      	ldr	r0, [pc, #644]	; (8000df8 <draw+0x29c>)
 8000b72:	f002 f8c3 	bl	8002cfc <BSP_LCD_SetTextColor>
		BSP_LCD_DrawRect(xdo, ydo, 20, 20);
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	b298      	uxth	r0, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	b299      	uxth	r1, r3
 8000b7e:	2314      	movs	r3, #20
 8000b80:	2214      	movs	r2, #20
 8000b82:	f002 fb25 	bl	80031d0 <BSP_LCD_DrawRect>
	}
	if (u == 0) {
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d10b      	bne.n	8000ba4 <draw+0x48>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f002 f8b4 	bl	8002cfc <BSP_LCD_SetTextColor>
		BSP_LCD_DrawRect(xdo, ydo, 20, 20);
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	b298      	uxth	r0, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	b299      	uxth	r1, r3
 8000b9c:	2314      	movs	r3, #20
 8000b9e:	2214      	movs	r2, #20
 8000ba0:	f002 fb16 	bl	80031d0 <BSP_LCD_DrawRect>
	}
	if (u == 1) {
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d103      	bne.n	8000bb2 <draw+0x56>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000baa:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000bae:	f002 f8a5 	bl	8002cfc <BSP_LCD_SetTextColor>
	}
	if (u == 0) {
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d103      	bne.n	8000bc0 <draw+0x64>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f002 f89e 	bl	8002cfc <BSP_LCD_SetTextColor>
	}
	switch (number) {
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	2b05      	cmp	r3, #5
 8000bc6:	f200 8111 	bhi.w	8000dec <draw+0x290>
 8000bca:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <draw+0x74>)
 8000bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd0:	08000c63 	.word	0x08000c63
 8000bd4:	08000c7d 	.word	0x08000c7d
 8000bd8:	08000caf 	.word	0x08000caf
 8000bdc:	08000cf9 	.word	0x08000cf9
 8000be0:	08000be9 	.word	0x08000be9
 8000be4:	08000d5b 	.word	0x08000d5b
	case 5:
		BSP_LCD_FillCircle(xdo + 10, ydo + 10, 2);
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	330a      	adds	r3, #10
 8000bee:	b298      	uxth	r0, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	330a      	adds	r3, #10
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f002 fc52 	bl	80034a4 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(xdo + 4, ydo + 3, 2);
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	3304      	adds	r3, #4
 8000c06:	b298      	uxth	r0, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	3303      	adds	r3, #3
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	2202      	movs	r2, #2
 8000c12:	4619      	mov	r1, r3
 8000c14:	f002 fc46 	bl	80034a4 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(xdo + 16, ydo + 16, 2);
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	3310      	adds	r3, #16
 8000c1e:	b298      	uxth	r0, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	3310      	adds	r3, #16
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	2202      	movs	r2, #2
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f002 fc3a 	bl	80034a4 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(xdo + 4, ydo + 16, 2);
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	3304      	adds	r3, #4
 8000c36:	b298      	uxth	r0, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	3310      	adds	r3, #16
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	2202      	movs	r2, #2
 8000c42:	4619      	mov	r1, r3
 8000c44:	f002 fc2e 	bl	80034a4 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(xdo + 16, ydo + 3, 2);
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	3310      	adds	r3, #16
 8000c4e:	b298      	uxth	r0, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	3303      	adds	r3, #3
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	2202      	movs	r2, #2
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f002 fc22 	bl	80034a4 <BSP_LCD_FillCircle>
		break;
 8000c60:	e0c4      	b.n	8000dec <draw+0x290>
	case 1:
		BSP_LCD_FillCircle(xdo + 10, ydo + 10, 2);
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	330a      	adds	r3, #10
 8000c68:	b298      	uxth	r0, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	330a      	adds	r3, #10
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	2202      	movs	r2, #2
 8000c74:	4619      	mov	r1, r3
 8000c76:	f002 fc15 	bl	80034a4 <BSP_LCD_FillCircle>
		break;
 8000c7a:	e0b7      	b.n	8000dec <draw+0x290>
	case 2:
		BSP_LCD_FillCircle(xdo + 4, ydo + 16, 2);
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	3304      	adds	r3, #4
 8000c82:	b298      	uxth	r0, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	3310      	adds	r3, #16
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f002 fc08 	bl	80034a4 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(xdo + 16, ydo + 3, 2);
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	3310      	adds	r3, #16
 8000c9a:	b298      	uxth	r0, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	3303      	adds	r3, #3
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f002 fbfc 	bl	80034a4 <BSP_LCD_FillCircle>
		break;
 8000cac:	e09e      	b.n	8000dec <draw+0x290>
	case 3:
		BSP_LCD_FillCircle(xdo + 4, ydo + 16, 2);
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	3304      	adds	r3, #4
 8000cb4:	b298      	uxth	r0, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	3310      	adds	r3, #16
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f002 fbef 	bl	80034a4 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(xdo + 16, ydo + 3, 2);
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	3310      	adds	r3, #16
 8000ccc:	b298      	uxth	r0, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f002 fbe3 	bl	80034a4 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(xdo + 10, ydo + 10, 2);
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	330a      	adds	r3, #10
 8000ce4:	b298      	uxth	r0, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	330a      	adds	r3, #10
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	2202      	movs	r2, #2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f002 fbd7 	bl	80034a4 <BSP_LCD_FillCircle>
		break;
 8000cf6:	e079      	b.n	8000dec <draw+0x290>
	case 4:
		BSP_LCD_FillCircle(xdo + 4, ydo + 3, 2);
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	b298      	uxth	r0, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	3303      	adds	r3, #3
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	2202      	movs	r2, #2
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f002 fbca 	bl	80034a4 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(xdo + 16, ydo + 16, 2);
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	3310      	adds	r3, #16
 8000d16:	b298      	uxth	r0, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	3310      	adds	r3, #16
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	2202      	movs	r2, #2
 8000d22:	4619      	mov	r1, r3
 8000d24:	f002 fbbe 	bl	80034a4 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(xdo + 4, ydo + 16, 2);
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	b298      	uxth	r0, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	3310      	adds	r3, #16
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	2202      	movs	r2, #2
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f002 fbb2 	bl	80034a4 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(xdo + 16, ydo + 3, 2);
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	3310      	adds	r3, #16
 8000d46:	b298      	uxth	r0, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	3303      	adds	r3, #3
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	2202      	movs	r2, #2
 8000d52:	4619      	mov	r1, r3
 8000d54:	f002 fba6 	bl	80034a4 <BSP_LCD_FillCircle>
		break;
 8000d58:	e048      	b.n	8000dec <draw+0x290>
	case 6:
		BSP_LCD_FillCircle(xdo + 4, ydo + 3, 2);
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	3304      	adds	r3, #4
 8000d60:	b298      	uxth	r0, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	3303      	adds	r3, #3
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f002 fb99 	bl	80034a4 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(xdo + 16, ydo + 16, 2);
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	3310      	adds	r3, #16
 8000d78:	b298      	uxth	r0, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	3310      	adds	r3, #16
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	2202      	movs	r2, #2
 8000d84:	4619      	mov	r1, r3
 8000d86:	f002 fb8d 	bl	80034a4 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(xdo + 4, ydo + 16, 2);
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	3304      	adds	r3, #4
 8000d90:	b298      	uxth	r0, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	3310      	adds	r3, #16
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f002 fb81 	bl	80034a4 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(xdo + 16, ydo + 3, 2);
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	3310      	adds	r3, #16
 8000da8:	b298      	uxth	r0, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	3303      	adds	r3, #3
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	2202      	movs	r2, #2
 8000db4:	4619      	mov	r1, r3
 8000db6:	f002 fb75 	bl	80034a4 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(xdo + 4, ydo + 10, 2);
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	b298      	uxth	r0, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	330a      	adds	r3, #10
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	2202      	movs	r2, #2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f002 fb69 	bl	80034a4 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(xdo + 16, ydo + 10, 2);
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	3310      	adds	r3, #16
 8000dd8:	b298      	uxth	r0, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	330a      	adds	r3, #10
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	2202      	movs	r2, #2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f002 fb5d 	bl	80034a4 <BSP_LCD_FillCircle>
		break;
 8000dea:	bf00      	nop
	}
}
 8000dec:	bf00      	nop
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	ffff0000 	.word	0xffff0000

08000dfc <turn>:

int turn( number, xdo, ydo) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]

	static uint8_t side = 0, mem = 0;

	if (HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin) == 0 && mem == 0) {
 8000e08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0c:	4840      	ldr	r0, [pc, #256]	; (8000f10 <turn+0x114>)
 8000e0e:	f005 fd6d 	bl	80068ec <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10c      	bne.n	8000e32 <turn+0x36>
 8000e18:	4b3e      	ldr	r3, [pc, #248]	; (8000f14 <turn+0x118>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d108      	bne.n	8000e32 <turn+0x36>
		side++;
 8000e20:	4b3d      	ldr	r3, [pc, #244]	; (8000f18 <turn+0x11c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <turn+0x11c>)
 8000e2a:	701a      	strb	r2, [r3, #0]
		mem = 1;
 8000e2c:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <turn+0x118>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin) == 1 && mem == 1) {
 8000e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e36:	4836      	ldr	r0, [pc, #216]	; (8000f10 <turn+0x114>)
 8000e38:	f005 fd58 	bl	80068ec <HAL_GPIO_ReadPin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d106      	bne.n	8000e50 <turn+0x54>
 8000e42:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <turn+0x118>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d102      	bne.n	8000e50 <turn+0x54>
		mem = 0;
 8000e4a:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <turn+0x118>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
	}

	if (side > 3) {
 8000e50:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <turn+0x11c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d902      	bls.n	8000e5e <turn+0x62>
		side = 0;
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <turn+0x11c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
	}

	switch (side) {
 8000e5e:	4b2e      	ldr	r3, [pc, #184]	; (8000f18 <turn+0x11c>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d84e      	bhi.n	8000f04 <turn+0x108>
 8000e66:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <turn+0x70>)
 8000e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6c:	08000e7d 	.word	0x08000e7d
 8000e70:	08000e9f 	.word	0x08000e9f
 8000e74:	08000ec1 	.word	0x08000ec1
 8000e78:	08000ee3 	.word	0x08000ee3
	case 0:
		draw(number, xdo + 20, ydo, 0);
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	f103 0114 	add.w	r1, r3, #20
 8000e82:	2300      	movs	r3, #0
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f7ff fe68 	bl	8000b5c <draw>
		draw(number, xdo, ydo + 20, 1);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f103 0214 	add.w	r2, r3, #20
 8000e92:	2301      	movs	r3, #1
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	f7ff fe60 	bl	8000b5c <draw>
		//draw(number,xdo+20,ydo,0);
		//draw(number,xdo,ydo+20,1);
		break;
 8000e9c:	e032      	b.n	8000f04 <turn+0x108>
	case 1:
		draw(number, xdo, ydo + 20, 0);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f103 0214 	add.w	r2, r3, #20
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f7ff fe57 	bl	8000b5c <draw>
		draw(number, xdo - 20, ydo, 1);
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	f1a3 0114 	sub.w	r1, r3, #20
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f7ff fe4f 	bl	8000b5c <draw>
		//draw(number,xdo,ydo+20,0);
		//draw(number,xdo-20,ydo,1);
		break;
 8000ebe:	e021      	b.n	8000f04 <turn+0x108>
	case 2:
		draw(number, xdo - 20, ydo, 0);
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	f1a3 0114 	sub.w	r1, r3, #20
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f7ff fe46 	bl	8000b5c <draw>
		draw(number, xdo, ydo - 20, 1);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f1a3 0214 	sub.w	r2, r3, #20
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f7ff fe3e 	bl	8000b5c <draw>
		//draw(number,xdo-20,ydo,0);
		//draw(number,xdo,ydo-20,1);
		break;
 8000ee0:	e010      	b.n	8000f04 <turn+0x108>
	case 3:
		draw(number, xdo, ydo - 20, 0);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f1a3 0214 	sub.w	r2, r3, #20
 8000ee8:	2300      	movs	r3, #0
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f7ff fe35 	bl	8000b5c <draw>
		draw(number, xdo + 20, ydo, 1);
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	f103 0114 	add.w	r1, r3, #20
 8000ef8:	2301      	movs	r3, #1
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f7ff fe2d 	bl	8000b5c <draw>
		//draw(number,xdo,ydo-20,0);
		//draw(number,xdo+20,ydo,1);
		break;
 8000f02:	bf00      	nop
	}
}
 8000f04:	bf00      	nop
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40020000 	.word	0x40020000
 8000f14:	2000032a 	.word	0x2000032a
 8000f18:	2000032b 	.word	0x2000032b

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b5b0      	push	{r4, r5, r7, lr}
 8000f1e:	b0ca      	sub	sp, #296	; 0x128
 8000f20:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char text[50] = { };
 8000f22:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f26:	2232      	movs	r2, #50	; 0x32
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f00c ff75 	bl	800de1a <memset>
	static TS_StateTypeDef TS_State;
	uint32_t potl, potr, joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f003 ffd8 	bl	8004efe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f9cf 	bl	80012f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f52:	f001 f881 	bl	8002058 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000f56:	f000 fad1 	bl	80014fc <MX_ADC3_Init>
  MX_I2C1_Init();
 8000f5a:	f000 fb7d 	bl	8001658 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000f5e:	f000 fbbb 	bl	80016d8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000f62:	f000 fbf9 	bl	8001758 <MX_LTDC_Init>
  MX_RTC_Init();
 8000f66:	f000 fc8d 	bl	8001884 <MX_RTC_Init>
  MX_SPI2_Init();
 8000f6a:	f000 fd31 	bl	80019d0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000f6e:	f000 fd6d 	bl	8001a4c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f72:	f000 fdbf 	bl	8001af4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f76:	f000 fe0b 	bl	8001b90 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000f7a:	f000 fe97 	bl	8001cac <MX_TIM5_Init>
  MX_TIM8_Init();
 8000f7e:	f000 fee3 	bl	8001d48 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000f82:	f000 ffbb 	bl	8001efc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000f86:	f000 ffe9 	bl	8001f5c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000f8a:	f000 fa65 	bl	8001458 <MX_ADC1_Init>
  MX_DAC_Init();
 8000f8e:	f000 fb07 	bl	80015a0 <MX_DAC_Init>
  MX_UART7_Init();
 8000f92:	f000 ff83 	bl	8001e9c <MX_UART7_Init>
  MX_FMC_Init();
 8000f96:	f001 f811 	bl	8001fbc <MX_FMC_Init>
  MX_DMA2D_Init();
 8000f9a:	f000 fb2b 	bl	80015f4 <MX_DMA2D_Init>
  MX_RNG_Init();
 8000f9e:	f000 fc5d 	bl	800185c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8000fa2:	f001 fda3 	bl	8002aec <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000fa6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000faa:	2000      	movs	r0, #0
 8000fac:	f001 fe36 	bl	8002c1c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
	LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000fb0:	f001 fe0c 	bl	8002bcc <BSP_LCD_GetXSize>
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	f001 fe1d 	bl	8002bf4 <BSP_LCD_GetYSize>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	fb03 f304 	mul.w	r3, r3, r4
	BSP_LCD_LayerDefaultInit(1,
 8000fc0:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f001 fe27 	bl	8002c1c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000fce:	f002 fb09 	bl	80035e4 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f001 fe82 	bl	8002cdc <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f001 fef0 	bl	8002dc0 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8000fe0:	48aa      	ldr	r0, [pc, #680]	; (800128c <main+0x370>)
 8000fe2:	f001 febd 	bl	8002d60 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000fe6:	48aa      	ldr	r0, [pc, #680]	; (8001290 <main+0x374>)
 8000fe8:	f001 fe88 	bl	8002cfc <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGREEN);
 8000fec:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 8000ff0:	f001 fe9c 	bl	8002d2c <BSP_LCD_SetBackColor>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000ff4:	f001 fdea 	bl	8002bcc <BSP_LCD_GetXSize>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29c      	uxth	r4, r3
 8000ffc:	f001 fdfa 	bl	8002bf4 <BSP_LCD_GetYSize>
 8001000:	4603      	mov	r3, r0
 8001002:	b29b      	uxth	r3, r3
 8001004:	4619      	mov	r1, r3
 8001006:	4620      	mov	r0, r4
 8001008:	f002 feba 	bl	8003d80 <BSP_TS_Init>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of Mutex1 */
  osMutexDef(Mutex1);
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  Mutex1Handle = osMutexCreate(osMutex(Mutex1));
 8001018:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800101c:	4618      	mov	r0, r3
 800101e:	f00a fcb0 	bl	800b982 <osMutexCreate>
 8001022:	4602      	mov	r2, r0
 8001024:	4b9b      	ldr	r3, [pc, #620]	; (8001294 <main+0x378>)
 8001026:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001028:	4b9b      	ldr	r3, [pc, #620]	; (8001298 <main+0x37c>)
 800102a:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800102e:	461d      	mov	r5, r3
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001038:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800103c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f00a fc3d 	bl	800b8c2 <osThreadCreate>
 8001048:	4602      	mov	r2, r0
 800104a:	4b94      	ldr	r3, [pc, #592]	; (800129c <main+0x380>)
 800104c:	601a      	str	r2, [r3, #0]

  /* definition and creation of Affichage */
  osThreadDef(Affichage, fcn_adv, osPriorityAboveNormal, 0, 512);
 800104e:	4b94      	ldr	r3, [pc, #592]	; (80012a0 <main+0x384>)
 8001050:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001054:	461d      	mov	r5, r3
 8001056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800105e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AffichageHandle = osThreadCreate(osThread(Affichage), NULL);
 8001062:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f00a fc2a 	bl	800b8c2 <osThreadCreate>
 800106e:	4602      	mov	r2, r0
 8001070:	4b8c      	ldr	r3, [pc, #560]	; (80012a4 <main+0x388>)
 8001072:	601a      	str	r2, [r3, #0]

  /* definition and creation of Jeu1 */
  osThreadDef(Jeu1, fcn_jeu1, osPriorityNormal, 0, 128);
 8001074:	4b8c      	ldr	r3, [pc, #560]	; (80012a8 <main+0x38c>)
 8001076:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800107a:	461d      	mov	r5, r3
 800107c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001080:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001084:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Jeu1Handle = osThreadCreate(osThread(Jeu1), NULL);
 8001088:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f00a fc17 	bl	800b8c2 <osThreadCreate>
 8001094:	4602      	mov	r2, r0
 8001096:	4b85      	ldr	r3, [pc, #532]	; (80012ac <main+0x390>)
 8001098:	601a      	str	r2, [r3, #0]

  /* definition and creation of Jeu2 */
  osThreadDef(Jeu2, fcn_jeu2, osPriorityNormal, 0, 512);
 800109a:	4b85      	ldr	r3, [pc, #532]	; (80012b0 <main+0x394>)
 800109c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80010a0:	461d      	mov	r5, r3
 80010a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Jeu2Handle = osThreadCreate(osThread(Jeu2), NULL);
 80010ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f00a fc04 	bl	800b8c2 <osThreadCreate>
 80010ba:	4602      	mov	r2, r0
 80010bc:	4b7d      	ldr	r3, [pc, #500]	; (80012b4 <main+0x398>)
 80010be:	601a      	str	r2, [r3, #0]

  /* definition and creation of Jeu3 */
  osThreadDef(Jeu3, fcn_jeu3, osPriorityNormal, 0, 512);
 80010c0:	4b7d      	ldr	r3, [pc, #500]	; (80012b8 <main+0x39c>)
 80010c2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80010c6:	461d      	mov	r5, r3
 80010c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Jeu3Handle = osThreadCreate(osThread(Jeu3), NULL);
 80010d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f00a fbf1 	bl	800b8c2 <osThreadCreate>
 80010e0:	4602      	mov	r2, r0
 80010e2:	4b76      	ldr	r3, [pc, #472]	; (80012bc <main+0x3a0>)
 80010e4:	601a      	str	r2, [r3, #0]

  /* definition and creation of Jeu4 */
  osThreadDef(Jeu4, fcn_jeu4, osPriorityNormal, 0, 512);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4a75      	ldr	r2, [pc, #468]	; (80012c0 <main+0x3a4>)
 80010ec:	461c      	mov	r4, r3
 80010ee:	4615      	mov	r5, r2
 80010f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Jeu4Handle = osThreadCreate(osThread(Jeu4), NULL);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f00a fbdd 	bl	800b8c2 <osThreadCreate>
 8001108:	4602      	mov	r2, r0
 800110a:	4b6e      	ldr	r3, [pc, #440]	; (80012c4 <main+0x3a8>)
 800110c:	601a      	str	r2, [r3, #0]

  /* definition and creation of Adv */
  osThreadDef(Adv, fcn_adv, osPriorityNormal, 0, 512);
 800110e:	463b      	mov	r3, r7
 8001110:	4a6d      	ldr	r2, [pc, #436]	; (80012c8 <main+0x3ac>)
 8001112:	461c      	mov	r4, r3
 8001114:	4615      	mov	r5, r2
 8001116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AdvHandle = osThreadCreate(osThread(Adv), NULL);
 8001122:	463b      	mov	r3, r7
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f00a fbcb 	bl	800b8c2 <osThreadCreate>
 800112c:	4602      	mov	r2, r0
 800112e:	4b67      	ldr	r3, [pc, #412]	; (80012cc <main+0x3b0>)
 8001130:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001132:	f00a fbbf 	bl	800b8b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin,
 8001136:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113a:	4865      	ldr	r0, [pc, #404]	; (80012d0 <main+0x3b4>)
 800113c:	f005 fbd6 	bl	80068ec <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001148:	4862      	ldr	r0, [pc, #392]	; (80012d4 <main+0x3b8>)
 800114a:	f005 fbe7 	bl	800691c <HAL_GPIO_WritePin>
				HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin));
		HAL_GPIO_WritePin(LED14_GPIO_Port, LED14_Pin,
 800114e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001152:	485f      	ldr	r0, [pc, #380]	; (80012d0 <main+0x3b4>)
 8001154:	f005 fbca 	bl	80068ec <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	2120      	movs	r1, #32
 800115e:	485e      	ldr	r0, [pc, #376]	; (80012d8 <main+0x3bc>)
 8001160:	f005 fbdc 	bl	800691c <HAL_GPIO_WritePin>
				HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin));
		sprintf(text, "BP1 : %d", HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin));
 8001164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001168:	4859      	ldr	r0, [pc, #356]	; (80012d0 <main+0x3b4>)
 800116a:	f005 fbbf 	bl	80068ec <HAL_GPIO_ReadPin>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001176:	4959      	ldr	r1, [pc, #356]	; (80012dc <main+0x3c0>)
 8001178:	4618      	mov	r0, r3
 800117a:	f00c fe57 	bl	800de2c <siprintf>
		BSP_LCD_DisplayStringAtLine(5, (uint8_t*) text);
 800117e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001182:	4619      	mov	r1, r3
 8001184:	2005      	movs	r0, #5
 8001186:	f001 ff4b 	bl	8003020 <BSP_LCD_DisplayStringAtLine>

		sConfig.Channel = ADC_CHANNEL_6;
 800118a:	2306      	movs	r3, #6
 800118c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001190:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001194:	4619      	mov	r1, r3
 8001196:	4852      	ldr	r0, [pc, #328]	; (80012e0 <main+0x3c4>)
 8001198:	f004 f896 	bl	80052c8 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 800119c:	4850      	ldr	r0, [pc, #320]	; (80012e0 <main+0x3c4>)
 800119e:	f003 ff41 	bl	8005024 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 80011a2:	bf00      	nop
 80011a4:	2164      	movs	r1, #100	; 0x64
 80011a6:	484e      	ldr	r0, [pc, #312]	; (80012e0 <main+0x3c4>)
 80011a8:	f003 fffc 	bl	80051a4 <HAL_ADC_PollForConversion>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f8      	bne.n	80011a4 <main+0x288>
			;
		potr = HAL_ADC_GetValue(&hadc3);
 80011b2:	484b      	ldr	r0, [pc, #300]	; (80012e0 <main+0x3c4>)
 80011b4:	f004 f87a 	bl	80052ac <HAL_ADC_GetValue>
 80011b8:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

		sConfig.Channel = ADC_CHANNEL_7;
 80011bc:	2307      	movs	r3, #7
 80011be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80011c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011c6:	4619      	mov	r1, r3
 80011c8:	4845      	ldr	r0, [pc, #276]	; (80012e0 <main+0x3c4>)
 80011ca:	f004 f87d 	bl	80052c8 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 80011ce:	4844      	ldr	r0, [pc, #272]	; (80012e0 <main+0x3c4>)
 80011d0:	f003 ff28 	bl	8005024 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 80011d4:	bf00      	nop
 80011d6:	2164      	movs	r1, #100	; 0x64
 80011d8:	4841      	ldr	r0, [pc, #260]	; (80012e0 <main+0x3c4>)
 80011da:	f003 ffe3 	bl	80051a4 <HAL_ADC_PollForConversion>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f8      	bne.n	80011d6 <main+0x2ba>
			;
		potl = HAL_ADC_GetValue(&hadc3);
 80011e4:	483e      	ldr	r0, [pc, #248]	; (80012e0 <main+0x3c4>)
 80011e6:	f004 f861 	bl	80052ac <HAL_ADC_GetValue>
 80011ea:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

		sConfig.Channel = ADC_CHANNEL_8;
 80011ee:	2308      	movs	r3, #8
 80011f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80011f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f8:	4619      	mov	r1, r3
 80011fa:	4839      	ldr	r0, [pc, #228]	; (80012e0 <main+0x3c4>)
 80011fc:	f004 f864 	bl	80052c8 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001200:	4837      	ldr	r0, [pc, #220]	; (80012e0 <main+0x3c4>)
 8001202:	f003 ff0f 	bl	8005024 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8001206:	bf00      	nop
 8001208:	2164      	movs	r1, #100	; 0x64
 800120a:	4835      	ldr	r0, [pc, #212]	; (80012e0 <main+0x3c4>)
 800120c:	f003 ffca 	bl	80051a4 <HAL_ADC_PollForConversion>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f8      	bne.n	8001208 <main+0x2ec>
			;
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8001216:	4832      	ldr	r0, [pc, #200]	; (80012e0 <main+0x3c4>)
 8001218:	f004 f848 	bl	80052ac <HAL_ADC_GetValue>
 800121c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

		HAL_ADC_Start(&hadc1);
 8001220:	4830      	ldr	r0, [pc, #192]	; (80012e4 <main+0x3c8>)
 8001222:	f003 feff 	bl	8005024 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001226:	bf00      	nop
 8001228:	2164      	movs	r1, #100	; 0x64
 800122a:	482e      	ldr	r0, [pc, #184]	; (80012e4 <main+0x3c8>)
 800122c:	f003 ffba 	bl	80051a4 <HAL_ADC_PollForConversion>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f8      	bne.n	8001228 <main+0x30c>
			;
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8001236:	482b      	ldr	r0, [pc, #172]	; (80012e4 <main+0x3c8>)
 8001238:	f004 f838 	bl	80052ac <HAL_ADC_GetValue>
 800123c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

		sprintf(text, "POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",
 8001240:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8001244:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001254:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001258:	4923      	ldr	r1, [pc, #140]	; (80012e8 <main+0x3cc>)
 800125a:	f00c fde7 	bl	800de2c <siprintf>
				(uint) potl, (uint) potr, (uint) joystick_v, (uint) joystick_h);
		BSP_LCD_DisplayStringAtLine(9, (uint8_t*) text);
 800125e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001262:	4619      	mov	r1, r3
 8001264:	2009      	movs	r0, #9
 8001266:	f001 fedb 	bl	8003020 <BSP_LCD_DisplayStringAtLine>

		BSP_TS_GetState(&TS_State);
 800126a:	4820      	ldr	r0, [pc, #128]	; (80012ec <main+0x3d0>)
 800126c:	f002 fdc8 	bl	8003e00 <BSP_TS_GetState>
		if (TS_State.touchDetected) {
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <main+0x3d0>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	f43f af5e 	beq.w	8001136 <main+0x21a>
			BSP_LCD_FillCircle(TS_State.touchX[0], TS_State.touchY[0], 4);
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <main+0x3d0>)
 800127c:	8858      	ldrh	r0, [r3, #2]
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <main+0x3d0>)
 8001280:	899b      	ldrh	r3, [r3, #12]
 8001282:	2204      	movs	r2, #4
 8001284:	4619      	mov	r1, r3
 8001286:	f002 f90d 	bl	80034a4 <BSP_LCD_FillCircle>
		HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin,
 800128a:	e754      	b.n	8001136 <main+0x21a>
 800128c:	20000030 	.word	0x20000030
 8001290:	ff0000ff 	.word	0xff0000ff
 8001294:	20008c60 	.word	0x20008c60
 8001298:	0800e684 	.word	0x0800e684
 800129c:	200086a0 	.word	0x200086a0
 80012a0:	0800e6ac 	.word	0x0800e6ac
 80012a4:	200086f0 	.word	0x200086f0
 80012a8:	0800e6d0 	.word	0x0800e6d0
 80012ac:	20008874 	.word	0x20008874
 80012b0:	0800e6f4 	.word	0x0800e6f4
 80012b4:	20008b50 	.word	0x20008b50
 80012b8:	0800e718 	.word	0x0800e718
 80012bc:	200088bc 	.word	0x200088bc
 80012c0:	0800e73c 	.word	0x0800e73c
 80012c4:	20008c64 	.word	0x20008c64
 80012c8:	0800e75c 	.word	0x0800e75c
 80012cc:	20008c6c 	.word	0x20008c6c
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40021c00 	.word	0x40021c00
 80012d8:	40021000 	.word	0x40021000
 80012dc:	0800e63c 	.word	0x0800e63c
 80012e0:	200089f4 	.word	0x200089f4
 80012e4:	200089ac 	.word	0x200089ac
 80012e8:	0800e648 	.word	0x0800e648
 80012ec:	2000032c 	.word	0x2000032c

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0b4      	sub	sp, #208	; 0xd0
 80012f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012fa:	2230      	movs	r2, #48	; 0x30
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f00c fd8b 	bl	800de1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2284      	movs	r2, #132	; 0x84
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f00c fd7c 	bl	800de1a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001322:	f006 fc3d 	bl	8007ba0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b49      	ldr	r3, [pc, #292]	; (800144c <SystemClock_Config+0x15c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a48      	ldr	r2, [pc, #288]	; (800144c <SystemClock_Config+0x15c>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b46      	ldr	r3, [pc, #280]	; (800144c <SystemClock_Config+0x15c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133e:	4b44      	ldr	r3, [pc, #272]	; (8001450 <SystemClock_Config+0x160>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a43      	ldr	r2, [pc, #268]	; (8001450 <SystemClock_Config+0x160>)
 8001344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b41      	ldr	r3, [pc, #260]	; (8001450 <SystemClock_Config+0x160>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001356:	2309      	movs	r3, #9
 8001358:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001360:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001364:	2301      	movs	r3, #1
 8001366:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001370:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001378:	2319      	movs	r3, #25
 800137a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800137e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001382:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800138c:	2309      	movs	r3, #9
 800138e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001392:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001396:	4618      	mov	r0, r3
 8001398:	f006 fc62 	bl	8007c60 <HAL_RCC_OscConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80013a2:	f001 f9fb 	bl	800279c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013a6:	f006 fc0b 	bl	8007bc0 <HAL_PWREx_EnableOverDrive>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013b0:	f001 f9f4 	bl	800279c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b4:	230f      	movs	r3, #15
 80013b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80013d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80013da:	2106      	movs	r1, #6
 80013dc:	4618      	mov	r0, r3
 80013de:	f006 fee3 	bl	80081a8 <HAL_RCC_ClockConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80013e8:	f001 f9d8 	bl	800279c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <SystemClock_Config+0x164>)
 80013ee:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80013f0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80013f6:	2305      	movs	r3, #5
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80013fe:	2303      	movs	r3, #3
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001402:	2301      	movs	r3, #1
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001406:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800140a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800140c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001412:	2300      	movs	r3, #0
 8001414:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001416:	2300      	movs	r3, #0
 8001418:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800141a:	2300      	movs	r3, #0
 800141c:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800141e:	2300      	movs	r3, #0
 8001420:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001422:	2300      	movs	r3, #0
 8001424:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001426:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800142a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	4618      	mov	r0, r3
 8001434:	f007 f8bc 	bl	80085b0 <HAL_RCCEx_PeriphCLKConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0x152>
  {
    Error_Handler();
 800143e:	f001 f9ad 	bl	800279c <Error_Handler>
  }
}
 8001442:	bf00      	nop
 8001444:	37d0      	adds	r7, #208	; 0xd0
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40007000 	.word	0x40007000
 8001454:	00215868 	.word	0x00215868

08001458 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800145e:	463b      	mov	r3, r7
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800146a:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <MX_ADC1_Init+0x98>)
 800146c:	4a21      	ldr	r2, [pc, #132]	; (80014f4 <MX_ADC1_Init+0x9c>)
 800146e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <MX_ADC1_Init+0x98>)
 8001472:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001476:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <MX_ADC1_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MX_ADC1_Init+0x98>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <MX_ADC1_Init+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <MX_ADC1_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <MX_ADC1_Init+0x98>)
 8001494:	2200      	movs	r2, #0
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <MX_ADC1_Init+0x98>)
 800149a:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <MX_ADC1_Init+0xa0>)
 800149c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800149e:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <MX_ADC1_Init+0x98>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <MX_ADC1_Init+0x98>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_ADC1_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_ADC1_Init+0x98>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <MX_ADC1_Init+0x98>)
 80014ba:	f003 fd6f 	bl	8004f9c <HAL_ADC_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014c4:	f001 f96a 	bl	800279c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d4:	463b      	mov	r3, r7
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_ADC1_Init+0x98>)
 80014da:	f003 fef5 	bl	80052c8 <HAL_ADC_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014e4:	f001 f95a 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200089ac 	.word	0x200089ac
 80014f4:	40012000 	.word	0x40012000
 80014f8:	0f000001 	.word	0x0f000001

080014fc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001502:	463b      	mov	r3, r7
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <MX_ADC3_Init+0x98>)
 8001510:	4a21      	ldr	r2, [pc, #132]	; (8001598 <MX_ADC3_Init+0x9c>)
 8001512:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <MX_ADC3_Init+0x98>)
 8001516:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800151a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <MX_ADC3_Init+0x98>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <MX_ADC3_Init+0x98>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <MX_ADC3_Init+0x98>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_ADC3_Init+0x98>)
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <MX_ADC3_Init+0x98>)
 8001538:	2200      	movs	r2, #0
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <MX_ADC3_Init+0x98>)
 800153e:	4a17      	ldr	r2, [pc, #92]	; (800159c <MX_ADC3_Init+0xa0>)
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001542:	4b14      	ldr	r3, [pc, #80]	; (8001594 <MX_ADC3_Init+0x98>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_ADC3_Init+0x98>)
 800154a:	2201      	movs	r2, #1
 800154c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_ADC3_Init+0x98>)
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <MX_ADC3_Init+0x98>)
 8001558:	2201      	movs	r2, #1
 800155a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800155c:	480d      	ldr	r0, [pc, #52]	; (8001594 <MX_ADC3_Init+0x98>)
 800155e:	f003 fd1d 	bl	8004f9c <HAL_ADC_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001568:	f001 f918 	bl	800279c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800156c:	2306      	movs	r3, #6
 800156e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001570:	2301      	movs	r3, #1
 8001572:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_ADC3_Init+0x98>)
 800157e:	f003 fea3 	bl	80052c8 <HAL_ADC_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001588:	f001 f908 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200089f4 	.word	0x200089f4
 8001598:	40012200 	.word	0x40012200
 800159c:	0f000001 	.word	0x0f000001

080015a0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015a6:	463b      	mov	r3, r7
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_DAC_Init+0x4c>)
 80015b0:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <MX_DAC_Init+0x50>)
 80015b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015b4:	480d      	ldr	r0, [pc, #52]	; (80015ec <MX_DAC_Init+0x4c>)
 80015b6:	f004 f9ad 	bl	8005914 <HAL_DAC_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80015c0:	f001 f8ec 	bl	800279c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4806      	ldr	r0, [pc, #24]	; (80015ec <MX_DAC_Init+0x4c>)
 80015d4:	f004 fa14 	bl	8005a00 <HAL_DAC_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80015de:	f001 f8dd 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20008abc 	.word	0x20008abc
 80015f0:	40007400 	.word	0x40007400

080015f4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_DMA2D_Init+0x5c>)
 80015fa:	4a16      	ldr	r2, [pc, #88]	; (8001654 <MX_DMA2D_Init+0x60>)
 80015fc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_DMA2D_Init+0x5c>)
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_DMA2D_Init+0x5c>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_DMA2D_Init+0x5c>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_DMA2D_Init+0x5c>)
 8001612:	2200      	movs	r2, #0
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_DMA2D_Init+0x5c>)
 8001618:	2200      	movs	r2, #0
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_DMA2D_Init+0x5c>)
 800161e:	2200      	movs	r2, #0
 8001620:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_DMA2D_Init+0x5c>)
 8001624:	2200      	movs	r2, #0
 8001626:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001628:	4809      	ldr	r0, [pc, #36]	; (8001650 <MX_DMA2D_Init+0x5c>)
 800162a:	f004 fc1f 	bl	8005e6c <HAL_DMA2D_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001634:	f001 f8b2 	bl	800279c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001638:	2101      	movs	r1, #1
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_DMA2D_Init+0x5c>)
 800163c:	f004 fd74 	bl	8006128 <HAL_DMA2D_ConfigLayer>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001646:	f001 f8a9 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20008bdc 	.word	0x20008bdc
 8001654:	4002b000 	.word	0x4002b000

08001658 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <MX_I2C1_Init+0x74>)
 800165e:	4a1c      	ldr	r2, [pc, #112]	; (80016d0 <MX_I2C1_Init+0x78>)
 8001660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_I2C1_Init+0x74>)
 8001664:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <MX_I2C1_Init+0x7c>)
 8001666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <MX_I2C1_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_I2C1_Init+0x74>)
 8001670:	2201      	movs	r2, #1
 8001672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <MX_I2C1_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_I2C1_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <MX_I2C1_Init+0x74>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_I2C1_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_I2C1_Init+0x74>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001692:	480e      	ldr	r0, [pc, #56]	; (80016cc <MX_I2C1_Init+0x74>)
 8001694:	f005 f95c 	bl	8006950 <HAL_I2C_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800169e:	f001 f87d 	bl	800279c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016a2:	2100      	movs	r1, #0
 80016a4:	4809      	ldr	r0, [pc, #36]	; (80016cc <MX_I2C1_Init+0x74>)
 80016a6:	f005 fe6b 	bl	8007380 <HAL_I2CEx_ConfigAnalogFilter>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016b0:	f001 f874 	bl	800279c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016b4:	2100      	movs	r1, #0
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_I2C1_Init+0x74>)
 80016b8:	f005 fead 	bl	8007416 <HAL_I2CEx_ConfigDigitalFilter>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016c2:	f001 f86b 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20008824 	.word	0x20008824
 80016d0:	40005400 	.word	0x40005400
 80016d4:	00c0eaff 	.word	0x00c0eaff

080016d8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_I2C3_Init+0x74>)
 80016de:	4a1c      	ldr	r2, [pc, #112]	; (8001750 <MX_I2C3_Init+0x78>)
 80016e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_I2C3_Init+0x74>)
 80016e4:	4a1b      	ldr	r2, [pc, #108]	; (8001754 <MX_I2C3_Init+0x7c>)
 80016e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <MX_I2C3_Init+0x74>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_I2C3_Init+0x74>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <MX_I2C3_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_I2C3_Init+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_I2C3_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_I2C3_Init+0x74>)
 8001708:	2200      	movs	r2, #0
 800170a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_I2C3_Init+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001712:	480e      	ldr	r0, [pc, #56]	; (800174c <MX_I2C3_Init+0x74>)
 8001714:	f005 f91c 	bl	8006950 <HAL_I2C_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800171e:	f001 f83d 	bl	800279c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001722:	2100      	movs	r1, #0
 8001724:	4809      	ldr	r0, [pc, #36]	; (800174c <MX_I2C3_Init+0x74>)
 8001726:	f005 fe2b 	bl	8007380 <HAL_I2CEx_ConfigAnalogFilter>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001730:	f001 f834 	bl	800279c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001734:	2100      	movs	r1, #0
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_I2C3_Init+0x74>)
 8001738:	f005 fe6d 	bl	8007416 <HAL_I2CEx_ConfigDigitalFilter>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001742:	f001 f82b 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200086a4 	.word	0x200086a4
 8001750:	40005c00 	.word	0x40005c00
 8001754:	00c0eaff 	.word	0x00c0eaff

08001758 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08e      	sub	sp, #56	; 0x38
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2234      	movs	r2, #52	; 0x34
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f00c fb58 	bl	800de1a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800176a:	4b3a      	ldr	r3, [pc, #232]	; (8001854 <MX_LTDC_Init+0xfc>)
 800176c:	4a3a      	ldr	r2, [pc, #232]	; (8001858 <MX_LTDC_Init+0x100>)
 800176e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001770:	4b38      	ldr	r3, [pc, #224]	; (8001854 <MX_LTDC_Init+0xfc>)
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001776:	4b37      	ldr	r3, [pc, #220]	; (8001854 <MX_LTDC_Init+0xfc>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800177c:	4b35      	ldr	r3, [pc, #212]	; (8001854 <MX_LTDC_Init+0xfc>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001782:	4b34      	ldr	r3, [pc, #208]	; (8001854 <MX_LTDC_Init+0xfc>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001788:	4b32      	ldr	r3, [pc, #200]	; (8001854 <MX_LTDC_Init+0xfc>)
 800178a:	2228      	movs	r2, #40	; 0x28
 800178c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800178e:	4b31      	ldr	r3, [pc, #196]	; (8001854 <MX_LTDC_Init+0xfc>)
 8001790:	2209      	movs	r2, #9
 8001792:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001794:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <MX_LTDC_Init+0xfc>)
 8001796:	2235      	movs	r2, #53	; 0x35
 8001798:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800179a:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <MX_LTDC_Init+0xfc>)
 800179c:	220b      	movs	r2, #11
 800179e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80017a0:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <MX_LTDC_Init+0xfc>)
 80017a2:	f240 2215 	movw	r2, #533	; 0x215
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <MX_LTDC_Init+0xfc>)
 80017aa:	f240 121b 	movw	r2, #283	; 0x11b
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <MX_LTDC_Init+0xfc>)
 80017b2:	f240 2235 	movw	r2, #565	; 0x235
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80017b8:	4b26      	ldr	r3, [pc, #152]	; (8001854 <MX_LTDC_Init+0xfc>)
 80017ba:	f240 121d 	movw	r2, #285	; 0x11d
 80017be:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80017c0:	4b24      	ldr	r3, [pc, #144]	; (8001854 <MX_LTDC_Init+0xfc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80017c8:	4b22      	ldr	r3, [pc, #136]	; (8001854 <MX_LTDC_Init+0xfc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80017d0:	4b20      	ldr	r3, [pc, #128]	; (8001854 <MX_LTDC_Init+0xfc>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80017d8:	481e      	ldr	r0, [pc, #120]	; (8001854 <MX_LTDC_Init+0xfc>)
 80017da:	f005 fe69 	bl	80074b0 <HAL_LTDC_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80017e4:	f000 ffda 	bl	800279c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80017ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80017f0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80017f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80017fa:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80017fc:	2302      	movs	r3, #2
 80017fe:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001800:	23ff      	movs	r3, #255	; 0xff
 8001802:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001808:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800180c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800180e:	2307      	movs	r3, #7
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001812:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001818:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800181e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001822:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	2200      	movs	r2, #0
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_LTDC_Init+0xfc>)
 800183e:	f005 ffc9 	bl	80077d4 <HAL_LTDC_ConfigLayer>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001848:	f000 ffa8 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	3738      	adds	r7, #56	; 0x38
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20008904 	.word	0x20008904
 8001858:	40016800 	.word	0x40016800

0800185c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_RNG_Init+0x20>)
 8001862:	4a07      	ldr	r2, [pc, #28]	; (8001880 <MX_RNG_Init+0x24>)
 8001864:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <MX_RNG_Init+0x20>)
 8001868:	f007 fa90 	bl	8008d8c <HAL_RNG_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001872:	f000 ff93 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20008b40 	.word	0x20008b40
 8001880:	50060800 	.word	0x50060800

08001884 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b092      	sub	sp, #72	; 0x48
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800188a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	611a      	str	r2, [r3, #16]
 800189a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80018a0:	463b      	mov	r3, r7
 80018a2:	222c      	movs	r2, #44	; 0x2c
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f00c fab7 	bl	800de1a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018ac:	4b46      	ldr	r3, [pc, #280]	; (80019c8 <MX_RTC_Init+0x144>)
 80018ae:	4a47      	ldr	r2, [pc, #284]	; (80019cc <MX_RTC_Init+0x148>)
 80018b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018b2:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <MX_RTC_Init+0x144>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018b8:	4b43      	ldr	r3, [pc, #268]	; (80019c8 <MX_RTC_Init+0x144>)
 80018ba:	227f      	movs	r2, #127	; 0x7f
 80018bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018be:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <MX_RTC_Init+0x144>)
 80018c0:	22ff      	movs	r2, #255	; 0xff
 80018c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018c4:	4b40      	ldr	r3, [pc, #256]	; (80019c8 <MX_RTC_Init+0x144>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018ca:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <MX_RTC_Init+0x144>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018d0:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <MX_RTC_Init+0x144>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018d6:	483c      	ldr	r0, [pc, #240]	; (80019c8 <MX_RTC_Init+0x144>)
 80018d8:	f007 fad2 	bl	8008e80 <HAL_RTC_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80018e2:	f000 ff5b 	bl	800279c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018fc:	2300      	movs	r3, #0
 80018fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001900:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001904:	2201      	movs	r2, #1
 8001906:	4619      	mov	r1, r3
 8001908:	482f      	ldr	r0, [pc, #188]	; (80019c8 <MX_RTC_Init+0x144>)
 800190a:	f007 fb35 	bl	8008f78 <HAL_RTC_SetTime>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001914:	f000 ff42 	bl	800279c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001918:	2301      	movs	r3, #1
 800191a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800191e:	2301      	movs	r3, #1
 8001920:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001924:	2301      	movs	r3, #1
 8001926:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800192a:	2300      	movs	r3, #0
 800192c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001934:	2201      	movs	r2, #1
 8001936:	4619      	mov	r1, r3
 8001938:	4823      	ldr	r0, [pc, #140]	; (80019c8 <MX_RTC_Init+0x144>)
 800193a:	f007 fbdb 	bl	80090f4 <HAL_RTC_SetDate>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001944:	f000 ff2a 	bl	800279c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001948:	2300      	movs	r3, #0
 800194a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800194c:	2300      	movs	r3, #0
 800194e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001950:	2300      	movs	r3, #0
 8001952:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800196c:	2301      	movs	r3, #1
 800196e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	2201      	movs	r2, #1
 800197c:	4619      	mov	r1, r3
 800197e:	4812      	ldr	r0, [pc, #72]	; (80019c8 <MX_RTC_Init+0x144>)
 8001980:	f007 fc60 	bl	8009244 <HAL_RTC_SetAlarm>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800198a:	f000 ff07 	bl	800279c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800198e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	2201      	movs	r2, #1
 8001998:	4619      	mov	r1, r3
 800199a:	480b      	ldr	r0, [pc, #44]	; (80019c8 <MX_RTC_Init+0x144>)
 800199c:	f007 fc52 	bl	8009244 <HAL_RTC_SetAlarm>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80019a6:	f000 fef9 	bl	800279c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80019aa:	2202      	movs	r2, #2
 80019ac:	2100      	movs	r1, #0
 80019ae:	4806      	ldr	r0, [pc, #24]	; (80019c8 <MX_RTC_Init+0x144>)
 80019b0:	f007 fdd2 	bl	8009558 <HAL_RTCEx_SetTimeStamp>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80019ba:	f000 feef 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	3748      	adds	r7, #72	; 0x48
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20008ad4 	.word	0x20008ad4
 80019cc:	40002800 	.word	0x40002800

080019d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <MX_SPI2_Init+0x74>)
 80019d6:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <MX_SPI2_Init+0x78>)
 80019d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <MX_SPI2_Init+0x74>)
 80019dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_SPI2_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <MX_SPI2_Init+0x74>)
 80019ea:	f44f 7240 	mov.w	r2, #768	; 0x300
 80019ee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_SPI2_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MX_SPI2_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_SPI2_Init+0x74>)
 80019fe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a02:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a1e:	2207      	movs	r2, #7
 8001a20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_SPI2_Init+0x74>)
 8001a30:	f007 fe67 	bl	8009702 <HAL_SPI_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a3a:	f000 feaf 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200086f8 	.word	0x200086f8
 8001a48:	40003800 	.word	0x40003800

08001a4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <MX_TIM1_Init+0xa0>)
 8001a6c:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <MX_TIM1_Init+0xa4>)
 8001a6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a70:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <MX_TIM1_Init+0xa0>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <MX_TIM1_Init+0xa0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <MX_TIM1_Init+0xa0>)
 8001a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <MX_TIM1_Init+0xa0>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <MX_TIM1_Init+0xa0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <MX_TIM1_Init+0xa0>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a96:	4815      	ldr	r0, [pc, #84]	; (8001aec <MX_TIM1_Init+0xa0>)
 8001a98:	f007 fec5 	bl	8009826 <HAL_TIM_Base_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001aa2:	f000 fe7b 	bl	800279c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aaa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480e      	ldr	r0, [pc, #56]	; (8001aec <MX_TIM1_Init+0xa0>)
 8001ab4:	f008 f978 	bl	8009da8 <HAL_TIM_ConfigClockSource>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001abe:	f000 fe6d 	bl	800279c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4806      	ldr	r0, [pc, #24]	; (8001aec <MX_TIM1_Init+0xa0>)
 8001ad4:	f008 feac 	bl	800a830 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001ade:	f000 fe5d 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20008af4 	.word	0x20008af4
 8001af0:	40010000 	.word	0x40010000

08001af4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b12:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b3a:	4814      	ldr	r0, [pc, #80]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b3c:	f007 fe73 	bl	8009826 <HAL_TIM_Base_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b46:	f000 fe29 	bl	800279c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	4619      	mov	r1, r3
 8001b56:	480d      	ldr	r0, [pc, #52]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b58:	f008 f926 	bl	8009da8 <HAL_TIM_ConfigClockSource>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b62:	f000 fe1b 	bl	800279c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4806      	ldr	r0, [pc, #24]	; (8001b8c <MX_TIM2_Init+0x98>)
 8001b74:	f008 fe5c 	bl	800a830 <HAL_TIMEx_MasterConfigSynchronization>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b7e:	f000 fe0d 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	3720      	adds	r7, #32
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20008c20 	.word	0x20008c20

08001b90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b094      	sub	sp, #80	; 0x50
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	f107 0320 	add.w	r3, r7, #32
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]
 8001bce:	615a      	str	r2, [r3, #20]
 8001bd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bd2:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <MX_TIM3_Init+0x114>)
 8001bd4:	4a34      	ldr	r2, [pc, #208]	; (8001ca8 <MX_TIM3_Init+0x118>)
 8001bd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bd8:	4b32      	ldr	r3, [pc, #200]	; (8001ca4 <MX_TIM3_Init+0x114>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bde:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <MX_TIM3_Init+0x114>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001be4:	4b2f      	ldr	r3, [pc, #188]	; (8001ca4 <MX_TIM3_Init+0x114>)
 8001be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bec:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <MX_TIM3_Init+0x114>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf2:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <MX_TIM3_Init+0x114>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bf8:	482a      	ldr	r0, [pc, #168]	; (8001ca4 <MX_TIM3_Init+0x114>)
 8001bfa:	f007 fe14 	bl	8009826 <HAL_TIM_Base_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001c04:	f000 fdca 	bl	800279c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c12:	4619      	mov	r1, r3
 8001c14:	4823      	ldr	r0, [pc, #140]	; (8001ca4 <MX_TIM3_Init+0x114>)
 8001c16:	f008 f8c7 	bl	8009da8 <HAL_TIM_ConfigClockSource>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c20:	f000 fdbc 	bl	800279c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c24:	481f      	ldr	r0, [pc, #124]	; (8001ca4 <MX_TIM3_Init+0x114>)
 8001c26:	f007 fe53 	bl	80098d0 <HAL_TIM_PWM_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8001c30:	f000 fdb4 	bl	800279c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c40:	4619      	mov	r1, r3
 8001c42:	4818      	ldr	r0, [pc, #96]	; (8001ca4 <MX_TIM3_Init+0x114>)
 8001c44:	f008 f96a 	bl	8009f1c <HAL_TIM_SlaveConfigSynchro>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8001c4e:	f000 fda5 	bl	800279c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c5a:	f107 0320 	add.w	r3, r7, #32
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4810      	ldr	r0, [pc, #64]	; (8001ca4 <MX_TIM3_Init+0x114>)
 8001c62:	f008 fde5 	bl	800a830 <HAL_TIMEx_MasterConfigSynchronization>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001c6c:	f000 fd96 	bl	800279c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c70:	2360      	movs	r3, #96	; 0x60
 8001c72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2200      	movs	r2, #0
 8001c84:	4619      	mov	r1, r3
 8001c86:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <MX_TIM3_Init+0x114>)
 8001c88:	f007 ff76 	bl	8009b78 <HAL_TIM_PWM_ConfigChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8001c92:	f000 fd83 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c96:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <MX_TIM3_Init+0x114>)
 8001c98:	f002 fe66 	bl	8004968 <HAL_TIM_MspPostInit>

}
 8001c9c:	bf00      	nop
 8001c9e:	3750      	adds	r7, #80	; 0x50
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200088c0 	.word	0x200088c0
 8001ca8:	40000400 	.word	0x40000400

08001cac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cb2:	f107 0310 	add.w	r3, r7, #16
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <MX_TIM5_Init+0x94>)
 8001ccc:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <MX_TIM5_Init+0x98>)
 8001cce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <MX_TIM5_Init+0x94>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <MX_TIM5_Init+0x94>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <MX_TIM5_Init+0x94>)
 8001cde:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <MX_TIM5_Init+0x94>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <MX_TIM5_Init+0x94>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001cf0:	4813      	ldr	r0, [pc, #76]	; (8001d40 <MX_TIM5_Init+0x94>)
 8001cf2:	f007 fd98 	bl	8009826 <HAL_TIM_Base_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001cfc:	f000 fd4e 	bl	800279c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001d06:	f107 0310 	add.w	r3, r7, #16
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	480c      	ldr	r0, [pc, #48]	; (8001d40 <MX_TIM5_Init+0x94>)
 8001d0e:	f008 f84b 	bl	8009da8 <HAL_TIM_ConfigClockSource>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001d18:	f000 fd40 	bl	800279c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	4619      	mov	r1, r3
 8001d28:	4805      	ldr	r0, [pc, #20]	; (8001d40 <MX_TIM5_Init+0x94>)
 8001d2a:	f008 fd81 	bl	800a830 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001d34:	f000 fd32 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000887c 	.word	0x2000887c
 8001d44:	40000c00 	.word	0x40000c00

08001d48 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b09a      	sub	sp, #104	; 0x68
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
 8001d78:	615a      	str	r2, [r3, #20]
 8001d7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	222c      	movs	r2, #44	; 0x2c
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f00c f849 	bl	800de1a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d88:	4b42      	ldr	r3, [pc, #264]	; (8001e94 <MX_TIM8_Init+0x14c>)
 8001d8a:	4a43      	ldr	r2, [pc, #268]	; (8001e98 <MX_TIM8_Init+0x150>)
 8001d8c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d8e:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <MX_TIM8_Init+0x14c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d94:	4b3f      	ldr	r3, [pc, #252]	; (8001e94 <MX_TIM8_Init+0x14c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d9a:	4b3e      	ldr	r3, [pc, #248]	; (8001e94 <MX_TIM8_Init+0x14c>)
 8001d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da2:	4b3c      	ldr	r3, [pc, #240]	; (8001e94 <MX_TIM8_Init+0x14c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001da8:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <MX_TIM8_Init+0x14c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dae:	4b39      	ldr	r3, [pc, #228]	; (8001e94 <MX_TIM8_Init+0x14c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001db4:	4837      	ldr	r0, [pc, #220]	; (8001e94 <MX_TIM8_Init+0x14c>)
 8001db6:	f007 fd36 	bl	8009826 <HAL_TIM_Base_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001dc0:	f000 fcec 	bl	800279c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001dca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4830      	ldr	r0, [pc, #192]	; (8001e94 <MX_TIM8_Init+0x14c>)
 8001dd2:	f007 ffe9 	bl	8009da8 <HAL_TIM_ConfigClockSource>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001ddc:	f000 fcde 	bl	800279c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001de0:	482c      	ldr	r0, [pc, #176]	; (8001e94 <MX_TIM8_Init+0x14c>)
 8001de2:	f007 fd75 	bl	80098d0 <HAL_TIM_PWM_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001dec:	f000 fcd6 	bl	800279c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001dfc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e00:	4619      	mov	r1, r3
 8001e02:	4824      	ldr	r0, [pc, #144]	; (8001e94 <MX_TIM8_Init+0x14c>)
 8001e04:	f008 fd14 	bl	800a830 <HAL_TIMEx_MasterConfigSynchronization>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001e0e:	f000 fcc5 	bl	800279c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e12:	2360      	movs	r3, #96	; 0x60
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e2e:	220c      	movs	r2, #12
 8001e30:	4619      	mov	r1, r3
 8001e32:	4818      	ldr	r0, [pc, #96]	; (8001e94 <MX_TIM8_Init+0x14c>)
 8001e34:	f007 fea0 	bl	8009b78 <HAL_TIM_PWM_ConfigChannel>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001e3e:	f000 fcad 	bl	800279c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	4619      	mov	r1, r3
 8001e76:	4807      	ldr	r0, [pc, #28]	; (8001e94 <MX_TIM8_Init+0x14c>)
 8001e78:	f008 fd68 	bl	800a94c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001e82:	f000 fc8b 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e86:	4803      	ldr	r0, [pc, #12]	; (8001e94 <MX_TIM8_Init+0x14c>)
 8001e88:	f002 fd6e 	bl	8004968 <HAL_TIM_MspPostInit>

}
 8001e8c:	bf00      	nop
 8001e8e:	3768      	adds	r7, #104	; 0x68
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200087e0 	.word	0x200087e0
 8001e98:	40010400 	.word	0x40010400

08001e9c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <MX_UART7_Init+0x58>)
 8001ea2:	4a15      	ldr	r2, [pc, #84]	; (8001ef8 <MX_UART7_Init+0x5c>)
 8001ea4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001ea6:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <MX_UART7_Init+0x58>)
 8001ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eac:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <MX_UART7_Init+0x58>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <MX_UART7_Init+0x58>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <MX_UART7_Init+0x58>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <MX_UART7_Init+0x58>)
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <MX_UART7_Init+0x58>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <MX_UART7_Init+0x58>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <MX_UART7_Init+0x58>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <MX_UART7_Init+0x58>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001ede:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <MX_UART7_Init+0x58>)
 8001ee0:	f008 fdd0 	bl	800aa84 <HAL_UART_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001eea:	f000 fc57 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000875c 	.word	0x2000875c
 8001ef8:	40007800 	.word	0x40007800

08001efc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f02:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <MX_USART1_UART_Init+0x5c>)
 8001f04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f22:	220c      	movs	r2, #12
 8001f24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f3e:	4805      	ldr	r0, [pc, #20]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f40:	f008 fda0 	bl	800aa84 <HAL_UART_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f4a:	f000 fc27 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20008a3c 	.word	0x20008a3c
 8001f58:	40011000 	.word	0x40011000

08001f5c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <MX_USART6_UART_Init+0x58>)
 8001f62:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <MX_USART6_UART_Init+0x5c>)
 8001f64:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f66:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <MX_USART6_UART_Init+0x58>)
 8001f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f6c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_USART6_UART_Init+0x58>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <MX_USART6_UART_Init+0x58>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_USART6_UART_Init+0x58>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_USART6_UART_Init+0x58>)
 8001f82:	220c      	movs	r2, #12
 8001f84:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <MX_USART6_UART_Init+0x58>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_USART6_UART_Init+0x58>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <MX_USART6_UART_Init+0x58>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <MX_USART6_UART_Init+0x58>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f9e:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <MX_USART6_UART_Init+0x58>)
 8001fa0:	f008 fd70 	bl	800aa84 <HAL_UART_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001faa:	f000 fbf7 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20008b58 	.word	0x20008b58
 8001fb8:	40011400 	.word	0x40011400

08001fbc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
 8001fd0:	615a      	str	r2, [r3, #20]
 8001fd2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001fd4:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <MX_FMC_Init+0x94>)
 8001fd6:	4a1f      	ldr	r2, [pc, #124]	; (8002054 <MX_FMC_Init+0x98>)
 8001fd8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <MX_FMC_Init+0x94>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <MX_FMC_Init+0x94>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <MX_FMC_Init+0x94>)
 8001fe8:	2204      	movs	r2, #4
 8001fea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <MX_FMC_Init+0x94>)
 8001fee:	2210      	movs	r2, #16
 8001ff0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <MX_FMC_Init+0x94>)
 8001ff4:	2240      	movs	r2, #64	; 0x40
 8001ff6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <MX_FMC_Init+0x94>)
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <MX_FMC_Init+0x94>)
 8002000:	2200      	movs	r2, #0
 8002002:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <MX_FMC_Init+0x94>)
 8002006:	2200      	movs	r2, #0
 8002008:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <MX_FMC_Init+0x94>)
 800200c:	2200      	movs	r2, #0
 800200e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <MX_FMC_Init+0x94>)
 8002012:	2200      	movs	r2, #0
 8002014:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8002016:	2310      	movs	r3, #16
 8002018:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800201a:	2310      	movs	r3, #16
 800201c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800201e:	2310      	movs	r3, #16
 8002020:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8002022:	2310      	movs	r3, #16
 8002024:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8002026:	2310      	movs	r3, #16
 8002028:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800202a:	2310      	movs	r3, #16
 800202c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800202e:	2310      	movs	r3, #16
 8002030:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	4619      	mov	r1, r3
 8002036:	4806      	ldr	r0, [pc, #24]	; (8002050 <MX_FMC_Init+0x94>)
 8002038:	f007 fae4 	bl	8009604 <HAL_SDRAM_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8002042:	f000 fbab 	bl	800279c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002046:	bf00      	nop
 8002048:	3720      	adds	r7, #32
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20008c70 	.word	0x20008c70
 8002054:	a0000140 	.word	0xa0000140

08002058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b090      	sub	sp, #64	; 0x40
 800205c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
 800206c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800206e:	4bb0      	ldr	r3, [pc, #704]	; (8002330 <MX_GPIO_Init+0x2d8>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4aaf      	ldr	r2, [pc, #700]	; (8002330 <MX_GPIO_Init+0x2d8>)
 8002074:	f043 0310 	orr.w	r3, r3, #16
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4bad      	ldr	r3, [pc, #692]	; (8002330 <MX_GPIO_Init+0x2d8>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002086:	4baa      	ldr	r3, [pc, #680]	; (8002330 <MX_GPIO_Init+0x2d8>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4aa9      	ldr	r2, [pc, #676]	; (8002330 <MX_GPIO_Init+0x2d8>)
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4ba7      	ldr	r3, [pc, #668]	; (8002330 <MX_GPIO_Init+0x2d8>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	4ba4      	ldr	r3, [pc, #656]	; (8002330 <MX_GPIO_Init+0x2d8>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4aa3      	ldr	r2, [pc, #652]	; (8002330 <MX_GPIO_Init+0x2d8>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4ba1      	ldr	r3, [pc, #644]	; (8002330 <MX_GPIO_Init+0x2d8>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	623b      	str	r3, [r7, #32]
 80020b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020b6:	4b9e      	ldr	r3, [pc, #632]	; (8002330 <MX_GPIO_Init+0x2d8>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a9d      	ldr	r2, [pc, #628]	; (8002330 <MX_GPIO_Init+0x2d8>)
 80020bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b9b      	ldr	r3, [pc, #620]	; (8002330 <MX_GPIO_Init+0x2d8>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80020ce:	4b98      	ldr	r3, [pc, #608]	; (8002330 <MX_GPIO_Init+0x2d8>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a97      	ldr	r2, [pc, #604]	; (8002330 <MX_GPIO_Init+0x2d8>)
 80020d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b95      	ldr	r3, [pc, #596]	; (8002330 <MX_GPIO_Init+0x2d8>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e6:	4b92      	ldr	r3, [pc, #584]	; (8002330 <MX_GPIO_Init+0x2d8>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a91      	ldr	r2, [pc, #580]	; (8002330 <MX_GPIO_Init+0x2d8>)
 80020ec:	f043 0308 	orr.w	r3, r3, #8
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b8f      	ldr	r3, [pc, #572]	; (8002330 <MX_GPIO_Init+0x2d8>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80020fe:	4b8c      	ldr	r3, [pc, #560]	; (8002330 <MX_GPIO_Init+0x2d8>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a8b      	ldr	r2, [pc, #556]	; (8002330 <MX_GPIO_Init+0x2d8>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b89      	ldr	r3, [pc, #548]	; (8002330 <MX_GPIO_Init+0x2d8>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002116:	4b86      	ldr	r3, [pc, #536]	; (8002330 <MX_GPIO_Init+0x2d8>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a85      	ldr	r2, [pc, #532]	; (8002330 <MX_GPIO_Init+0x2d8>)
 800211c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b83      	ldr	r3, [pc, #524]	; (8002330 <MX_GPIO_Init+0x2d8>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	4b80      	ldr	r3, [pc, #512]	; (8002330 <MX_GPIO_Init+0x2d8>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a7f      	ldr	r2, [pc, #508]	; (8002330 <MX_GPIO_Init+0x2d8>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b7d      	ldr	r3, [pc, #500]	; (8002330 <MX_GPIO_Init+0x2d8>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002146:	4b7a      	ldr	r3, [pc, #488]	; (8002330 <MX_GPIO_Init+0x2d8>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a79      	ldr	r2, [pc, #484]	; (8002330 <MX_GPIO_Init+0x2d8>)
 800214c:	f043 0320 	orr.w	r3, r3, #32
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b77      	ldr	r3, [pc, #476]	; (8002330 <MX_GPIO_Init+0x2d8>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800215e:	4b74      	ldr	r3, [pc, #464]	; (8002330 <MX_GPIO_Init+0x2d8>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a73      	ldr	r2, [pc, #460]	; (8002330 <MX_GPIO_Init+0x2d8>)
 8002164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b71      	ldr	r3, [pc, #452]	; (8002330 <MX_GPIO_Init+0x2d8>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	2160      	movs	r1, #96	; 0x60
 800217a:	486e      	ldr	r0, [pc, #440]	; (8002334 <MX_GPIO_Init+0x2dc>)
 800217c:	f004 fbce 	bl	800691c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002180:	2201      	movs	r2, #1
 8002182:	2120      	movs	r1, #32
 8002184:	486c      	ldr	r0, [pc, #432]	; (8002338 <MX_GPIO_Init+0x2e0>)
 8002186:	f004 fbc9 	bl	800691c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800218a:	2200      	movs	r2, #0
 800218c:	2108      	movs	r1, #8
 800218e:	486a      	ldr	r0, [pc, #424]	; (8002338 <MX_GPIO_Init+0x2e0>)
 8002190:	f004 fbc4 	bl	800691c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8002194:	2200      	movs	r2, #0
 8002196:	2108      	movs	r1, #8
 8002198:	4868      	ldr	r0, [pc, #416]	; (800233c <MX_GPIO_Init+0x2e4>)
 800219a:	f004 fbbf 	bl	800691c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800219e:	2201      	movs	r2, #1
 80021a0:	2108      	movs	r1, #8
 80021a2:	4867      	ldr	r0, [pc, #412]	; (8002340 <MX_GPIO_Init+0x2e8>)
 80021a4:	f004 fbba 	bl	800691c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80021a8:	2201      	movs	r2, #1
 80021aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ae:	4863      	ldr	r0, [pc, #396]	; (800233c <MX_GPIO_Init+0x2e4>)
 80021b0:	f004 fbb4 	bl	800691c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80021b4:	2200      	movs	r2, #0
 80021b6:	f645 6140 	movw	r1, #24128	; 0x5e40
 80021ba:	4862      	ldr	r0, [pc, #392]	; (8002344 <MX_GPIO_Init+0x2ec>)
 80021bc:	f004 fbae 	bl	800691c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2108      	movs	r1, #8
 80021c4:	4860      	ldr	r0, [pc, #384]	; (8002348 <MX_GPIO_Init+0x2f0>)
 80021c6:	f004 fba9 	bl	800691c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021ca:	2308      	movs	r3, #8
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ce:	2300      	movs	r3, #0
 80021d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021da:	4619      	mov	r1, r3
 80021dc:	4855      	ldr	r0, [pc, #340]	; (8002334 <MX_GPIO_Init+0x2dc>)
 80021de:	f004 f8d1 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80021e2:	f643 0323 	movw	r3, #14371	; 0x3823
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80021f4:	230a      	movs	r3, #10
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021fc:	4619      	mov	r1, r3
 80021fe:	4853      	ldr	r0, [pc, #332]	; (800234c <MX_GPIO_Init+0x2f4>)
 8002200:	f004 f8c0 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8002204:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220a:	2300      	movs	r3, #0
 800220c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002216:	4619      	mov	r1, r3
 8002218:	484d      	ldr	r0, [pc, #308]	; (8002350 <MX_GPIO_Init+0x2f8>)
 800221a:	f004 f8b3 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 800221e:	2360      	movs	r3, #96	; 0x60
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002222:	2301      	movs	r3, #1
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800222e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002232:	4619      	mov	r1, r3
 8002234:	483f      	ldr	r0, [pc, #252]	; (8002334 <MX_GPIO_Init+0x2dc>)
 8002236:	f004 f8a5 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800223a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002240:	2300      	movs	r3, #0
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800224c:	4619      	mov	r1, r3
 800224e:	4841      	ldr	r0, [pc, #260]	; (8002354 <MX_GPIO_Init+0x2fc>)
 8002250:	f004 f898 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002254:	2340      	movs	r3, #64	; 0x40
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002258:	4b3f      	ldr	r3, [pc, #252]	; (8002358 <MX_GPIO_Init+0x300>)
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002260:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002264:	4619      	mov	r1, r3
 8002266:	4834      	ldr	r0, [pc, #208]	; (8002338 <MX_GPIO_Init+0x2e0>)
 8002268:	f004 f88c 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 800226c:	2328      	movs	r3, #40	; 0x28
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002270:	2301      	movs	r3, #1
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800227c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002280:	4619      	mov	r1, r3
 8002282:	482d      	ldr	r0, [pc, #180]	; (8002338 <MX_GPIO_Init+0x2e0>)
 8002284:	f004 f87e 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8002288:	f241 0308 	movw	r3, #4104	; 0x1008
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228e:	2301      	movs	r3, #1
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800229a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800229e:	4619      	mov	r1, r3
 80022a0:	4826      	ldr	r0, [pc, #152]	; (800233c <MX_GPIO_Init+0x2e4>)
 80022a2:	f004 f86f 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80022a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ac:	2300      	movs	r3, #0
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022b8:	4619      	mov	r1, r3
 80022ba:	4828      	ldr	r0, [pc, #160]	; (800235c <MX_GPIO_Init+0x304>)
 80022bc:	f004 f862 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80022c0:	2308      	movs	r3, #8
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c4:	2301      	movs	r3, #1
 80022c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80022d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022d4:	4619      	mov	r1, r3
 80022d6:	481a      	ldr	r0, [pc, #104]	; (8002340 <MX_GPIO_Init+0x2e8>)
 80022d8:	f004 f854 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80022dc:	2310      	movs	r3, #16
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e0:	2300      	movs	r3, #0
 80022e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ec:	4619      	mov	r1, r3
 80022ee:	4812      	ldr	r0, [pc, #72]	; (8002338 <MX_GPIO_Init+0x2e0>)
 80022f0:	f004 f848 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80022f4:	f248 0304 	movw	r3, #32772	; 0x8004
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fa:	2300      	movs	r3, #0
 80022fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002306:	4619      	mov	r1, r3
 8002308:	480e      	ldr	r0, [pc, #56]	; (8002344 <MX_GPIO_Init+0x2ec>)
 800230a:	f004 f83b 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800230e:	f645 6340 	movw	r3, #24128	; 0x5e40
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002314:	2301      	movs	r3, #1
 8002316:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002320:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002324:	4619      	mov	r1, r3
 8002326:	4807      	ldr	r0, [pc, #28]	; (8002344 <MX_GPIO_Init+0x2ec>)
 8002328:	f004 f82c 	bl	8006384 <HAL_GPIO_Init>
 800232c:	e018      	b.n	8002360 <MX_GPIO_Init+0x308>
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800
 8002334:	40021000 	.word	0x40021000
 8002338:	40020c00 	.word	0x40020c00
 800233c:	40022000 	.word	0x40022000
 8002340:	40022800 	.word	0x40022800
 8002344:	40021c00 	.word	0x40021c00
 8002348:	40021800 	.word	0x40021800
 800234c:	40020400 	.word	0x40020400
 8002350:	40020000 	.word	0x40020000
 8002354:	40022400 	.word	0x40022400
 8002358:	10120000 	.word	0x10120000
 800235c:	40020800 	.word	0x40020800

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002366:	4b2c      	ldr	r3, [pc, #176]	; (8002418 <MX_GPIO_Init+0x3c0>)
 8002368:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800236e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002372:	4619      	mov	r1, r3
 8002374:	4829      	ldr	r0, [pc, #164]	; (800241c <MX_GPIO_Init+0x3c4>)
 8002376:	f004 f805 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800237a:	2310      	movs	r3, #16
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002386:	2303      	movs	r3, #3
 8002388:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800238a:	230a      	movs	r3, #10
 800238c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800238e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002392:	4619      	mov	r1, r3
 8002394:	4822      	ldr	r0, [pc, #136]	; (8002420 <MX_GPIO_Init+0x3c8>)
 8002396:	f003 fff5 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 800239a:	2384      	movs	r3, #132	; 0x84
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800239e:	2300      	movs	r3, #0
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023aa:	4619      	mov	r1, r3
 80023ac:	481d      	ldr	r0, [pc, #116]	; (8002424 <MX_GPIO_Init+0x3cc>)
 80023ae:	f003 ffe9 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80023b2:	2305      	movs	r3, #5
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023be:	2303      	movs	r3, #3
 80023c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023c2:	230a      	movs	r3, #10
 80023c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ca:	4619      	mov	r1, r3
 80023cc:	4816      	ldr	r0, [pc, #88]	; (8002428 <MX_GPIO_Init+0x3d0>)
 80023ce:	f003 ffd9 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 80023d2:	2308      	movs	r3, #8
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d6:	2301      	movs	r3, #1
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 80023e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e6:	4619      	mov	r1, r3
 80023e8:	480e      	ldr	r0, [pc, #56]	; (8002424 <MX_GPIO_Init+0x3cc>)
 80023ea:	f003 ffcb 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80023ee:	2328      	movs	r3, #40	; 0x28
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fa:	2303      	movs	r3, #3
 80023fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023fe:	230a      	movs	r3, #10
 8002400:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002402:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002406:	4619      	mov	r1, r3
 8002408:	4808      	ldr	r0, [pc, #32]	; (800242c <MX_GPIO_Init+0x3d4>)
 800240a:	f003 ffbb 	bl	8006384 <HAL_GPIO_Init>

}
 800240e:	bf00      	nop
 8002410:	3740      	adds	r7, #64	; 0x40
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	10120000 	.word	0x10120000
 800241c:	40022000 	.word	0x40022000
 8002420:	40021c00 	.word	0x40021c00
 8002424:	40021800 	.word	0x40021800
 8002428:	40020800 	.word	0x40020800
 800242c:	40020000 	.word	0x40020000

08002430 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8002438:	2001      	movs	r0, #1
 800243a:	f009 fa8e 	bl	800b95a <osDelay>
 800243e:	e7fb      	b.n	8002438 <StartDefaultTask+0x8>

08002440 <fcn_adv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fcn_adv */
void fcn_adv(void const * argument)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fcn_adv */
	uint16_t Message[10];
  /* Infinite loop */
  for(;;)
  {
	if (advn!=0){
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <fcn_adv+0x50>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01b      	beq.n	8002488 <fcn_adv+0x48>
	draw(advn,advx,advy,1);
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <fcn_adv+0x50>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <fcn_adv+0x54>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	4619      	mov	r1, r3
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <fcn_adv+0x58>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	2301      	movs	r3, #1
 8002464:	f7fe fb7a 	bl	8000b5c <draw>
	turn(advm,advx,advy);
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <fcn_adv+0x5c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <fcn_adv+0x54>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	4619      	mov	r1, r3
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <fcn_adv+0x58>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	f7fe fcbf 	bl	8000dfc <turn>
	vTaskResume(AffichageHandle);
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <fcn_adv+0x60>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f00a f9fc 	bl	800c880 <vTaskResume>
	}
	vTaskDelay(50);
 8002488:	2032      	movs	r0, #50	; 0x32
 800248a:	f00a f991 	bl	800c7b0 <vTaskDelay>
	if (advn!=0){
 800248e:	e7db      	b.n	8002448 <fcn_adv+0x8>
 8002490:	20008870 	.word	0x20008870
 8002494:	20008bd8 	.word	0x20008bd8
 8002498:	200086f4 	.word	0x200086f4
 800249c:	200086f5 	.word	0x200086f5
 80024a0:	200086f0 	.word	0x200086f0

080024a4 <fcn_jeu1>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_fcn_jeu1 */
void fcn_jeu1(void const * argument)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fcn_jeu1 */
	/* Infinite loop */
	for (;;) {
		uint8_t n1;
		uint8_t m1;
		while ((n1 > 6) || (n1 < 1) || (m1 > 6) || (m1 < 1) || (s1 == 1)) {
 80024ac:	e00e      	b.n	80024cc <fcn_jeu1+0x28>
			HAL_RNG_GenerateRandomNumber(&hrng, &n1);
 80024ae:	f107 030f 	add.w	r3, r7, #15
 80024b2:	4619      	mov	r1, r3
 80024b4:	4822      	ldr	r0, [pc, #136]	; (8002540 <fcn_jeu1+0x9c>)
 80024b6:	f006 fc93 	bl	8008de0 <HAL_RNG_GenerateRandomNumber>
			HAL_RNG_GenerateRandomNumber(&hrng, &m1);
 80024ba:	f107 030e 	add.w	r3, r7, #14
 80024be:	4619      	mov	r1, r3
 80024c0:	481f      	ldr	r0, [pc, #124]	; (8002540 <fcn_jeu1+0x9c>)
 80024c2:	f006 fc8d 	bl	8008de0 <HAL_RNG_GenerateRandomNumber>
			s1 = 0;
 80024c6:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <fcn_jeu1+0xa0>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
		while ((n1 > 6) || (n1 < 1) || (m1 > 6) || (m1 < 1) || (s1 == 1)) {
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d8ed      	bhi.n	80024ae <fcn_jeu1+0xa>
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ea      	beq.n	80024ae <fcn_jeu1+0xa>
 80024d8:	7bbb      	ldrb	r3, [r7, #14]
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d8e7      	bhi.n	80024ae <fcn_jeu1+0xa>
 80024de:	7bbb      	ldrb	r3, [r7, #14]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0e4      	beq.n	80024ae <fcn_jeu1+0xa>
 80024e4:	4b17      	ldr	r3, [pc, #92]	; (8002544 <fcn_jeu1+0xa0>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d0e0      	beq.n	80024ae <fcn_jeu1+0xa>
		}
		xSemaphoreTake(Mutex1Handle, 1);
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <fcn_jeu1+0xa4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2101      	movs	r1, #1
 80024f2:	4618      	mov	r0, r3
 80024f4:	f009 fda8 	bl	800c048 <xQueueSemaphoreTake>
		draw(n1, 80, 220, 1);
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	4618      	mov	r0, r3
 80024fc:	2301      	movs	r3, #1
 80024fe:	22dc      	movs	r2, #220	; 0xdc
 8002500:	2150      	movs	r1, #80	; 0x50
 8002502:	f7fe fb2b 	bl	8000b5c <draw>
		draw(m1, 80, 240, 1);
 8002506:	7bbb      	ldrb	r3, [r7, #14]
 8002508:	4618      	mov	r0, r3
 800250a:	2301      	movs	r3, #1
 800250c:	22f0      	movs	r2, #240	; 0xf0
 800250e:	2150      	movs	r1, #80	; 0x50
 8002510:	f7fe fb24 	bl	8000b5c <draw>
		xSemaphoreGive(Mutex1Handle);
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <fcn_jeu1+0xa4>)
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	2300      	movs	r3, #0
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	f009 fc91 	bl	800be44 <xQueueGenericSend>
		taskENTER_CRITICAL();
 8002522:	f00b f981 	bl	800d828 <vPortEnterCritical>
		i1 = n1;
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <fcn_jeu1+0xa8>)
 800252a:	701a      	strb	r2, [r3, #0]
		j1 = m1;
 800252c:	7bba      	ldrb	r2, [r7, #14]
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <fcn_jeu1+0xac>)
 8002530:	701a      	strb	r2, [r3, #0]
		taskEXIT_CRITICAL();
 8002532:	f00b f9ab 	bl	800d88c <vPortExitCritical>
		vTaskDelay(100000000);
 8002536:	4807      	ldr	r0, [pc, #28]	; (8002554 <fcn_jeu1+0xb0>)
 8002538:	f00a f93a 	bl	800c7b0 <vTaskDelay>
	for (;;) {
 800253c:	e7b6      	b.n	80024ac <fcn_jeu1+0x8>
 800253e:	bf00      	nop
 8002540:	20008b40 	.word	0x20008b40
 8002544:	20008900 	.word	0x20008900
 8002548:	20008c60 	.word	0x20008c60
 800254c:	20008c68 	.word	0x20008c68
 8002550:	20008820 	.word	0x20008820
 8002554:	05f5e100 	.word	0x05f5e100

08002558 <fcn_jeu2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_fcn_jeu2 */
void fcn_jeu2(void const * argument)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fcn_jeu2 */
	/* Infinite loop */
	for (;;) {
		uint8_t n2;
		uint8_t m2;
		while ((n2 > 6) || (n2 < 1) || (m2 > 6) || (m2 < 1) || (s2 == 1)) {
 8002560:	e00e      	b.n	8002580 <fcn_jeu2+0x28>
			HAL_RNG_GenerateRandomNumber(&hrng, &n2);
 8002562:	f107 030f 	add.w	r3, r7, #15
 8002566:	4619      	mov	r1, r3
 8002568:	4822      	ldr	r0, [pc, #136]	; (80025f4 <fcn_jeu2+0x9c>)
 800256a:	f006 fc39 	bl	8008de0 <HAL_RNG_GenerateRandomNumber>
			HAL_RNG_GenerateRandomNumber(&hrng, &m2);
 800256e:	f107 030e 	add.w	r3, r7, #14
 8002572:	4619      	mov	r1, r3
 8002574:	481f      	ldr	r0, [pc, #124]	; (80025f4 <fcn_jeu2+0x9c>)
 8002576:	f006 fc33 	bl	8008de0 <HAL_RNG_GenerateRandomNumber>
			s2 = 0;
 800257a:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <fcn_jeu2+0xa0>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
		while ((n2 > 6) || (n2 < 1) || (m2 > 6) || (m2 < 1) || (s2 == 1)) {
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2b06      	cmp	r3, #6
 8002584:	d8ed      	bhi.n	8002562 <fcn_jeu2+0xa>
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ea      	beq.n	8002562 <fcn_jeu2+0xa>
 800258c:	7bbb      	ldrb	r3, [r7, #14]
 800258e:	2b06      	cmp	r3, #6
 8002590:	d8e7      	bhi.n	8002562 <fcn_jeu2+0xa>
 8002592:	7bbb      	ldrb	r3, [r7, #14]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0e4      	beq.n	8002562 <fcn_jeu2+0xa>
 8002598:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <fcn_jeu2+0xa0>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d0e0      	beq.n	8002562 <fcn_jeu2+0xa>
		}
		xSemaphoreTake(Mutex1Handle, 1);
 80025a0:	4b16      	ldr	r3, [pc, #88]	; (80025fc <fcn_jeu2+0xa4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2101      	movs	r1, #1
 80025a6:	4618      	mov	r0, r3
 80025a8:	f009 fd4e 	bl	800c048 <xQueueSemaphoreTake>
		draw(n2, 160, 220, 1);
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	4618      	mov	r0, r3
 80025b0:	2301      	movs	r3, #1
 80025b2:	22dc      	movs	r2, #220	; 0xdc
 80025b4:	21a0      	movs	r1, #160	; 0xa0
 80025b6:	f7fe fad1 	bl	8000b5c <draw>
		draw(m2, 160, 240, 1);
 80025ba:	7bbb      	ldrb	r3, [r7, #14]
 80025bc:	4618      	mov	r0, r3
 80025be:	2301      	movs	r3, #1
 80025c0:	22f0      	movs	r2, #240	; 0xf0
 80025c2:	21a0      	movs	r1, #160	; 0xa0
 80025c4:	f7fe faca 	bl	8000b5c <draw>
		xSemaphoreGive(Mutex1Handle);
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <fcn_jeu2+0xa4>)
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	2300      	movs	r3, #0
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	f009 fc37 	bl	800be44 <xQueueGenericSend>
		taskENTER_CRITICAL();
 80025d6:	f00b f927 	bl	800d828 <vPortEnterCritical>
		i2 = n2;
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <fcn_jeu2+0xa8>)
 80025de:	701a      	strb	r2, [r3, #0]
		j2 = m2;
 80025e0:	7bba      	ldrb	r2, [r7, #14]
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <fcn_jeu2+0xac>)
 80025e4:	701a      	strb	r2, [r3, #0]
		taskEXIT_CRITICAL();
 80025e6:	f00b f951 	bl	800d88c <vPortExitCritical>
		vTaskDelay(100000000);
 80025ea:	4807      	ldr	r0, [pc, #28]	; (8002608 <fcn_jeu2+0xb0>)
 80025ec:	f00a f8e0 	bl	800c7b0 <vTaskDelay>
	for (;;) {
 80025f0:	e7b6      	b.n	8002560 <fcn_jeu2+0x8>
 80025f2:	bf00      	nop
 80025f4:	20008b40 	.word	0x20008b40
 80025f8:	20008b54 	.word	0x20008b54
 80025fc:	20008c60 	.word	0x20008c60
 8002600:	20008871 	.word	0x20008871
 8002604:	20008879 	.word	0x20008879
 8002608:	05f5e100 	.word	0x05f5e100

0800260c <fcn_jeu3>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_fcn_jeu3 */
void fcn_jeu3(void const * argument)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fcn_jeu3 */
	/* Infinite loop */
	for (;;) {
		uint8_t n3;
		uint8_t m3;
		while ((n3 > 6) || (n3 < 1) || (m3 > 6) || (m3 < 1) || (s3 == 1)) {
 8002614:	e00e      	b.n	8002634 <fcn_jeu3+0x28>
			HAL_RNG_GenerateRandomNumber(&hrng, &n3);
 8002616:	f107 030f 	add.w	r3, r7, #15
 800261a:	4619      	mov	r1, r3
 800261c:	4822      	ldr	r0, [pc, #136]	; (80026a8 <fcn_jeu3+0x9c>)
 800261e:	f006 fbdf 	bl	8008de0 <HAL_RNG_GenerateRandomNumber>
			HAL_RNG_GenerateRandomNumber(&hrng, &m3);
 8002622:	f107 030e 	add.w	r3, r7, #14
 8002626:	4619      	mov	r1, r3
 8002628:	481f      	ldr	r0, [pc, #124]	; (80026a8 <fcn_jeu3+0x9c>)
 800262a:	f006 fbd9 	bl	8008de0 <HAL_RNG_GenerateRandomNumber>
			s3 = 0;
 800262e:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <fcn_jeu3+0xa0>)
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
		while ((n3 > 6) || (n3 < 1) || (m3 > 6) || (m3 < 1) || (s3 == 1)) {
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b06      	cmp	r3, #6
 8002638:	d8ed      	bhi.n	8002616 <fcn_jeu3+0xa>
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ea      	beq.n	8002616 <fcn_jeu3+0xa>
 8002640:	7bbb      	ldrb	r3, [r7, #14]
 8002642:	2b06      	cmp	r3, #6
 8002644:	d8e7      	bhi.n	8002616 <fcn_jeu3+0xa>
 8002646:	7bbb      	ldrb	r3, [r7, #14]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0e4      	beq.n	8002616 <fcn_jeu3+0xa>
 800264c:	4b17      	ldr	r3, [pc, #92]	; (80026ac <fcn_jeu3+0xa0>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d0e0      	beq.n	8002616 <fcn_jeu3+0xa>
		}
		xSemaphoreTake(Mutex1Handle, 1);
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <fcn_jeu3+0xa4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2101      	movs	r1, #1
 800265a:	4618      	mov	r0, r3
 800265c:	f009 fcf4 	bl	800c048 <xQueueSemaphoreTake>
		draw(n3, 240, 220, 1);
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	4618      	mov	r0, r3
 8002664:	2301      	movs	r3, #1
 8002666:	22dc      	movs	r2, #220	; 0xdc
 8002668:	21f0      	movs	r1, #240	; 0xf0
 800266a:	f7fe fa77 	bl	8000b5c <draw>
		draw(m3, 240, 240, 1);
 800266e:	7bbb      	ldrb	r3, [r7, #14]
 8002670:	4618      	mov	r0, r3
 8002672:	2301      	movs	r3, #1
 8002674:	22f0      	movs	r2, #240	; 0xf0
 8002676:	21f0      	movs	r1, #240	; 0xf0
 8002678:	f7fe fa70 	bl	8000b5c <draw>
		xSemaphoreGive(Mutex1Handle);
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <fcn_jeu3+0xa4>)
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	2300      	movs	r3, #0
 8002682:	2200      	movs	r2, #0
 8002684:	2100      	movs	r1, #0
 8002686:	f009 fbdd 	bl	800be44 <xQueueGenericSend>
		taskENTER_CRITICAL();
 800268a:	f00b f8cd 	bl	800d828 <vPortEnterCritical>
		i3 = n3;
 800268e:	7bfa      	ldrb	r2, [r7, #15]
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <fcn_jeu3+0xa8>)
 8002692:	701a      	strb	r2, [r3, #0]
		j3 = m3;
 8002694:	7bba      	ldrb	r2, [r7, #14]
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <fcn_jeu3+0xac>)
 8002698:	701a      	strb	r2, [r3, #0]
		taskEXIT_CRITICAL();
 800269a:	f00b f8f7 	bl	800d88c <vPortExitCritical>
		vTaskDelay(100000000);
 800269e:	4807      	ldr	r0, [pc, #28]	; (80026bc <fcn_jeu3+0xb0>)
 80026a0:	f00a f886 	bl	800c7b0 <vTaskDelay>
	for (;;) {
 80026a4:	e7b6      	b.n	8002614 <fcn_jeu3+0x8>
 80026a6:	bf00      	nop
 80026a8:	20008b40 	.word	0x20008b40
 80026ac:	20008ca4 	.word	0x20008ca4
 80026b0:	20008c60 	.word	0x20008c60
 80026b4:	200087dc 	.word	0x200087dc
 80026b8:	20008cb2 	.word	0x20008cb2
 80026bc:	05f5e100 	.word	0x05f5e100

080026c0 <fcn_jeu4>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_fcn_jeu4 */
void fcn_jeu4(void const * argument)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fcn_jeu4 */
	/* Infinite loop */
	for (;;) {
		uint8_t n4;
		uint8_t m4;
		while ((n4 > 6) || (n4 < 1) || (m4 > 6) || (m4 < 1) || (s4 == 1)) {
 80026c8:	e00e      	b.n	80026e8 <fcn_jeu4+0x28>
			HAL_RNG_GenerateRandomNumber(&hrng, &n4);
 80026ca:	f107 030f 	add.w	r3, r7, #15
 80026ce:	4619      	mov	r1, r3
 80026d0:	4823      	ldr	r0, [pc, #140]	; (8002760 <fcn_jeu4+0xa0>)
 80026d2:	f006 fb85 	bl	8008de0 <HAL_RNG_GenerateRandomNumber>
			HAL_RNG_GenerateRandomNumber(&hrng, &m4);
 80026d6:	f107 030e 	add.w	r3, r7, #14
 80026da:	4619      	mov	r1, r3
 80026dc:	4820      	ldr	r0, [pc, #128]	; (8002760 <fcn_jeu4+0xa0>)
 80026de:	f006 fb7f 	bl	8008de0 <HAL_RNG_GenerateRandomNumber>
			s4 = 0;
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <fcn_jeu4+0xa4>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
		while ((n4 > 6) || (n4 < 1) || (m4 > 6) || (m4 < 1) || (s4 == 1)) {
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d8ed      	bhi.n	80026ca <fcn_jeu4+0xa>
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ea      	beq.n	80026ca <fcn_jeu4+0xa>
 80026f4:	7bbb      	ldrb	r3, [r7, #14]
 80026f6:	2b06      	cmp	r3, #6
 80026f8:	d8e7      	bhi.n	80026ca <fcn_jeu4+0xa>
 80026fa:	7bbb      	ldrb	r3, [r7, #14]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0e4      	beq.n	80026ca <fcn_jeu4+0xa>
 8002700:	4b18      	ldr	r3, [pc, #96]	; (8002764 <fcn_jeu4+0xa4>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d0e0      	beq.n	80026ca <fcn_jeu4+0xa>
		}
		xSemaphoreTake(Mutex1Handle, 1);
 8002708:	4b17      	ldr	r3, [pc, #92]	; (8002768 <fcn_jeu4+0xa8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2101      	movs	r1, #1
 800270e:	4618      	mov	r0, r3
 8002710:	f009 fc9a 	bl	800c048 <xQueueSemaphoreTake>
		draw(n4, 320, 220, 1);
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	4618      	mov	r0, r3
 8002718:	2301      	movs	r3, #1
 800271a:	22dc      	movs	r2, #220	; 0xdc
 800271c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002720:	f7fe fa1c 	bl	8000b5c <draw>
		draw(m4, 320, 240, 1);
 8002724:	7bbb      	ldrb	r3, [r7, #14]
 8002726:	4618      	mov	r0, r3
 8002728:	2301      	movs	r3, #1
 800272a:	22f0      	movs	r2, #240	; 0xf0
 800272c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002730:	f7fe fa14 	bl	8000b5c <draw>
		xSemaphoreGive(Mutex1Handle);
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <fcn_jeu4+0xa8>)
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	2300      	movs	r3, #0
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	f009 fb81 	bl	800be44 <xQueueGenericSend>
		taskENTER_CRITICAL();
 8002742:	f00b f871 	bl	800d828 <vPortEnterCritical>
		i4 = n4;
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <fcn_jeu4+0xac>)
 800274a:	701a      	strb	r2, [r3, #0]
		j4 = m4;
 800274c:	7bba      	ldrb	r2, [r7, #14]
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <fcn_jeu4+0xb0>)
 8002750:	701a      	strb	r2, [r3, #0]
		taskEXIT_CRITICAL();
 8002752:	f00b f89b 	bl	800d88c <vPortExitCritical>
		vTaskDelay(100000000);
 8002756:	4807      	ldr	r0, [pc, #28]	; (8002774 <fcn_jeu4+0xb4>)
 8002758:	f00a f82a 	bl	800c7b0 <vTaskDelay>
	for (;;) {
 800275c:	e7b4      	b.n	80026c8 <fcn_jeu4+0x8>
 800275e:	bf00      	nop
 8002760:	20008b40 	.word	0x20008b40
 8002764:	20008ad0 	.word	0x20008ad0
 8002768:	20008c60 	.word	0x20008c60
 800276c:	20008c1c 	.word	0x20008c1c
 8002770:	20008878 	.word	0x20008878
 8002774:	05f5e100 	.word	0x05f5e100

08002778 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a04      	ldr	r2, [pc, #16]	; (8002798 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800278a:	f002 fbc5 	bl	8004f18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40001000 	.word	0x40001000

0800279c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027a2:	e7fe      	b.n	80027a2 <Error_Handler+0x6>

080027a4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08c      	sub	sp, #48	; 0x30
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a51      	ldr	r2, [pc, #324]	; (80028f4 <I2Cx_MspInit+0x150>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d14d      	bne.n	8002850 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80027b4:	4b50      	ldr	r3, [pc, #320]	; (80028f8 <I2Cx_MspInit+0x154>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	4a4f      	ldr	r2, [pc, #316]	; (80028f8 <I2Cx_MspInit+0x154>)
 80027ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027be:	6313      	str	r3, [r2, #48]	; 0x30
 80027c0:	4b4d      	ldr	r3, [pc, #308]	; (80028f8 <I2Cx_MspInit+0x154>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80027d0:	2312      	movs	r3, #18
 80027d2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80027d8:	2302      	movs	r3, #2
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80027dc:	2304      	movs	r3, #4
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80027e0:	f107 031c 	add.w	r3, r7, #28
 80027e4:	4619      	mov	r1, r3
 80027e6:	4845      	ldr	r0, [pc, #276]	; (80028fc <I2Cx_MspInit+0x158>)
 80027e8:	f003 fdcc 	bl	8006384 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80027ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80027f2:	f107 031c 	add.w	r3, r7, #28
 80027f6:	4619      	mov	r1, r3
 80027f8:	4840      	ldr	r0, [pc, #256]	; (80028fc <I2Cx_MspInit+0x158>)
 80027fa:	f003 fdc3 	bl	8006384 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80027fe:	4b3e      	ldr	r3, [pc, #248]	; (80028f8 <I2Cx_MspInit+0x154>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a3d      	ldr	r2, [pc, #244]	; (80028f8 <I2Cx_MspInit+0x154>)
 8002804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <I2Cx_MspInit+0x154>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002816:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <I2Cx_MspInit+0x154>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4a37      	ldr	r2, [pc, #220]	; (80028f8 <I2Cx_MspInit+0x154>)
 800281c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002820:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002822:	4b35      	ldr	r3, [pc, #212]	; (80028f8 <I2Cx_MspInit+0x154>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4a34      	ldr	r2, [pc, #208]	; (80028f8 <I2Cx_MspInit+0x154>)
 8002828:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800282c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	210f      	movs	r1, #15
 8002832:	2048      	movs	r0, #72	; 0x48
 8002834:	f003 f844 	bl	80058c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002838:	2048      	movs	r0, #72	; 0x48
 800283a:	f003 f85d 	bl	80058f8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	210f      	movs	r1, #15
 8002842:	2049      	movs	r0, #73	; 0x49
 8002844:	f003 f83c 	bl	80058c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002848:	2049      	movs	r0, #73	; 0x49
 800284a:	f003 f855 	bl	80058f8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800284e:	e04d      	b.n	80028ec <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002850:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <I2Cx_MspInit+0x154>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	4a28      	ldr	r2, [pc, #160]	; (80028f8 <I2Cx_MspInit+0x154>)
 8002856:	f043 0302 	orr.w	r3, r3, #2
 800285a:	6313      	str	r3, [r2, #48]	; 0x30
 800285c:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <I2Cx_MspInit+0x154>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800286c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800286e:	2312      	movs	r3, #18
 8002870:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002876:	2302      	movs	r3, #2
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800287a:	2304      	movs	r3, #4
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	4619      	mov	r1, r3
 8002884:	481e      	ldr	r0, [pc, #120]	; (8002900 <I2Cx_MspInit+0x15c>)
 8002886:	f003 fd7d 	bl	8006384 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800288a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800288e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	4619      	mov	r1, r3
 8002896:	481a      	ldr	r0, [pc, #104]	; (8002900 <I2Cx_MspInit+0x15c>)
 8002898:	f003 fd74 	bl	8006384 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <I2Cx_MspInit+0x154>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	4a15      	ldr	r2, [pc, #84]	; (80028f8 <I2Cx_MspInit+0x154>)
 80028a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028a6:	6413      	str	r3, [r2, #64]	; 0x40
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <I2Cx_MspInit+0x154>)
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80028b4:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <I2Cx_MspInit+0x154>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <I2Cx_MspInit+0x154>)
 80028ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028be:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80028c0:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <I2Cx_MspInit+0x154>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <I2Cx_MspInit+0x154>)
 80028c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028ca:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80028cc:	2200      	movs	r2, #0
 80028ce:	210f      	movs	r1, #15
 80028d0:	201f      	movs	r0, #31
 80028d2:	f002 fff5 	bl	80058c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80028d6:	201f      	movs	r0, #31
 80028d8:	f003 f80e 	bl	80058f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80028dc:	2200      	movs	r2, #0
 80028de:	210f      	movs	r1, #15
 80028e0:	2020      	movs	r0, #32
 80028e2:	f002 ffed 	bl	80058c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80028e6:	2020      	movs	r0, #32
 80028e8:	f003 f806 	bl	80058f8 <HAL_NVIC_EnableIRQ>
}
 80028ec:	bf00      	nop
 80028ee:	3730      	adds	r7, #48	; 0x30
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000358 	.word	0x20000358
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40021c00 	.word	0x40021c00
 8002900:	40020400 	.word	0x40020400

08002904 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f004 fb0d 	bl	8006f2c <HAL_I2C_GetState>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d125      	bne.n	8002964 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a14      	ldr	r2, [pc, #80]	; (800296c <I2Cx_Init+0x68>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <I2Cx_Init+0x6c>)
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e002      	b.n	800292e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <I2Cx_Init+0x70>)
 800292c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a11      	ldr	r2, [pc, #68]	; (8002978 <I2Cx_Init+0x74>)
 8002932:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ff23 	bl	80027a4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f003 fff6 	bl	8006950 <HAL_I2C_Init>
  }
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000358 	.word	0x20000358
 8002970:	40005c00 	.word	0x40005c00
 8002974:	40005400 	.word	0x40005400
 8002978:	40912732 	.word	0x40912732

0800297c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08a      	sub	sp, #40	; 0x28
 8002980:	af04      	add	r7, sp, #16
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	4608      	mov	r0, r1
 8002986:	4611      	mov	r1, r2
 8002988:	461a      	mov	r2, r3
 800298a:	4603      	mov	r3, r0
 800298c:	72fb      	strb	r3, [r7, #11]
 800298e:	460b      	mov	r3, r1
 8002990:	813b      	strh	r3, [r7, #8]
 8002992:	4613      	mov	r3, r2
 8002994:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800299a:	7afb      	ldrb	r3, [r7, #11]
 800299c:	b299      	uxth	r1, r3
 800299e:	88f8      	ldrh	r0, [r7, #6]
 80029a0:	893a      	ldrh	r2, [r7, #8]
 80029a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a6:	9302      	str	r3, [sp, #8]
 80029a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4603      	mov	r3, r0
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f004 f9a0 	bl	8006cf8 <HAL_I2C_Mem_Read>
 80029b8:	4603      	mov	r3, r0
 80029ba:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80029c2:	7afb      	ldrb	r3, [r7, #11]
 80029c4:	4619      	mov	r1, r3
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f832 	bl	8002a30 <I2Cx_Error>
  }
  return status;    
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b08a      	sub	sp, #40	; 0x28
 80029da:	af04      	add	r7, sp, #16
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	4608      	mov	r0, r1
 80029e0:	4611      	mov	r1, r2
 80029e2:	461a      	mov	r2, r3
 80029e4:	4603      	mov	r3, r0
 80029e6:	72fb      	strb	r3, [r7, #11]
 80029e8:	460b      	mov	r3, r1
 80029ea:	813b      	strh	r3, [r7, #8]
 80029ec:	4613      	mov	r3, r2
 80029ee:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80029f4:	7afb      	ldrb	r3, [r7, #11]
 80029f6:	b299      	uxth	r1, r3
 80029f8:	88f8      	ldrh	r0, [r7, #6]
 80029fa:	893a      	ldrh	r2, [r7, #8]
 80029fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a00:	9302      	str	r3, [sp, #8]
 8002a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f004 f85f 	bl	8006ad0 <HAL_I2C_Mem_Write>
 8002a12:	4603      	mov	r3, r0
 8002a14:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002a16:	7dfb      	ldrb	r3, [r7, #23]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002a1c:	7afb      	ldrb	r3, [r7, #11]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 f805 	bl	8002a30 <I2Cx_Error>
  }
  return status;
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f004 f817 	bl	8006a70 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff ff5e 	bl	8002904 <I2Cx_Init>
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002a54:	4802      	ldr	r0, [pc, #8]	; (8002a60 <TS_IO_Init+0x10>)
 8002a56:	f7ff ff55 	bl	8002904 <I2Cx_Init>
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000358 	.word	0x20000358

08002a64 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	71bb      	strb	r3, [r7, #6]
 8002a72:	4613      	mov	r3, r2
 8002a74:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002a76:	79bb      	ldrb	r3, [r7, #6]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	79f9      	ldrb	r1, [r7, #7]
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	1d7b      	adds	r3, r7, #5
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2301      	movs	r3, #1
 8002a86:	4803      	ldr	r0, [pc, #12]	; (8002a94 <TS_IO_Write+0x30>)
 8002a88:	f7ff ffa5 	bl	80029d6 <I2Cx_WriteMultiple>
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000358 	.word	0x20000358

08002a98 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	460a      	mov	r2, r1
 8002aa2:	71fb      	strb	r3, [r7, #7]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002aac:	79bb      	ldrb	r3, [r7, #6]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	79f9      	ldrb	r1, [r7, #7]
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	f107 030f 	add.w	r3, r7, #15
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2301      	movs	r3, #1
 8002abe:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <TS_IO_Read+0x38>)
 8002ac0:	f7ff ff5c 	bl	800297c <I2Cx_ReadMultiple>

  return read_value;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000358 	.word	0x20000358

08002ad4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f002 fa3b 	bl	8004f58 <HAL_Delay>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002af0:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002af2:	2228      	movs	r2, #40	; 0x28
 8002af4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002af6:	4b30      	ldr	r3, [pc, #192]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002af8:	2209      	movs	r2, #9
 8002afa:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002afc:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002afe:	2235      	movs	r2, #53	; 0x35
 8002b00:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002b02:	4b2d      	ldr	r3, [pc, #180]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b04:	220b      	movs	r2, #11
 8002b06:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002b08:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b0a:	f240 121b 	movw	r2, #283	; 0x11b
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002b10:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b12:	f240 2215 	movw	r2, #533	; 0x215
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002b18:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b1a:	f240 121d 	movw	r2, #285	; 0x11d
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b22:	f240 2235 	movw	r2, #565	; 0x235
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4823      	ldr	r0, [pc, #140]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b2c:	f000 fe52 	bl	80037d4 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002b30:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b36:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002b38:	4b1f      	ldr	r3, [pc, #124]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b3a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002b3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002b40:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002b48:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002b50:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002b58:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002b5e:	4b16      	ldr	r3, [pc, #88]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002b64:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b6a:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <BSP_LCD_Init+0xd0>)
 8002b74:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002b76:	4810      	ldr	r0, [pc, #64]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b78:	f004 fe6a 	bl	8007850 <HAL_LTDC_GetState>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d103      	bne.n	8002b8a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002b82:	2100      	movs	r1, #0
 8002b84:	480c      	ldr	r0, [pc, #48]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b86:	f000 fd4b 	bl	8003620 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002b8a:	480b      	ldr	r0, [pc, #44]	; (8002bb8 <BSP_LCD_Init+0xcc>)
 8002b8c:	f004 fc90 	bl	80074b0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002b90:	2201      	movs	r2, #1
 8002b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b96:	480a      	ldr	r0, [pc, #40]	; (8002bc0 <BSP_LCD_Init+0xd4>)
 8002b98:	f003 fec0 	bl	800691c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	2108      	movs	r1, #8
 8002ba0:	4808      	ldr	r0, [pc, #32]	; (8002bc4 <BSP_LCD_Init+0xd8>)
 8002ba2:	f003 febb 	bl	800691c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002ba6:	f000 ff35 	bl	8003a14 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002baa:	4807      	ldr	r0, [pc, #28]	; (8002bc8 <BSP_LCD_Init+0xdc>)
 8002bac:	f000 f8d8 	bl	8002d60 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20008cb4 	.word	0x20008cb4
 8002bbc:	40016800 	.word	0x40016800
 8002bc0:	40022000 	.word	0x40022000
 8002bc4:	40022800 	.word	0x40022800
 8002bc8:	20000028 	.word	0x20000028

08002bcc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <BSP_LCD_GetXSize+0x20>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a06      	ldr	r2, [pc, #24]	; (8002bf0 <BSP_LCD_GetXSize+0x24>)
 8002bd6:	2134      	movs	r1, #52	; 0x34
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3360      	adds	r3, #96	; 0x60
 8002be0:	681b      	ldr	r3, [r3, #0]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	200003e4 	.word	0x200003e4
 8002bf0:	20008cb4 	.word	0x20008cb4

08002bf4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <BSP_LCD_GetYSize+0x20>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a06      	ldr	r2, [pc, #24]	; (8002c18 <BSP_LCD_GetYSize+0x24>)
 8002bfe:	2134      	movs	r1, #52	; 0x34
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	3364      	adds	r3, #100	; 0x64
 8002c08:	681b      	ldr	r3, [r3, #0]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	200003e4 	.word	0x200003e4
 8002c18:	20008cb4 	.word	0x20008cb4

08002c1c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b090      	sub	sp, #64	; 0x40
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002c2c:	f7ff ffce 	bl	8002bcc <BSP_LCD_GetXSize>
 8002c30:	4603      	mov	r3, r0
 8002c32:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002c38:	f7ff ffdc 	bl	8002bf4 <BSP_LCD_GetYSize>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002c48:	23ff      	movs	r3, #255	; 0xff
 8002c4a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002c62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002c68:	2307      	movs	r3, #7
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002c6c:	f7ff ffae 	bl	8002bcc <BSP_LCD_GetXSize>
 8002c70:	4603      	mov	r3, r0
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002c74:	f7ff ffbe 	bl	8002bf4 <BSP_LCD_GetYSize>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002c7c:	88fa      	ldrh	r2, [r7, #6]
 8002c7e:	f107 030c 	add.w	r3, r7, #12
 8002c82:	4619      	mov	r1, r3
 8002c84:	4812      	ldr	r0, [pc, #72]	; (8002cd0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002c86:	f004 fda5 	bl	80077d4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002c8a:	88fa      	ldrh	r2, [r7, #6]
 8002c8c:	4911      	ldr	r1, [pc, #68]	; (8002cd4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	3304      	adds	r3, #4
 8002c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002ca0:	88fa      	ldrh	r2, [r7, #6]
 8002ca2:	490c      	ldr	r1, [pc, #48]	; (8002cd4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	3308      	adds	r3, #8
 8002cb0:	4a09      	ldr	r2, [pc, #36]	; (8002cd8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002cb2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002cb4:	88fa      	ldrh	r2, [r7, #6]
 8002cb6:	4907      	ldr	r1, [pc, #28]	; (8002cd4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002cc6:	601a      	str	r2, [r3, #0]
}
 8002cc8:	bf00      	nop
 8002cca:	3740      	adds	r7, #64	; 0x40
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20008cb4 	.word	0x20008cb4
 8002cd4:	200003e8 	.word	0x200003e8
 8002cd8:	20000028 	.word	0x20000028

08002cdc <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <BSP_LCD_SelectLayer+0x1c>)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6013      	str	r3, [r2, #0]
} 
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	200003e4 	.word	0x200003e4

08002cfc <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002d04:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <BSP_LCD_SetTextColor+0x28>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4907      	ldr	r1, [pc, #28]	; (8002d28 <BSP_LCD_SetTextColor+0x2c>)
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	601a      	str	r2, [r3, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	200003e4 	.word	0x200003e4
 8002d28:	200003e8 	.word	0x200003e8

08002d2c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <BSP_LCD_SetBackColor+0x2c>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4908      	ldr	r1, [pc, #32]	; (8002d5c <BSP_LCD_SetBackColor+0x30>)
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	3304      	adds	r3, #4
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	601a      	str	r2, [r3, #0]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	200003e4 	.word	0x200003e4
 8002d5c:	200003e8 	.word	0x200003e8

08002d60 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <BSP_LCD_SetFont+0x2c>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4908      	ldr	r1, [pc, #32]	; (8002d90 <BSP_LCD_SetFont+0x30>)
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	3308      	adds	r3, #8
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	601a      	str	r2, [r3, #0]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	200003e4 	.word	0x200003e4
 8002d90:	200003e8 	.word	0x200003e8

08002d94 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <BSP_LCD_GetFont+0x24>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4907      	ldr	r1, [pc, #28]	; (8002dbc <BSP_LCD_GetFont+0x28>)
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	3308      	adds	r3, #8
 8002daa:	681b      	ldr	r3, [r3, #0]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	200003e4 	.word	0x200003e4
 8002dbc:	200003e8 	.word	0x200003e8

08002dc0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <BSP_LCD_Clear+0x48>)
 8002dca:	681c      	ldr	r4, [r3, #0]
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <BSP_LCD_Clear+0x48>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0e      	ldr	r2, [pc, #56]	; (8002e0c <BSP_LCD_Clear+0x4c>)
 8002dd2:	2134      	movs	r1, #52	; 0x34
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	335c      	adds	r3, #92	; 0x5c
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461d      	mov	r5, r3
 8002de0:	f7ff fef4 	bl	8002bcc <BSP_LCD_GetXSize>
 8002de4:	4606      	mov	r6, r0
 8002de6:	f7ff ff05 	bl	8002bf4 <BSP_LCD_GetYSize>
 8002dea:	4602      	mov	r2, r0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	2300      	movs	r3, #0
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	4632      	mov	r2, r6
 8002df8:	4629      	mov	r1, r5
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f000 fdbe 	bl	800397c <LL_FillBuffer>
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e08:	200003e4 	.word	0x200003e4
 8002e0c:	20008cb4 	.word	0x20008cb4

08002e10 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002e10:	b590      	push	{r4, r7, lr}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	80fb      	strh	r3, [r7, #6]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	80bb      	strh	r3, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <BSP_LCD_DisplayChar+0x80>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	491b      	ldr	r1, [pc, #108]	; (8002e94 <BSP_LCD_DisplayChar+0x84>)
 8002e28:	4613      	mov	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	3308      	adds	r3, #8
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6819      	ldr	r1, [r3, #0]
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <BSP_LCD_DisplayChar+0x80>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4c14      	ldr	r4, [pc, #80]	; (8002e94 <BSP_LCD_DisplayChar+0x84>)
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4423      	add	r3, r4
 8002e4e:	3308      	adds	r3, #8
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e54:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e58:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <BSP_LCD_DisplayChar+0x80>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4c0d      	ldr	r4, [pc, #52]	; (8002e94 <BSP_LCD_DisplayChar+0x84>)
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4423      	add	r3, r4
 8002e68:	3308      	adds	r3, #8
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	889b      	ldrh	r3, [r3, #4]
 8002e6e:	3307      	adds	r3, #7
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	da00      	bge.n	8002e76 <BSP_LCD_DisplayChar+0x66>
 8002e74:	3307      	adds	r3, #7
 8002e76:	10db      	asrs	r3, r3, #3
 8002e78:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e7c:	18ca      	adds	r2, r1, r3
 8002e7e:	88b9      	ldrh	r1, [r7, #4]
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fcc2 	bl	800380c <DrawChar>
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd90      	pop	{r4, r7, pc}
 8002e90:	200003e4 	.word	0x200003e4
 8002e94:	200003e8 	.word	0x200003e8

08002e98 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002e98:	b5b0      	push	{r4, r5, r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60ba      	str	r2, [r7, #8]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	81fb      	strh	r3, [r7, #14]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	81bb      	strh	r3, [r7, #12]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	83fb      	strh	r3, [r7, #30]
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002ec2:	e002      	b.n	8002eca <BSP_LCD_DisplayStringAt+0x32>
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	617a      	str	r2, [r7, #20]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f6      	bne.n	8002ec4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002ed6:	f7ff fe79 	bl	8002bcc <BSP_LCD_GetXSize>
 8002eda:	4b4f      	ldr	r3, [pc, #316]	; (8003018 <BSP_LCD_DisplayStringAt+0x180>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	494f      	ldr	r1, [pc, #316]	; (800301c <BSP_LCD_DisplayStringAt+0x184>)
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	3308      	adds	r3, #8
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	889b      	ldrh	r3, [r3, #4]
 8002ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef4:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d01c      	beq.n	8002f36 <BSP_LCD_DisplayStringAt+0x9e>
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d017      	beq.n	8002f30 <BSP_LCD_DisplayStringAt+0x98>
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d12e      	bne.n	8002f62 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	1ad1      	subs	r1, r2, r3
 8002f0a:	4b43      	ldr	r3, [pc, #268]	; (8003018 <BSP_LCD_DisplayStringAt+0x180>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4843      	ldr	r0, [pc, #268]	; (800301c <BSP_LCD_DisplayStringAt+0x184>)
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4403      	add	r3, r0
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	889b      	ldrh	r3, [r3, #4]
 8002f20:	fb03 f301 	mul.w	r3, r3, r1
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	89fb      	ldrh	r3, [r7, #14]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	83fb      	strh	r3, [r7, #30]
      break;
 8002f2e:	e01b      	b.n	8002f68 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002f30:	89fb      	ldrh	r3, [r7, #14]
 8002f32:	83fb      	strh	r3, [r7, #30]
      break;
 8002f34:	e018      	b.n	8002f68 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	b299      	uxth	r1, r3
 8002f3e:	4b36      	ldr	r3, [pc, #216]	; (8003018 <BSP_LCD_DisplayStringAt+0x180>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4836      	ldr	r0, [pc, #216]	; (800301c <BSP_LCD_DisplayStringAt+0x184>)
 8002f44:	4613      	mov	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4403      	add	r3, r0
 8002f4e:	3308      	adds	r3, #8
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	889b      	ldrh	r3, [r3, #4]
 8002f54:	fb11 f303 	smulbb	r3, r1, r3
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	89fb      	ldrh	r3, [r7, #14]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	83fb      	strh	r3, [r7, #30]
      break;
 8002f60:	e002      	b.n	8002f68 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8002f62:	89fb      	ldrh	r3, [r7, #14]
 8002f64:	83fb      	strh	r3, [r7, #30]
      break;
 8002f66:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002f68:	8bfb      	ldrh	r3, [r7, #30]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <BSP_LCD_DisplayStringAt+0xde>
 8002f6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	da1d      	bge.n	8002fb2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8002f76:	2301      	movs	r3, #1
 8002f78:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002f7a:	e01a      	b.n	8002fb2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	781a      	ldrb	r2, [r3, #0]
 8002f80:	89b9      	ldrh	r1, [r7, #12]
 8002f82:	8bfb      	ldrh	r3, [r7, #30]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff43 	bl	8002e10 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002f8a:	4b23      	ldr	r3, [pc, #140]	; (8003018 <BSP_LCD_DisplayStringAt+0x180>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	4923      	ldr	r1, [pc, #140]	; (800301c <BSP_LCD_DisplayStringAt+0x184>)
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	889a      	ldrh	r2, [r3, #4]
 8002fa0:	8bfb      	ldrh	r3, [r7, #30]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	60bb      	str	r3, [r7, #8]
    i++;
 8002fac:	8bbb      	ldrh	r3, [r7, #28]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf14      	ite	ne
 8002fba:	2301      	movne	r3, #1
 8002fbc:	2300      	moveq	r3, #0
 8002fbe:	b2dc      	uxtb	r4, r3
 8002fc0:	f7ff fe04 	bl	8002bcc <BSP_LCD_GetXSize>
 8002fc4:	4605      	mov	r5, r0
 8002fc6:	8bb9      	ldrh	r1, [r7, #28]
 8002fc8:	4b13      	ldr	r3, [pc, #76]	; (8003018 <BSP_LCD_DisplayStringAt+0x180>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4813      	ldr	r0, [pc, #76]	; (800301c <BSP_LCD_DisplayStringAt+0x184>)
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4403      	add	r3, r0
 8002fd8:	3308      	adds	r3, #8
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	889b      	ldrh	r3, [r3, #4]
 8002fde:	fb03 f301 	mul.w	r3, r3, r1
 8002fe2:	1aeb      	subs	r3, r5, r3
 8002fe4:	b299      	uxth	r1, r3
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <BSP_LCD_DisplayStringAt+0x180>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	480c      	ldr	r0, [pc, #48]	; (800301c <BSP_LCD_DisplayStringAt+0x184>)
 8002fec:	4613      	mov	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4403      	add	r3, r0
 8002ff6:	3308      	adds	r3, #8
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	889b      	ldrh	r3, [r3, #4]
 8002ffc:	4299      	cmp	r1, r3
 8002ffe:	bf2c      	ite	cs
 8003000:	2301      	movcs	r3, #1
 8003002:	2300      	movcc	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	4023      	ands	r3, r4
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1b6      	bne.n	8002f7c <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 800300e:	bf00      	nop
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bdb0      	pop	{r4, r5, r7, pc}
 8003016:	bf00      	nop
 8003018:	200003e4 	.word	0x200003e4
 800301c:	200003e8 	.word	0x200003e8

08003020 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	6039      	str	r1, [r7, #0]
 800302a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800302c:	f7ff feb2 	bl	8002d94 <BSP_LCD_GetFont>
 8003030:	4603      	mov	r3, r0
 8003032:	88db      	ldrh	r3, [r3, #6]
 8003034:	88fa      	ldrh	r2, [r7, #6]
 8003036:	fb12 f303 	smulbb	r3, r2, r3
 800303a:	b299      	uxth	r1, r3
 800303c:	2303      	movs	r3, #3
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	2000      	movs	r0, #0
 8003042:	f7ff ff29 	bl	8002e98 <BSP_LCD_DisplayStringAt>
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af02      	add	r7, sp, #8
 8003056:	4603      	mov	r3, r0
 8003058:	80fb      	strh	r3, [r7, #6]
 800305a:	460b      	mov	r3, r1
 800305c:	80bb      	strh	r3, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003066:	4b26      	ldr	r3, [pc, #152]	; (8003100 <BSP_LCD_DrawHLine+0xb0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a26      	ldr	r2, [pc, #152]	; (8003104 <BSP_LCD_DrawHLine+0xb4>)
 800306c:	2134      	movs	r1, #52	; 0x34
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	4413      	add	r3, r2
 8003074:	3348      	adds	r3, #72	; 0x48
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d114      	bne.n	80030a6 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800307c:	4b20      	ldr	r3, [pc, #128]	; (8003100 <BSP_LCD_DrawHLine+0xb0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a20      	ldr	r2, [pc, #128]	; (8003104 <BSP_LCD_DrawHLine+0xb4>)
 8003082:	2134      	movs	r1, #52	; 0x34
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	335c      	adds	r3, #92	; 0x5c
 800308c:	681c      	ldr	r4, [r3, #0]
 800308e:	f7ff fd9d 	bl	8002bcc <BSP_LCD_GetXSize>
 8003092:	4602      	mov	r2, r0
 8003094:	88bb      	ldrh	r3, [r7, #4]
 8003096:	fb03 f202 	mul.w	r2, r3, r2
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	4413      	add	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4423      	add	r3, r4
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	e013      	b.n	80030ce <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80030a6:	4b16      	ldr	r3, [pc, #88]	; (8003100 <BSP_LCD_DrawHLine+0xb0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a16      	ldr	r2, [pc, #88]	; (8003104 <BSP_LCD_DrawHLine+0xb4>)
 80030ac:	2134      	movs	r1, #52	; 0x34
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	335c      	adds	r3, #92	; 0x5c
 80030b6:	681c      	ldr	r4, [r3, #0]
 80030b8:	f7ff fd88 	bl	8002bcc <BSP_LCD_GetXSize>
 80030bc:	4602      	mov	r2, r0
 80030be:	88bb      	ldrh	r3, [r7, #4]
 80030c0:	fb03 f202 	mul.w	r2, r3, r2
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4423      	add	r3, r4
 80030cc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80030ce:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <BSP_LCD_DrawHLine+0xb0>)
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	68fc      	ldr	r4, [r7, #12]
 80030d4:	887d      	ldrh	r5, [r7, #2]
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <BSP_LCD_DrawHLine+0xb0>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	490b      	ldr	r1, [pc, #44]	; (8003108 <BSP_LCD_DrawHLine+0xb8>)
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	2300      	movs	r3, #0
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2301      	movs	r3, #1
 80030f0:	462a      	mov	r2, r5
 80030f2:	4621      	mov	r1, r4
 80030f4:	f000 fc42 	bl	800397c <LL_FillBuffer>
}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003100:	200003e4 	.word	0x200003e4
 8003104:	20008cb4 	.word	0x20008cb4
 8003108:	200003e8 	.word	0x200003e8

0800310c <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800310c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310e:	b087      	sub	sp, #28
 8003110:	af02      	add	r7, sp, #8
 8003112:	4603      	mov	r3, r0
 8003114:	80fb      	strh	r3, [r7, #6]
 8003116:	460b      	mov	r3, r1
 8003118:	80bb      	strh	r3, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003122:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <BSP_LCD_DrawVLine+0xb8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a28      	ldr	r2, [pc, #160]	; (80031c8 <BSP_LCD_DrawVLine+0xbc>)
 8003128:	2134      	movs	r1, #52	; 0x34
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	4413      	add	r3, r2
 8003130:	3348      	adds	r3, #72	; 0x48
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d114      	bne.n	8003162 <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003138:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <BSP_LCD_DrawVLine+0xb8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a22      	ldr	r2, [pc, #136]	; (80031c8 <BSP_LCD_DrawVLine+0xbc>)
 800313e:	2134      	movs	r1, #52	; 0x34
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	335c      	adds	r3, #92	; 0x5c
 8003148:	681c      	ldr	r4, [r3, #0]
 800314a:	f7ff fd3f 	bl	8002bcc <BSP_LCD_GetXSize>
 800314e:	4602      	mov	r2, r0
 8003150:	88bb      	ldrh	r3, [r7, #4]
 8003152:	fb03 f202 	mul.w	r2, r3, r2
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	4413      	add	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4423      	add	r3, r4
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e013      	b.n	800318a <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003162:	4b18      	ldr	r3, [pc, #96]	; (80031c4 <BSP_LCD_DrawVLine+0xb8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <BSP_LCD_DrawVLine+0xbc>)
 8003168:	2134      	movs	r1, #52	; 0x34
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	335c      	adds	r3, #92	; 0x5c
 8003172:	681c      	ldr	r4, [r3, #0]
 8003174:	f7ff fd2a 	bl	8002bcc <BSP_LCD_GetXSize>
 8003178:	4602      	mov	r2, r0
 800317a:	88bb      	ldrh	r3, [r7, #4]
 800317c:	fb03 f202 	mul.w	r2, r3, r2
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4423      	add	r3, r4
 8003188:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <BSP_LCD_DrawVLine+0xb8>)
 800318c:	681c      	ldr	r4, [r3, #0]
 800318e:	68fd      	ldr	r5, [r7, #12]
 8003190:	887e      	ldrh	r6, [r7, #2]
 8003192:	f7ff fd1b 	bl	8002bcc <BSP_LCD_GetXSize>
 8003196:	4603      	mov	r3, r0
 8003198:	1e59      	subs	r1, r3, #1
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <BSP_LCD_DrawVLine+0xb8>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	480b      	ldr	r0, [pc, #44]	; (80031cc <BSP_LCD_DrawVLine+0xc0>)
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4403      	add	r3, r0
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	9100      	str	r1, [sp, #0]
 80031b0:	4633      	mov	r3, r6
 80031b2:	2201      	movs	r2, #1
 80031b4:	4629      	mov	r1, r5
 80031b6:	4620      	mov	r0, r4
 80031b8:	f000 fbe0 	bl	800397c <LL_FillBuffer>
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c4:	200003e4 	.word	0x200003e4
 80031c8:	20008cb4 	.word	0x20008cb4
 80031cc:	200003e8 	.word	0x200003e8

080031d0 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4604      	mov	r4, r0
 80031d8:	4608      	mov	r0, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	461a      	mov	r2, r3
 80031de:	4623      	mov	r3, r4
 80031e0:	80fb      	strh	r3, [r7, #6]
 80031e2:	4603      	mov	r3, r0
 80031e4:	80bb      	strh	r3, [r7, #4]
 80031e6:	460b      	mov	r3, r1
 80031e8:	807b      	strh	r3, [r7, #2]
 80031ea:	4613      	mov	r3, r2
 80031ec:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	88b9      	ldrh	r1, [r7, #4]
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff2b 	bl	8003050 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80031fa:	88ba      	ldrh	r2, [r7, #4]
 80031fc:	883b      	ldrh	r3, [r7, #0]
 80031fe:	4413      	add	r3, r2
 8003200:	b299      	uxth	r1, r3
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	88fb      	ldrh	r3, [r7, #6]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff ff22 	bl	8003050 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 800320c:	883a      	ldrh	r2, [r7, #0]
 800320e:	88b9      	ldrh	r1, [r7, #4]
 8003210:	88fb      	ldrh	r3, [r7, #6]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff ff7a 	bl	800310c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8003218:	88fa      	ldrh	r2, [r7, #6]
 800321a:	887b      	ldrh	r3, [r7, #2]
 800321c:	4413      	add	r3, r2
 800321e:	b29b      	uxth	r3, r3
 8003220:	883a      	ldrh	r2, [r7, #0]
 8003222:	88b9      	ldrh	r1, [r7, #4]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff71 	bl	800310c <BSP_LCD_DrawVLine>
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bd90      	pop	{r4, r7, pc}
	...

08003234 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	80fb      	strh	r3, [r7, #6]
 800323e:	460b      	mov	r3, r1
 8003240:	80bb      	strh	r3, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003246:	887b      	ldrh	r3, [r7, #2]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	f1c3 0303 	rsb	r3, r3, #3
 800324e:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003258:	e0cf      	b.n	80033fa <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	b29a      	uxth	r2, r3
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	4413      	add	r3, r2
 8003262:	b298      	uxth	r0, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	b29b      	uxth	r3, r3
 8003268:	88ba      	ldrh	r2, [r7, #4]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	b29c      	uxth	r4, r3
 800326e:	4b67      	ldr	r3, [pc, #412]	; (800340c <BSP_LCD_DrawCircle+0x1d8>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4967      	ldr	r1, [pc, #412]	; (8003410 <BSP_LCD_DrawCircle+0x1dc>)
 8003274:	4613      	mov	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	4621      	mov	r1, r4
 8003284:	f000 f8c6 	bl	8003414 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	b29b      	uxth	r3, r3
 800328c:	88fa      	ldrh	r2, [r7, #6]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	b298      	uxth	r0, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	b29b      	uxth	r3, r3
 8003296:	88ba      	ldrh	r2, [r7, #4]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	b29c      	uxth	r4, r3
 800329c:	4b5b      	ldr	r3, [pc, #364]	; (800340c <BSP_LCD_DrawCircle+0x1d8>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	495b      	ldr	r1, [pc, #364]	; (8003410 <BSP_LCD_DrawCircle+0x1dc>)
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	4621      	mov	r1, r4
 80032b2:	f000 f8af 	bl	8003414 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	4413      	add	r3, r2
 80032be:	b298      	uxth	r0, r3
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	88ba      	ldrh	r2, [r7, #4]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	b29c      	uxth	r4, r3
 80032ca:	4b50      	ldr	r3, [pc, #320]	; (800340c <BSP_LCD_DrawCircle+0x1d8>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	4950      	ldr	r1, [pc, #320]	; (8003410 <BSP_LCD_DrawCircle+0x1dc>)
 80032d0:	4613      	mov	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	461a      	mov	r2, r3
 80032de:	4621      	mov	r1, r4
 80032e0:	f000 f898 	bl	8003414 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	88fa      	ldrh	r2, [r7, #6]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	b298      	uxth	r0, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	88ba      	ldrh	r2, [r7, #4]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	b29c      	uxth	r4, r3
 80032f8:	4b44      	ldr	r3, [pc, #272]	; (800340c <BSP_LCD_DrawCircle+0x1d8>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	4944      	ldr	r1, [pc, #272]	; (8003410 <BSP_LCD_DrawCircle+0x1dc>)
 80032fe:	4613      	mov	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	4621      	mov	r1, r4
 800330e:	f000 f881 	bl	8003414 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	b29a      	uxth	r2, r3
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	4413      	add	r3, r2
 800331a:	b298      	uxth	r0, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	b29a      	uxth	r2, r3
 8003320:	88bb      	ldrh	r3, [r7, #4]
 8003322:	4413      	add	r3, r2
 8003324:	b29c      	uxth	r4, r3
 8003326:	4b39      	ldr	r3, [pc, #228]	; (800340c <BSP_LCD_DrawCircle+0x1d8>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4939      	ldr	r1, [pc, #228]	; (8003410 <BSP_LCD_DrawCircle+0x1dc>)
 800332c:	4613      	mov	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	4621      	mov	r1, r4
 800333c:	f000 f86a 	bl	8003414 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	b29b      	uxth	r3, r3
 8003344:	88fa      	ldrh	r2, [r7, #6]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	b298      	uxth	r0, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	b29a      	uxth	r2, r3
 800334e:	88bb      	ldrh	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	b29c      	uxth	r4, r3
 8003354:	4b2d      	ldr	r3, [pc, #180]	; (800340c <BSP_LCD_DrawCircle+0x1d8>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	492d      	ldr	r1, [pc, #180]	; (8003410 <BSP_LCD_DrawCircle+0x1dc>)
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	4621      	mov	r1, r4
 800336a:	f000 f853 	bl	8003414 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	b29a      	uxth	r2, r3
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	4413      	add	r3, r2
 8003376:	b298      	uxth	r0, r3
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	b29a      	uxth	r2, r3
 800337c:	88bb      	ldrh	r3, [r7, #4]
 800337e:	4413      	add	r3, r2
 8003380:	b29c      	uxth	r4, r3
 8003382:	4b22      	ldr	r3, [pc, #136]	; (800340c <BSP_LCD_DrawCircle+0x1d8>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4922      	ldr	r1, [pc, #136]	; (8003410 <BSP_LCD_DrawCircle+0x1dc>)
 8003388:	4613      	mov	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	4621      	mov	r1, r4
 8003398:	f000 f83c 	bl	8003414 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	88fa      	ldrh	r2, [r7, #6]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	b298      	uxth	r0, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	88bb      	ldrh	r3, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	b29c      	uxth	r4, r3
 80033b0:	4b16      	ldr	r3, [pc, #88]	; (800340c <BSP_LCD_DrawCircle+0x1d8>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4916      	ldr	r1, [pc, #88]	; (8003410 <BSP_LCD_DrawCircle+0x1dc>)
 80033b6:	4613      	mov	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	4621      	mov	r1, r4
 80033c6:	f000 f825 	bl	8003414 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	da06      	bge.n	80033de <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	009a      	lsls	r2, r3, #2
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	4413      	add	r3, r2
 80033d8:	3306      	adds	r3, #6
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	e00a      	b.n	80033f4 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	009a      	lsls	r2, r3, #2
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	4413      	add	r3, r2
 80033ea:	330a      	adds	r3, #10
 80033ec:	617b      	str	r3, [r7, #20]
      current_y--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	3301      	adds	r3, #1
 80033f8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	429a      	cmp	r2, r3
 8003400:	f67f af2b 	bls.w	800325a <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003404:	bf00      	nop
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	bd90      	pop	{r4, r7, pc}
 800340c:	200003e4 	.word	0x200003e4
 8003410:	200003e8 	.word	0x200003e8

08003414 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003414:	b5b0      	push	{r4, r5, r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	603a      	str	r2, [r7, #0]
 800341e:	80fb      	strh	r3, [r7, #6]
 8003420:	460b      	mov	r3, r1
 8003422:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003424:	4b1d      	ldr	r3, [pc, #116]	; (800349c <BSP_LCD_DrawPixel+0x88>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <BSP_LCD_DrawPixel+0x8c>)
 800342a:	2134      	movs	r1, #52	; 0x34
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	4413      	add	r3, r2
 8003432:	3348      	adds	r3, #72	; 0x48
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d116      	bne.n	8003468 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800343a:	4b18      	ldr	r3, [pc, #96]	; (800349c <BSP_LCD_DrawPixel+0x88>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <BSP_LCD_DrawPixel+0x8c>)
 8003440:	2134      	movs	r1, #52	; 0x34
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	335c      	adds	r3, #92	; 0x5c
 800344a:	681c      	ldr	r4, [r3, #0]
 800344c:	88bd      	ldrh	r5, [r7, #4]
 800344e:	f7ff fbbd 	bl	8002bcc <BSP_LCD_GetXSize>
 8003452:	4603      	mov	r3, r0
 8003454:	fb03 f205 	mul.w	r2, r3, r5
 8003458:	88fb      	ldrh	r3, [r7, #6]
 800345a:	4413      	add	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4423      	add	r3, r4
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	b292      	uxth	r2, r2
 8003464:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003466:	e015      	b.n	8003494 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <BSP_LCD_DrawPixel+0x88>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <BSP_LCD_DrawPixel+0x8c>)
 800346e:	2134      	movs	r1, #52	; 0x34
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	4413      	add	r3, r2
 8003476:	335c      	adds	r3, #92	; 0x5c
 8003478:	681c      	ldr	r4, [r3, #0]
 800347a:	88bd      	ldrh	r5, [r7, #4]
 800347c:	f7ff fba6 	bl	8002bcc <BSP_LCD_GetXSize>
 8003480:	4603      	mov	r3, r0
 8003482:	fb03 f205 	mul.w	r2, r3, r5
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4423      	add	r3, r4
 800348e:	461a      	mov	r2, r3
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	bf00      	nop
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bdb0      	pop	{r4, r5, r7, pc}
 800349c:	200003e4 	.word	0x200003e4
 80034a0:	20008cb4 	.word	0x20008cb4

080034a4 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	80fb      	strh	r3, [r7, #6]
 80034ae:	460b      	mov	r3, r1
 80034b0:	80bb      	strh	r3, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	f1c3 0303 	rsb	r3, r3, #3
 80034be:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80034c4:	887b      	ldrh	r3, [r7, #2]
 80034c6:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80034c8:	4b44      	ldr	r3, [pc, #272]	; (80035dc <BSP_LCD_FillCircle+0x138>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4944      	ldr	r1, [pc, #272]	; (80035e0 <BSP_LCD_FillCircle+0x13c>)
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fc0e 	bl	8002cfc <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 80034e0:	e061      	b.n	80035a6 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d021      	beq.n	800352c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	b298      	uxth	r0, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	88bb      	ldrh	r3, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	b299      	uxth	r1, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	b29b      	uxth	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	f7ff fda3 	bl	8003050 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	b29b      	uxth	r3, r3
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	b298      	uxth	r0, r3
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	b29b      	uxth	r3, r3
 8003518:	88ba      	ldrh	r2, [r7, #4]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	b299      	uxth	r1, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	b29b      	uxth	r3, r3
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	b29b      	uxth	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	f7ff fd92 	bl	8003050 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d021      	beq.n	8003576 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	b29b      	uxth	r3, r3
 8003536:	88fa      	ldrh	r2, [r7, #6]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	b298      	uxth	r0, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	b29b      	uxth	r3, r3
 8003540:	88ba      	ldrh	r2, [r7, #4]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	b299      	uxth	r1, r3
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	b29b      	uxth	r3, r3
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	b29b      	uxth	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	f7ff fd7e 	bl	8003050 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	b29b      	uxth	r3, r3
 8003558:	88fa      	ldrh	r2, [r7, #6]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	b298      	uxth	r0, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	b29a      	uxth	r2, r3
 8003562:	88bb      	ldrh	r3, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	b299      	uxth	r1, r3
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	b29b      	uxth	r3, r3
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	b29b      	uxth	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	f7ff fd6d 	bl	8003050 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b00      	cmp	r3, #0
 800357a:	da06      	bge.n	800358a <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	009a      	lsls	r2, r3, #2
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	4413      	add	r3, r2
 8003584:	3306      	adds	r3, #6
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	e00a      	b.n	80035a0 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	009a      	lsls	r2, r3, #2
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	4413      	add	r3, r2
 8003596:	330a      	adds	r3, #10
 8003598:	617b      	str	r3, [r7, #20]
      current_y--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3b01      	subs	r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	3301      	adds	r3, #1
 80035a4:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d999      	bls.n	80034e2 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80035ae:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <BSP_LCD_FillCircle+0x138>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	490b      	ldr	r1, [pc, #44]	; (80035e0 <BSP_LCD_FillCircle+0x13c>)
 80035b4:	4613      	mov	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fb9b 	bl	8002cfc <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80035c6:	887a      	ldrh	r2, [r7, #2]
 80035c8:	88b9      	ldrh	r1, [r7, #4]
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fe31 	bl	8003234 <BSP_LCD_DrawCircle>
}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	200003e4 	.word	0x200003e4
 80035e0:	200003e8 	.word	0x200003e8

080035e4 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <BSP_LCD_DisplayOn+0x30>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	4b09      	ldr	r3, [pc, #36]	; (8003614 <BSP_LCD_DisplayOn+0x30>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80035f8:	2201      	movs	r2, #1
 80035fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035fe:	4806      	ldr	r0, [pc, #24]	; (8003618 <BSP_LCD_DisplayOn+0x34>)
 8003600:	f003 f98c 	bl	800691c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003604:	2201      	movs	r2, #1
 8003606:	2108      	movs	r1, #8
 8003608:	4804      	ldr	r0, [pc, #16]	; (800361c <BSP_LCD_DisplayOn+0x38>)
 800360a:	f003 f987 	bl	800691c <HAL_GPIO_WritePin>
}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20008cb4 	.word	0x20008cb4
 8003618:	40022000 	.word	0x40022000
 800361c:	40022800 	.word	0x40022800

08003620 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b090      	sub	sp, #64	; 0x40
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800362a:	4b64      	ldr	r3, [pc, #400]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	4a63      	ldr	r2, [pc, #396]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 8003630:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003634:	6453      	str	r3, [r2, #68]	; 0x44
 8003636:	4b61      	ldr	r3, [pc, #388]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003642:	4b5e      	ldr	r3, [pc, #376]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	4a5d      	ldr	r2, [pc, #372]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 8003648:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800364c:	6313      	str	r3, [r2, #48]	; 0x30
 800364e:	4b5b      	ldr	r3, [pc, #364]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800365a:	4b58      	ldr	r3, [pc, #352]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4a57      	ldr	r2, [pc, #348]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 8003660:	f043 0310 	orr.w	r3, r3, #16
 8003664:	6313      	str	r3, [r2, #48]	; 0x30
 8003666:	4b55      	ldr	r3, [pc, #340]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	623b      	str	r3, [r7, #32]
 8003670:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003672:	4b52      	ldr	r3, [pc, #328]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a51      	ldr	r2, [pc, #324]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 8003678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b4f      	ldr	r3, [pc, #316]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800368a:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	4a4b      	ldr	r2, [pc, #300]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 8003690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003694:	6313      	str	r3, [r2, #48]	; 0x30
 8003696:	4b49      	ldr	r3, [pc, #292]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80036a2:	4b46      	ldr	r3, [pc, #280]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	4a45      	ldr	r2, [pc, #276]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 80036a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ac:	6313      	str	r3, [r2, #48]	; 0x30
 80036ae:	4b43      	ldr	r3, [pc, #268]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80036ba:	4b40      	ldr	r3, [pc, #256]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	4a3f      	ldr	r2, [pc, #252]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 80036c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036c4:	6313      	str	r3, [r2, #48]	; 0x30
 80036c6:	4b3d      	ldr	r3, [pc, #244]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80036d2:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	4a39      	ldr	r2, [pc, #228]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036dc:	6313      	str	r3, [r2, #48]	; 0x30
 80036de:	4b37      	ldr	r3, [pc, #220]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80036ea:	4b34      	ldr	r3, [pc, #208]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	4a33      	ldr	r2, [pc, #204]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 80036f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036f4:	6313      	str	r3, [r2, #48]	; 0x30
 80036f6:	4b31      	ldr	r3, [pc, #196]	; (80037bc <BSP_LCD_MspInit+0x19c>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003702:	2310      	movs	r3, #16
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800370a:	2300      	movs	r3, #0
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800370e:	2302      	movs	r3, #2
 8003710:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003712:	230e      	movs	r3, #14
 8003714:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800371a:	4619      	mov	r1, r3
 800371c:	4828      	ldr	r0, [pc, #160]	; (80037c0 <BSP_LCD_MspInit+0x1a0>)
 800371e:	f002 fe31 	bl	8006384 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003726:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003728:	2302      	movs	r3, #2
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800372c:	2309      	movs	r3, #9
 800372e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003734:	4619      	mov	r1, r3
 8003736:	4823      	ldr	r0, [pc, #140]	; (80037c4 <BSP_LCD_MspInit+0x1a4>)
 8003738:	f002 fe24 	bl	8006384 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800373c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003742:	2302      	movs	r3, #2
 8003744:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003746:	230e      	movs	r3, #14
 8003748:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800374a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800374e:	4619      	mov	r1, r3
 8003750:	481d      	ldr	r0, [pc, #116]	; (80037c8 <BSP_LCD_MspInit+0x1a8>)
 8003752:	f002 fe17 	bl	8006384 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003756:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800375c:	2302      	movs	r3, #2
 800375e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003760:	230e      	movs	r3, #14
 8003762:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003768:	4619      	mov	r1, r3
 800376a:	4818      	ldr	r0, [pc, #96]	; (80037cc <BSP_LCD_MspInit+0x1ac>)
 800376c:	f002 fe0a 	bl	8006384 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003770:	23f7      	movs	r3, #247	; 0xf7
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003774:	2302      	movs	r3, #2
 8003776:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003778:	230e      	movs	r3, #14
 800377a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800377c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003780:	4619      	mov	r1, r3
 8003782:	4813      	ldr	r0, [pc, #76]	; (80037d0 <BSP_LCD_MspInit+0x1b0>)
 8003784:	f002 fdfe 	bl	8006384 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800378e:	2301      	movs	r3, #1
 8003790:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003796:	4619      	mov	r1, r3
 8003798:	480b      	ldr	r0, [pc, #44]	; (80037c8 <BSP_LCD_MspInit+0x1a8>)
 800379a:	f002 fdf3 	bl	8006384 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800379e:	2308      	movs	r3, #8
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80037a2:	2301      	movs	r3, #1
 80037a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80037a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037aa:	4619      	mov	r1, r3
 80037ac:	4808      	ldr	r0, [pc, #32]	; (80037d0 <BSP_LCD_MspInit+0x1b0>)
 80037ae:	f002 fde9 	bl	8006384 <HAL_GPIO_Init>
}
 80037b2:	bf00      	nop
 80037b4:	3740      	adds	r7, #64	; 0x40
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40021800 	.word	0x40021800
 80037c8:	40022000 	.word	0x40022000
 80037cc:	40022400 	.word	0x40022400
 80037d0:	40022800 	.word	0x40022800

080037d4 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80037de:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <BSP_LCD_ClockConfig+0x34>)
 80037e0:	2208      	movs	r2, #8
 80037e2:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80037e4:	4b08      	ldr	r3, [pc, #32]	; (8003808 <BSP_LCD_ClockConfig+0x34>)
 80037e6:	22c0      	movs	r2, #192	; 0xc0
 80037e8:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80037ea:	4b07      	ldr	r3, [pc, #28]	; (8003808 <BSP_LCD_ClockConfig+0x34>)
 80037ec:	2205      	movs	r2, #5
 80037ee:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <BSP_LCD_ClockConfig+0x34>)
 80037f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037f6:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80037f8:	4803      	ldr	r0, [pc, #12]	; (8003808 <BSP_LCD_ClockConfig+0x34>)
 80037fa:	f004 fed9 	bl	80085b0 <HAL_RCCEx_PeriphCLKConfig>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000400 	.word	0x20000400

0800380c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	603a      	str	r2, [r7, #0]
 8003816:	80fb      	strh	r3, [r7, #6]
 8003818:	460b      	mov	r3, r1
 800381a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	61fb      	str	r3, [r7, #28]
 8003820:	2300      	movs	r3, #0
 8003822:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003824:	4b53      	ldr	r3, [pc, #332]	; (8003974 <DrawChar+0x168>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4953      	ldr	r1, [pc, #332]	; (8003978 <DrawChar+0x16c>)
 800382a:	4613      	mov	r3, r2
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	3308      	adds	r3, #8
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	88db      	ldrh	r3, [r3, #6]
 800383a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800383c:	4b4d      	ldr	r3, [pc, #308]	; (8003974 <DrawChar+0x168>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	494d      	ldr	r1, [pc, #308]	; (8003978 <DrawChar+0x16c>)
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3308      	adds	r3, #8
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	889b      	ldrh	r3, [r3, #4]
 8003852:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003854:	8a3b      	ldrh	r3, [r7, #16]
 8003856:	3307      	adds	r3, #7
 8003858:	2b00      	cmp	r3, #0
 800385a:	da00      	bge.n	800385e <DrawChar+0x52>
 800385c:	3307      	adds	r3, #7
 800385e:	10db      	asrs	r3, r3, #3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	b2da      	uxtb	r2, r3
 8003866:	8a3b      	ldrh	r3, [r7, #16]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	e076      	b.n	8003962 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003874:	8a3b      	ldrh	r3, [r7, #16]
 8003876:	3307      	adds	r3, #7
 8003878:	2b00      	cmp	r3, #0
 800387a:	da00      	bge.n	800387e <DrawChar+0x72>
 800387c:	3307      	adds	r3, #7
 800387e:	10db      	asrs	r3, r3, #3
 8003880:	461a      	mov	r2, r3
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	fb03 f302 	mul.w	r3, r3, r2
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	4413      	add	r3, r2
 800388c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800388e:	8a3b      	ldrh	r3, [r7, #16]
 8003890:	3307      	adds	r3, #7
 8003892:	2b00      	cmp	r3, #0
 8003894:	da00      	bge.n	8003898 <DrawChar+0x8c>
 8003896:	3307      	adds	r3, #7
 8003898:	10db      	asrs	r3, r3, #3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d002      	beq.n	80038a4 <DrawChar+0x98>
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d004      	beq.n	80038ac <DrawChar+0xa0>
 80038a2:	e00c      	b.n	80038be <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	617b      	str	r3, [r7, #20]
      break;
 80038aa:	e016      	b.n	80038da <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	3201      	adds	r2, #1
 80038b6:	7812      	ldrb	r2, [r2, #0]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
      break;
 80038bc:	e00d      	b.n	80038da <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	041a      	lsls	r2, r3, #16
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	3301      	adds	r3, #1
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	4313      	orrs	r3, r2
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	3202      	adds	r2, #2
 80038d2:	7812      	ldrb	r2, [r2, #0]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]
      break;
 80038d8:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e036      	b.n	800394e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80038e0:	8a3a      	ldrh	r2, [r7, #16]
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	1ad2      	subs	r2, r2, r3
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	4413      	add	r3, r2
 80038ea:	3b01      	subs	r3, #1
 80038ec:	2201      	movs	r2, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	461a      	mov	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d012      	beq.n	8003922 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	b29a      	uxth	r2, r3
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	4413      	add	r3, r2
 8003904:	b298      	uxth	r0, r3
 8003906:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <DrawChar+0x168>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	491b      	ldr	r1, [pc, #108]	; (8003978 <DrawChar+0x16c>)
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	88bb      	ldrh	r3, [r7, #4]
 800391a:	4619      	mov	r1, r3
 800391c:	f7ff fd7a 	bl	8003414 <BSP_LCD_DrawPixel>
 8003920:	e012      	b.n	8003948 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	b29a      	uxth	r2, r3
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	4413      	add	r3, r2
 800392a:	b298      	uxth	r0, r3
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <DrawChar+0x168>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4911      	ldr	r1, [pc, #68]	; (8003978 <DrawChar+0x16c>)
 8003932:	4613      	mov	r3, r2
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3304      	adds	r3, #4
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	88bb      	ldrh	r3, [r7, #4]
 8003942:	4619      	mov	r1, r3
 8003944:	f7ff fd66 	bl	8003414 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	3301      	adds	r3, #1
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	8a3b      	ldrh	r3, [r7, #16]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	429a      	cmp	r2, r3
 8003954:	d3c4      	bcc.n	80038e0 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003956:	88bb      	ldrh	r3, [r7, #4]
 8003958:	3301      	adds	r3, #1
 800395a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	3301      	adds	r3, #1
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	8a7b      	ldrh	r3, [r7, #18]
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	429a      	cmp	r2, r3
 8003968:	d384      	bcc.n	8003874 <DrawChar+0x68>
  }
}
 800396a:	bf00      	nop
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	200003e4 	.word	0x200003e4
 8003978:	200003e8 	.word	0x200003e8

0800397c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800398a:	4b1e      	ldr	r3, [pc, #120]	; (8003a04 <LL_FillBuffer+0x88>)
 800398c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003990:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <LL_FillBuffer+0x8c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <LL_FillBuffer+0x90>)
 8003998:	2134      	movs	r1, #52	; 0x34
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	3348      	adds	r3, #72	; 0x48
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d103      	bne.n	80039b0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <LL_FillBuffer+0x88>)
 80039aa:	2202      	movs	r2, #2
 80039ac:	609a      	str	r2, [r3, #8]
 80039ae:	e002      	b.n	80039b6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <LL_FillBuffer+0x88>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80039b6:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <LL_FillBuffer+0x88>)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80039bc:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <LL_FillBuffer+0x88>)
 80039be:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <LL_FillBuffer+0x94>)
 80039c0:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80039c2:	4810      	ldr	r0, [pc, #64]	; (8003a04 <LL_FillBuffer+0x88>)
 80039c4:	f002 fa52 	bl	8005e6c <HAL_DMA2D_Init>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d115      	bne.n	80039fa <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80039ce:	68f9      	ldr	r1, [r7, #12]
 80039d0:	480c      	ldr	r0, [pc, #48]	; (8003a04 <LL_FillBuffer+0x88>)
 80039d2:	f002 fba9 	bl	8006128 <HAL_DMA2D_ConfigLayer>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10e      	bne.n	80039fa <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69f9      	ldr	r1, [r7, #28]
 80039e6:	4807      	ldr	r0, [pc, #28]	; (8003a04 <LL_FillBuffer+0x88>)
 80039e8:	f002 fa8a 	bl	8005f00 <HAL_DMA2D_Start>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80039f2:	210a      	movs	r1, #10
 80039f4:	4803      	ldr	r0, [pc, #12]	; (8003a04 <LL_FillBuffer+0x88>)
 80039f6:	f002 faae 	bl	8005f56 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200003a4 	.word	0x200003a4
 8003a08:	200003e4 	.word	0x200003e4
 8003a0c:	20008cb4 	.word	0x20008cb4
 8003a10:	4002b000 	.word	0x4002b000

08003a14 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003a18:	4b29      	ldr	r3, [pc, #164]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a1a:	4a2a      	ldr	r2, [pc, #168]	; (8003ac4 <BSP_SDRAM_Init+0xb0>)
 8003a1c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003a1e:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a20:	2202      	movs	r2, #2
 8003a22:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003a24:	4b28      	ldr	r3, [pc, #160]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a26:	2207      	movs	r2, #7
 8003a28:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003a2a:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003a30:	4b25      	ldr	r3, [pc, #148]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a32:	2207      	movs	r2, #7
 8003a34:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a38:	2202      	movs	r2, #2
 8003a3a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003a3c:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a3e:	2202      	movs	r2, #2
 8003a40:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003a42:	4b21      	ldr	r3, [pc, #132]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a44:	2202      	movs	r2, #2
 8003a46:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003a4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003a54:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a56:	2204      	movs	r2, #4
 8003a58:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003a5a:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003a60:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a62:	2240      	movs	r2, #64	; 0x40
 8003a64:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003a66:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a6c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003a6e:	4b14      	ldr	r3, [pc, #80]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003a74:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a7a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003a7c:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	480c      	ldr	r0, [pc, #48]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a8e:	f000 f87f 	bl	8003b90 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003a92:	490d      	ldr	r1, [pc, #52]	; (8003ac8 <BSP_SDRAM_Init+0xb4>)
 8003a94:	480a      	ldr	r0, [pc, #40]	; (8003ac0 <BSP_SDRAM_Init+0xac>)
 8003a96:	f005 fdb5 	bl	8009604 <HAL_SDRAM_Init>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <BSP_SDRAM_Init+0xb8>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	e002      	b.n	8003aae <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003aa8:	4b08      	ldr	r3, [pc, #32]	; (8003acc <BSP_SDRAM_Init+0xb8>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003aae:	f240 6003 	movw	r0, #1539	; 0x603
 8003ab2:	f000 f80d 	bl	8003ad0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003ab6:	4b05      	ldr	r3, [pc, #20]	; (8003acc <BSP_SDRAM_Init+0xb8>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20008d5c 	.word	0x20008d5c
 8003ac4:	a0000140 	.word	0xa0000140
 8003ac8:	20000484 	.word	0x20000484
 8003acc:	20000038 	.word	0x20000038

08003ad0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003adc:	4b2a      	ldr	r3, [pc, #168]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003ae2:	4b29      	ldr	r3, [pc, #164]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003ae8:	4b27      	ldr	r3, [pc, #156]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003aee:	4b26      	ldr	r3, [pc, #152]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003af8:	4923      	ldr	r1, [pc, #140]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003afa:	4824      	ldr	r0, [pc, #144]	; (8003b8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003afc:	f005 fdb6 	bl	800966c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003b00:	2001      	movs	r0, #1
 8003b02:	f001 fa29 	bl	8004f58 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b08:	2202      	movs	r2, #2
 8003b0a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003b0c:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b0e:	2210      	movs	r2, #16
 8003b10:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003b12:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003b18:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b22:	4919      	ldr	r1, [pc, #100]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b24:	4819      	ldr	r0, [pc, #100]	; (8003b8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b26:	f005 fda1 	bl	800966c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003b2a:	4b17      	ldr	r3, [pc, #92]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003b30:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b32:	2210      	movs	r2, #16
 8003b34:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003b36:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b38:	2208      	movs	r2, #8
 8003b3a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003b3c:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b46:	4910      	ldr	r1, [pc, #64]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b48:	4810      	ldr	r0, [pc, #64]	; (8003b8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b4a:	f005 fd8f 	bl	800966c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003b4e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003b52:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b56:	2204      	movs	r2, #4
 8003b58:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a07      	ldr	r2, [pc, #28]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b6a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b70:	4905      	ldr	r1, [pc, #20]	; (8003b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b72:	4806      	ldr	r0, [pc, #24]	; (8003b8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b74:	f005 fd7a 	bl	800966c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4804      	ldr	r0, [pc, #16]	; (8003b8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b7c:	f005 fda1 	bl	80096c2 <HAL_SDRAM_ProgramRefreshRate>
}
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	200004a0 	.word	0x200004a0
 8003b8c:	20008d5c 	.word	0x20008d5c

08003b90 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b090      	sub	sp, #64	; 0x40
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003b9a:	4b70      	ldr	r3, [pc, #448]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	4a6f      	ldr	r2, [pc, #444]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	6393      	str	r3, [r2, #56]	; 0x38
 8003ba6:	4b6d      	ldr	r3, [pc, #436]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003bb2:	4b6a      	ldr	r3, [pc, #424]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	4a69      	ldr	r2, [pc, #420]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003bb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bbe:	4b67      	ldr	r3, [pc, #412]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bca:	4b64      	ldr	r3, [pc, #400]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	4a63      	ldr	r2, [pc, #396]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd6:	4b61      	ldr	r3, [pc, #388]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	623b      	str	r3, [r7, #32]
 8003be0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003be2:	4b5e      	ldr	r3, [pc, #376]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	4a5d      	ldr	r2, [pc, #372]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003be8:	f043 0308 	orr.w	r3, r3, #8
 8003bec:	6313      	str	r3, [r2, #48]	; 0x30
 8003bee:	4b5b      	ldr	r3, [pc, #364]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	61fb      	str	r3, [r7, #28]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bfa:	4b58      	ldr	r3, [pc, #352]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	4a57      	ldr	r2, [pc, #348]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003c00:	f043 0310 	orr.w	r3, r3, #16
 8003c04:	6313      	str	r3, [r2, #48]	; 0x30
 8003c06:	4b55      	ldr	r3, [pc, #340]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	61bb      	str	r3, [r7, #24]
 8003c10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c12:	4b52      	ldr	r3, [pc, #328]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	4a51      	ldr	r2, [pc, #324]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003c18:	f043 0320 	orr.w	r3, r3, #32
 8003c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1e:	4b4f      	ldr	r3, [pc, #316]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c2a:	4b4c      	ldr	r3, [pc, #304]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	4a4b      	ldr	r2, [pc, #300]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c34:	6313      	str	r3, [r2, #48]	; 0x30
 8003c36:	4b49      	ldr	r3, [pc, #292]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c42:	4b46      	ldr	r3, [pc, #280]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	4a45      	ldr	r2, [pc, #276]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4e:	4b43      	ldr	r3, [pc, #268]	; (8003d5c <BSP_SDRAM_MspInit+0x1cc>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003c62:	2302      	movs	r3, #2
 8003c64:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003c66:	230c      	movs	r3, #12
 8003c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c72:	4619      	mov	r1, r3
 8003c74:	483a      	ldr	r0, [pc, #232]	; (8003d60 <BSP_SDRAM_MspInit+0x1d0>)
 8003c76:	f002 fb85 	bl	8006384 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003c7a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c84:	4619      	mov	r1, r3
 8003c86:	4837      	ldr	r0, [pc, #220]	; (8003d64 <BSP_SDRAM_MspInit+0x1d4>)
 8003c88:	f002 fb7c 	bl	8006384 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003c8c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c96:	4619      	mov	r1, r3
 8003c98:	4833      	ldr	r0, [pc, #204]	; (8003d68 <BSP_SDRAM_MspInit+0x1d8>)
 8003c9a:	f002 fb73 	bl	8006384 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003c9e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4830      	ldr	r0, [pc, #192]	; (8003d6c <BSP_SDRAM_MspInit+0x1dc>)
 8003cac:	f002 fb6a 	bl	8006384 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003cb0:	f248 1333 	movw	r3, #33075	; 0x8133
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cba:	4619      	mov	r1, r3
 8003cbc:	482c      	ldr	r0, [pc, #176]	; (8003d70 <BSP_SDRAM_MspInit+0x1e0>)
 8003cbe:	f002 fb61 	bl	8006384 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003cc2:	2328      	movs	r3, #40	; 0x28
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4829      	ldr	r0, [pc, #164]	; (8003d74 <BSP_SDRAM_MspInit+0x1e4>)
 8003cce:	f002 fb59 	bl	8006384 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003cd2:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003cd8:	4b27      	ldr	r3, [pc, #156]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003cda:	2280      	movs	r2, #128	; 0x80
 8003cdc:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003cde:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ce4:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003ce6:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cec:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cee:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003cf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cf4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003cf6:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003cf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cfc:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003cfe:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003d04:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003d06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d0a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003d12:	4b19      	ldr	r3, [pc, #100]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003d14:	2203      	movs	r2, #3
 8003d16:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003d18:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003d1e:	4b16      	ldr	r3, [pc, #88]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003d24:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003d26:	4a15      	ldr	r2, [pc, #84]	; (8003d7c <BSP_SDRAM_MspInit+0x1ec>)
 8003d28:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d30:	4a11      	ldr	r2, [pc, #68]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003d36:	4810      	ldr	r0, [pc, #64]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003d38:	f001 ff68 	bl	8005c0c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003d3c:	480e      	ldr	r0, [pc, #56]	; (8003d78 <BSP_SDRAM_MspInit+0x1e8>)
 8003d3e:	f001 feb7 	bl	8005ab0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003d42:	2200      	movs	r2, #0
 8003d44:	210f      	movs	r1, #15
 8003d46:	2038      	movs	r0, #56	; 0x38
 8003d48:	f001 fdba 	bl	80058c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003d4c:	2038      	movs	r0, #56	; 0x38
 8003d4e:	f001 fdd3 	bl	80058f8 <HAL_NVIC_EnableIRQ>
}
 8003d52:	bf00      	nop
 8003d54:	3740      	adds	r7, #64	; 0x40
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40020800 	.word	0x40020800
 8003d64:	40020c00 	.word	0x40020c00
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40021400 	.word	0x40021400
 8003d70:	40021800 	.word	0x40021800
 8003d74:	40021c00 	.word	0x40021c00
 8003d78:	200004b0 	.word	0x200004b0
 8003d7c:	40026410 	.word	0x40026410

08003d80 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	460a      	mov	r2, r1
 8003d8a:	80fb      	strh	r3, [r7, #6]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003d94:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <BSP_TS_Init+0x68>)
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003d9a:	4a14      	ldr	r2, [pc, #80]	; (8003dec <BSP_TS_Init+0x6c>)
 8003d9c:	88bb      	ldrh	r3, [r7, #4]
 8003d9e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003da0:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <BSP_TS_Init+0x70>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2070      	movs	r0, #112	; 0x70
 8003da6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003da8:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <BSP_TS_Init+0x70>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2070      	movs	r0, #112	; 0x70
 8003dae:	4798      	blx	r3
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b51      	cmp	r3, #81	; 0x51
 8003db4:	d111      	bne.n	8003dda <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003db6:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <BSP_TS_Init+0x74>)
 8003db8:	4a0d      	ldr	r2, [pc, #52]	; (8003df0 <BSP_TS_Init+0x70>)
 8003dba:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <BSP_TS_Init+0x78>)
 8003dbe:	2270      	movs	r2, #112	; 0x70
 8003dc0:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <BSP_TS_Init+0x7c>)
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003dc8:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <BSP_TS_Init+0x74>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <BSP_TS_Init+0x78>)
 8003dd0:	7812      	ldrb	r2, [r2, #0]
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	4798      	blx	r3
 8003dd8:	e001      	b.n	8003dde <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000514 	.word	0x20000514
 8003dec:	20000516 	.word	0x20000516
 8003df0:	20000000 	.word	0x20000000
 8003df4:	20000510 	.word	0x20000510
 8003df8:	20000519 	.word	0x20000519
 8003dfc:	20000518 	.word	0x20000518

08003e00 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003e00:	b590      	push	{r4, r7, lr}
 8003e02:	b097      	sub	sp, #92	; 0x5c
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003e1a:	4b97      	ldr	r3, [pc, #604]	; (8004078 <BSP_TS_GetState+0x278>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	4a96      	ldr	r2, [pc, #600]	; (800407c <BSP_TS_GetState+0x27c>)
 8003e22:	7812      	ldrb	r2, [r2, #0]
 8003e24:	b292      	uxth	r2, r2
 8003e26:	4610      	mov	r0, r2
 8003e28:	4798      	blx	r3
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 81a8 	beq.w	800418c <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e40:	e197      	b.n	8004172 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8003e42:	4b8d      	ldr	r3, [pc, #564]	; (8004078 <BSP_TS_GetState+0x278>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	4a8c      	ldr	r2, [pc, #560]	; (800407c <BSP_TS_GetState+0x27c>)
 8003e4a:	7812      	ldrb	r2, [r2, #0]
 8003e4c:	b290      	uxth	r0, r2
 8003e4e:	f107 0120 	add.w	r1, r7, #32
 8003e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e54:	0052      	lsls	r2, r2, #1
 8003e56:	188c      	adds	r4, r1, r2
 8003e58:	f107 0114 	add.w	r1, r7, #20
 8003e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e5e:	0052      	lsls	r2, r2, #1
 8003e60:	440a      	add	r2, r1
 8003e62:	4621      	mov	r1, r4
 8003e64:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8003e66:	4b86      	ldr	r3, [pc, #536]	; (8004080 <BSP_TS_GetState+0x280>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d11b      	bne.n	8003ea6 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8003e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003e76:	4413      	add	r3, r2
 8003e78:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003e84:	440b      	add	r3, r1
 8003e86:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8003e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003e92:	4413      	add	r3, r2
 8003e94:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003ea0:	440b      	add	r3, r1
 8003ea2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8003ea6:	4b76      	ldr	r3, [pc, #472]	; (8004080 <BSP_TS_GetState+0x280>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d010      	beq.n	8003ed4 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8003eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003eba:	4413      	add	r3, r2
 8003ebc:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003ec0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003ece:	440b      	add	r3, r1
 8003ed0:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003ed4:	4b6a      	ldr	r3, [pc, #424]	; (8004080 <BSP_TS_GetState+0x280>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d010      	beq.n	8003f02 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8003ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003ee8:	4413      	add	r3, r2
 8003eea:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003eee:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003efc:	440b      	add	r3, r1
 8003efe:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003f02:	4b5f      	ldr	r3, [pc, #380]	; (8004080 <BSP_TS_GetState+0x280>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01b      	beq.n	8003f46 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8003f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003f16:	4413      	add	r3, r2
 8003f18:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003f24:	440b      	add	r3, r1
 8003f26:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003f32:	4413      	add	r3, r2
 8003f34:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003f40:	440b      	add	r3, r1
 8003f42:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003f4e:	4413      	add	r3, r2
 8003f50:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003f54:	4619      	mov	r1, r3
 8003f56:	4a4b      	ldr	r2, [pc, #300]	; (8004084 <BSP_TS_GetState+0x284>)
 8003f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5e:	4299      	cmp	r1, r3
 8003f60:	d90e      	bls.n	8003f80 <BSP_TS_GetState+0x180>
 8003f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003f70:	4944      	ldr	r1, [pc, #272]	; (8004084 <BSP_TS_GetState+0x284>)
 8003f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	e00d      	b.n	8003f9c <BSP_TS_GetState+0x19c>
 8003f80:	4a40      	ldr	r2, [pc, #256]	; (8004084 <BSP_TS_GetState+0x284>)
 8003f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003f92:	440b      	add	r3, r1
 8003f94:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003fa8:	4413      	add	r3, r2
 8003faa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4a35      	ldr	r2, [pc, #212]	; (8004088 <BSP_TS_GetState+0x288>)
 8003fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb8:	4299      	cmp	r1, r3
 8003fba:	d90e      	bls.n	8003fda <BSP_TS_GetState+0x1da>
 8003fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003fca:	492f      	ldr	r1, [pc, #188]	; (8004088 <BSP_TS_GetState+0x288>)
 8003fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	e00d      	b.n	8003ff6 <BSP_TS_GetState+0x1f6>
 8003fda:	4a2b      	ldr	r2, [pc, #172]	; (8004088 <BSP_TS_GetState+0x288>)
 8003fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003fec:	440b      	add	r3, r1
 8003fee:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8003ffa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003ffe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004002:	4413      	add	r3, r2
 8004004:	2b05      	cmp	r3, #5
 8004006:	dd17      	ble.n	8004038 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8004008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004010:	4413      	add	r3, r2
 8004012:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004016:	4619      	mov	r1, r3
 8004018:	4a1a      	ldr	r2, [pc, #104]	; (8004084 <BSP_TS_GetState+0x284>)
 800401a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8004020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004028:	4413      	add	r3, r2
 800402a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800402e:	4619      	mov	r1, r3
 8004030:	4a15      	ldr	r2, [pc, #84]	; (8004088 <BSP_TS_GetState+0x288>)
 8004032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004034:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004038:	4b10      	ldr	r3, [pc, #64]	; (800407c <BSP_TS_GetState+0x27c>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b70      	cmp	r3, #112	; 0x70
 800403e:	d125      	bne.n	800408c <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8004040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004048:	4413      	add	r3, r2
 800404a:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	4413      	add	r3, r2
 8004056:	460a      	mov	r2, r1
 8004058:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800405a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004062:	4413      	add	r3, r2
 8004064:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800406c:	3304      	adds	r3, #4
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4413      	add	r3, r2
 8004072:	460a      	mov	r2, r1
 8004074:	809a      	strh	r2, [r3, #4]
 8004076:	e02c      	b.n	80040d2 <BSP_TS_GetState+0x2d2>
 8004078:	20000510 	.word	0x20000510
 800407c:	20000519 	.word	0x20000519
 8004080:	20000518 	.word	0x20000518
 8004084:	2000051c 	.word	0x2000051c
 8004088:	20000530 	.word	0x20000530
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800408c:	4b42      	ldr	r3, [pc, #264]	; (8004198 <BSP_TS_GetState+0x398>)
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	4619      	mov	r1, r3
 8004092:	4a42      	ldr	r2, [pc, #264]	; (800419c <BSP_TS_GetState+0x39c>)
 8004094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409a:	fb03 f301 	mul.w	r3, r3, r1
 800409e:	0b1b      	lsrs	r3, r3, #12
 80040a0:	b299      	uxth	r1, r3
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	460a      	mov	r2, r1
 80040ac:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80040ae:	4b3c      	ldr	r3, [pc, #240]	; (80041a0 <BSP_TS_GetState+0x3a0>)
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	4619      	mov	r1, r3
 80040b4:	4a3b      	ldr	r2, [pc, #236]	; (80041a4 <BSP_TS_GetState+0x3a4>)
 80040b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040bc:	fb03 f301 	mul.w	r3, r3, r1
 80040c0:	0b1b      	lsrs	r3, r3, #12
 80040c2:	b299      	uxth	r1, r3
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c8:	3304      	adds	r3, #4
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	4413      	add	r3, r2
 80040ce:	460a      	mov	r2, r1
 80040d0:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80040d2:	4b35      	ldr	r3, [pc, #212]	; (80041a8 <BSP_TS_GetState+0x3a8>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	b298      	uxth	r0, r3
 80040d8:	f107 010c 	add.w	r1, r7, #12
 80040dc:	f107 0210 	add.w	r2, r7, #16
 80040e0:	f107 0308 	add.w	r3, r7, #8
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	460b      	mov	r3, r1
 80040e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80040ea:	f7fc fc5f 	bl	80009ac <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	b2d9      	uxtb	r1, r3
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f6:	4413      	add	r3, r2
 80040f8:	3316      	adds	r3, #22
 80040fa:	460a      	mov	r2, r1
 80040fc:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	b2d9      	uxtb	r1, r3
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004106:	4413      	add	r3, r2
 8004108:	3320      	adds	r3, #32
 800410a:	460a      	mov	r2, r1
 800410c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b03      	cmp	r3, #3
 8004112:	d827      	bhi.n	8004164 <BSP_TS_GetState+0x364>
 8004114:	a201      	add	r2, pc, #4	; (adr r2, 800411c <BSP_TS_GetState+0x31c>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	0800412d 	.word	0x0800412d
 8004120:	0800413b 	.word	0x0800413b
 8004124:	08004149 	.word	0x08004149
 8004128:	08004157 	.word	0x08004157
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004130:	4413      	add	r3, r2
 8004132:	331b      	adds	r3, #27
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
          break;
 8004138:	e018      	b.n	800416c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800413e:	4413      	add	r3, r2
 8004140:	331b      	adds	r3, #27
 8004142:	2202      	movs	r2, #2
 8004144:	701a      	strb	r2, [r3, #0]
          break;
 8004146:	e011      	b.n	800416c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800414c:	4413      	add	r3, r2
 800414e:	331b      	adds	r3, #27
 8004150:	2203      	movs	r2, #3
 8004152:	701a      	strb	r2, [r3, #0]
          break;
 8004154:	e00a      	b.n	800416c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800415a:	4413      	add	r3, r2
 800415c:	331b      	adds	r3, #27
 800415e:	2200      	movs	r2, #0
 8004160:	701a      	strb	r2, [r3, #0]
          break;
 8004162:	e003      	b.n	800416c <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800416a:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800416c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800416e:	3301      	adds	r3, #1
 8004170:	64bb      	str	r3, [r7, #72]	; 0x48
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800417a:	4293      	cmp	r3, r2
 800417c:	f4ff ae61 	bcc.w	8003e42 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f813 	bl	80041ac <BSP_TS_Get_GestureId>
 8004186:	4603      	mov	r3, r0
 8004188:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800418c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004190:	4618      	mov	r0, r3
 8004192:	3754      	adds	r7, #84	; 0x54
 8004194:	46bd      	mov	sp, r7
 8004196:	bd90      	pop	{r4, r7, pc}
 8004198:	20000514 	.word	0x20000514
 800419c:	2000051c 	.word	0x2000051c
 80041a0:	20000516 	.word	0x20000516
 80041a4:	20000530 	.word	0x20000530
 80041a8:	20000519 	.word	0x20000519

080041ac <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80041bc:	4b1f      	ldr	r3, [pc, #124]	; (800423c <BSP_TS_Get_GestureId+0x90>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	f107 0208 	add.w	r2, r7, #8
 80041c6:	4611      	mov	r1, r2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fc fbd6 	bl	800097a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b18      	cmp	r3, #24
 80041d2:	d01b      	beq.n	800420c <BSP_TS_Get_GestureId+0x60>
 80041d4:	2b18      	cmp	r3, #24
 80041d6:	d806      	bhi.n	80041e6 <BSP_TS_Get_GestureId+0x3a>
 80041d8:	2b10      	cmp	r3, #16
 80041da:	d00f      	beq.n	80041fc <BSP_TS_Get_GestureId+0x50>
 80041dc:	2b14      	cmp	r3, #20
 80041de:	d011      	beq.n	8004204 <BSP_TS_Get_GestureId+0x58>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d007      	beq.n	80041f4 <BSP_TS_Get_GestureId+0x48>
 80041e4:	e022      	b.n	800422c <BSP_TS_Get_GestureId+0x80>
 80041e6:	2b40      	cmp	r3, #64	; 0x40
 80041e8:	d018      	beq.n	800421c <BSP_TS_Get_GestureId+0x70>
 80041ea:	2b49      	cmp	r3, #73	; 0x49
 80041ec:	d01a      	beq.n	8004224 <BSP_TS_Get_GestureId+0x78>
 80041ee:	2b1c      	cmp	r3, #28
 80041f0:	d010      	beq.n	8004214 <BSP_TS_Get_GestureId+0x68>
 80041f2:	e01b      	b.n	800422c <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80041fa:	e01a      	b.n	8004232 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004202:	e016      	b.n	8004232 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800420a:	e012      	b.n	8004232 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2203      	movs	r2, #3
 8004210:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004212:	e00e      	b.n	8004232 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2204      	movs	r2, #4
 8004218:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800421a:	e00a      	b.n	8004232 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2205      	movs	r2, #5
 8004220:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004222:	e006      	b.n	8004232 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2206      	movs	r2, #6
 8004228:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800422a:	e002      	b.n	8004232 <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
      break;
 8004230:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004232:	7bfb      	ldrb	r3, [r7, #15]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	20000519 	.word	0x20000519

08004240 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004246:	4b11      	ldr	r3, [pc, #68]	; (800428c <HAL_MspInit+0x4c>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	4a10      	ldr	r2, [pc, #64]	; (800428c <HAL_MspInit+0x4c>)
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004250:	6413      	str	r3, [r2, #64]	; 0x40
 8004252:	4b0e      	ldr	r3, [pc, #56]	; (800428c <HAL_MspInit+0x4c>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800425e:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_MspInit+0x4c>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	4a0a      	ldr	r2, [pc, #40]	; (800428c <HAL_MspInit+0x4c>)
 8004264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004268:	6453      	str	r3, [r2, #68]	; 0x44
 800426a:	4b08      	ldr	r3, [pc, #32]	; (800428c <HAL_MspInit+0x4c>)
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004276:	2200      	movs	r2, #0
 8004278:	210f      	movs	r1, #15
 800427a:	f06f 0001 	mvn.w	r0, #1
 800427e:	f001 fb1f 	bl	80058c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40023800 	.word	0x40023800

08004290 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08c      	sub	sp, #48	; 0x30
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004298:	f107 031c 	add.w	r3, r7, #28
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	605a      	str	r2, [r3, #4]
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	60da      	str	r2, [r3, #12]
 80042a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a2a      	ldr	r2, [pc, #168]	; (8004358 <HAL_ADC_MspInit+0xc8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d124      	bne.n	80042fc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042b2:	4b2a      	ldr	r3, [pc, #168]	; (800435c <HAL_ADC_MspInit+0xcc>)
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	4a29      	ldr	r2, [pc, #164]	; (800435c <HAL_ADC_MspInit+0xcc>)
 80042b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042bc:	6453      	str	r3, [r2, #68]	; 0x44
 80042be:	4b27      	ldr	r3, [pc, #156]	; (800435c <HAL_ADC_MspInit+0xcc>)
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ca:	4b24      	ldr	r3, [pc, #144]	; (800435c <HAL_ADC_MspInit+0xcc>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	4a23      	ldr	r2, [pc, #140]	; (800435c <HAL_ADC_MspInit+0xcc>)
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	6313      	str	r3, [r2, #48]	; 0x30
 80042d6:	4b21      	ldr	r3, [pc, #132]	; (800435c <HAL_ADC_MspInit+0xcc>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80042e2:	2301      	movs	r3, #1
 80042e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042e6:	2303      	movs	r3, #3
 80042e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ee:	f107 031c 	add.w	r3, r7, #28
 80042f2:	4619      	mov	r1, r3
 80042f4:	481a      	ldr	r0, [pc, #104]	; (8004360 <HAL_ADC_MspInit+0xd0>)
 80042f6:	f002 f845 	bl	8006384 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80042fa:	e029      	b.n	8004350 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a18      	ldr	r2, [pc, #96]	; (8004364 <HAL_ADC_MspInit+0xd4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d124      	bne.n	8004350 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004306:	4b15      	ldr	r3, [pc, #84]	; (800435c <HAL_ADC_MspInit+0xcc>)
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	4a14      	ldr	r2, [pc, #80]	; (800435c <HAL_ADC_MspInit+0xcc>)
 800430c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004310:	6453      	str	r3, [r2, #68]	; 0x44
 8004312:	4b12      	ldr	r3, [pc, #72]	; (800435c <HAL_ADC_MspInit+0xcc>)
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800431e:	4b0f      	ldr	r3, [pc, #60]	; (800435c <HAL_ADC_MspInit+0xcc>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	4a0e      	ldr	r2, [pc, #56]	; (800435c <HAL_ADC_MspInit+0xcc>)
 8004324:	f043 0320 	orr.w	r3, r3, #32
 8004328:	6313      	str	r3, [r2, #48]	; 0x30
 800432a:	4b0c      	ldr	r3, [pc, #48]	; (800435c <HAL_ADC_MspInit+0xcc>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8004336:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800433a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800433c:	2303      	movs	r3, #3
 800433e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004340:	2300      	movs	r3, #0
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004344:	f107 031c 	add.w	r3, r7, #28
 8004348:	4619      	mov	r1, r3
 800434a:	4807      	ldr	r0, [pc, #28]	; (8004368 <HAL_ADC_MspInit+0xd8>)
 800434c:	f002 f81a 	bl	8006384 <HAL_GPIO_Init>
}
 8004350:	bf00      	nop
 8004352:	3730      	adds	r7, #48	; 0x30
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40012000 	.word	0x40012000
 800435c:	40023800 	.word	0x40023800
 8004360:	40020000 	.word	0x40020000
 8004364:	40012200 	.word	0x40012200
 8004368:	40021400 	.word	0x40021400

0800436c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08a      	sub	sp, #40	; 0x28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004374:	f107 0314 	add.w	r3, r7, #20
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	605a      	str	r2, [r3, #4]
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	60da      	str	r2, [r3, #12]
 8004382:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <HAL_DAC_MspInit+0x84>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d12b      	bne.n	80043e6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800438e:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <HAL_DAC_MspInit+0x88>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	4a18      	ldr	r2, [pc, #96]	; (80043f4 <HAL_DAC_MspInit+0x88>)
 8004394:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004398:	6413      	str	r3, [r2, #64]	; 0x40
 800439a:	4b16      	ldr	r3, [pc, #88]	; (80043f4 <HAL_DAC_MspInit+0x88>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a6:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <HAL_DAC_MspInit+0x88>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	4a12      	ldr	r2, [pc, #72]	; (80043f4 <HAL_DAC_MspInit+0x88>)
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	6313      	str	r3, [r2, #48]	; 0x30
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <HAL_DAC_MspInit+0x88>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80043be:	2310      	movs	r3, #16
 80043c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043c2:	2303      	movs	r3, #3
 80043c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ca:	f107 0314 	add.w	r3, r7, #20
 80043ce:	4619      	mov	r1, r3
 80043d0:	4809      	ldr	r0, [pc, #36]	; (80043f8 <HAL_DAC_MspInit+0x8c>)
 80043d2:	f001 ffd7 	bl	8006384 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80043d6:	2200      	movs	r2, #0
 80043d8:	2100      	movs	r1, #0
 80043da:	2036      	movs	r0, #54	; 0x36
 80043dc:	f001 fa70 	bl	80058c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80043e0:	2036      	movs	r0, #54	; 0x36
 80043e2:	f001 fa89 	bl	80058f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80043e6:	bf00      	nop
 80043e8:	3728      	adds	r7, #40	; 0x28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40007400 	.word	0x40007400
 80043f4:	40023800 	.word	0x40023800
 80043f8:	40020000 	.word	0x40020000

080043fc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <HAL_DMA2D_MspInit+0x38>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d10b      	bne.n	8004426 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800440e:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <HAL_DMA2D_MspInit+0x3c>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	4a09      	ldr	r2, [pc, #36]	; (8004438 <HAL_DMA2D_MspInit+0x3c>)
 8004414:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004418:	6313      	str	r3, [r2, #48]	; 0x30
 800441a:	4b07      	ldr	r3, [pc, #28]	; (8004438 <HAL_DMA2D_MspInit+0x3c>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	4002b000 	.word	0x4002b000
 8004438:	40023800 	.word	0x40023800

0800443c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08c      	sub	sp, #48	; 0x30
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004444:	f107 031c 	add.w	r3, r7, #28
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	609a      	str	r2, [r3, #8]
 8004450:	60da      	str	r2, [r3, #12]
 8004452:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a2f      	ldr	r2, [pc, #188]	; (8004518 <HAL_I2C_MspInit+0xdc>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d129      	bne.n	80044b2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800445e:	4b2f      	ldr	r3, [pc, #188]	; (800451c <HAL_I2C_MspInit+0xe0>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4a2e      	ldr	r2, [pc, #184]	; (800451c <HAL_I2C_MspInit+0xe0>)
 8004464:	f043 0302 	orr.w	r3, r3, #2
 8004468:	6313      	str	r3, [r2, #48]	; 0x30
 800446a:	4b2c      	ldr	r3, [pc, #176]	; (800451c <HAL_I2C_MspInit+0xe0>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8004476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800447a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800447c:	2312      	movs	r3, #18
 800447e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004480:	2301      	movs	r3, #1
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004484:	2300      	movs	r3, #0
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004488:	2304      	movs	r3, #4
 800448a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448c:	f107 031c 	add.w	r3, r7, #28
 8004490:	4619      	mov	r1, r3
 8004492:	4823      	ldr	r0, [pc, #140]	; (8004520 <HAL_I2C_MspInit+0xe4>)
 8004494:	f001 ff76 	bl	8006384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004498:	4b20      	ldr	r3, [pc, #128]	; (800451c <HAL_I2C_MspInit+0xe0>)
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	4a1f      	ldr	r2, [pc, #124]	; (800451c <HAL_I2C_MspInit+0xe0>)
 800449e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044a2:	6413      	str	r3, [r2, #64]	; 0x40
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HAL_I2C_MspInit+0xe0>)
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80044b0:	e02d      	b.n	800450e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1b      	ldr	r2, [pc, #108]	; (8004524 <HAL_I2C_MspInit+0xe8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d128      	bne.n	800450e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80044bc:	4b17      	ldr	r3, [pc, #92]	; (800451c <HAL_I2C_MspInit+0xe0>)
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	4a16      	ldr	r2, [pc, #88]	; (800451c <HAL_I2C_MspInit+0xe0>)
 80044c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c6:	6313      	str	r3, [r2, #48]	; 0x30
 80044c8:	4b14      	ldr	r3, [pc, #80]	; (800451c <HAL_I2C_MspInit+0xe0>)
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80044d4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80044d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044da:	2312      	movs	r3, #18
 80044dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044de:	2301      	movs	r3, #1
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e2:	2303      	movs	r3, #3
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80044e6:	2304      	movs	r3, #4
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80044ea:	f107 031c 	add.w	r3, r7, #28
 80044ee:	4619      	mov	r1, r3
 80044f0:	480d      	ldr	r0, [pc, #52]	; (8004528 <HAL_I2C_MspInit+0xec>)
 80044f2:	f001 ff47 	bl	8006384 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_I2C_MspInit+0xe0>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	4a08      	ldr	r2, [pc, #32]	; (800451c <HAL_I2C_MspInit+0xe0>)
 80044fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004500:	6413      	str	r3, [r2, #64]	; 0x40
 8004502:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_I2C_MspInit+0xe0>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
}
 800450e:	bf00      	nop
 8004510:	3730      	adds	r7, #48	; 0x30
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40005400 	.word	0x40005400
 800451c:	40023800 	.word	0x40023800
 8004520:	40020400 	.word	0x40020400
 8004524:	40005c00 	.word	0x40005c00
 8004528:	40021c00 	.word	0x40021c00

0800452c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a15      	ldr	r2, [pc, #84]	; (8004590 <HAL_I2C_MspDeInit+0x64>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d110      	bne.n	8004560 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800453e:	4b15      	ldr	r3, [pc, #84]	; (8004594 <HAL_I2C_MspDeInit+0x68>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	4a14      	ldr	r2, [pc, #80]	; (8004594 <HAL_I2C_MspDeInit+0x68>)
 8004544:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004548:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 800454a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800454e:	4812      	ldr	r0, [pc, #72]	; (8004598 <HAL_I2C_MspDeInit+0x6c>)
 8004550:	f002 f8c2 	bl	80066d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8004554:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004558:	480f      	ldr	r0, [pc, #60]	; (8004598 <HAL_I2C_MspDeInit+0x6c>)
 800455a:	f002 f8bd 	bl	80066d8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800455e:	e013      	b.n	8004588 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a0d      	ldr	r2, [pc, #52]	; (800459c <HAL_I2C_MspDeInit+0x70>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d10e      	bne.n	8004588 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <HAL_I2C_MspDeInit+0x68>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	4a09      	ldr	r2, [pc, #36]	; (8004594 <HAL_I2C_MspDeInit+0x68>)
 8004570:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004574:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	4809      	ldr	r0, [pc, #36]	; (80045a0 <HAL_I2C_MspDeInit+0x74>)
 800457a:	f002 f8ad 	bl	80066d8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800457e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004582:	4807      	ldr	r0, [pc, #28]	; (80045a0 <HAL_I2C_MspDeInit+0x74>)
 8004584:	f002 f8a8 	bl	80066d8 <HAL_GPIO_DeInit>
}
 8004588:	bf00      	nop
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40005400 	.word	0x40005400
 8004594:	40023800 	.word	0x40023800
 8004598:	40020400 	.word	0x40020400
 800459c:	40005c00 	.word	0x40005c00
 80045a0:	40021c00 	.word	0x40021c00

080045a4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08e      	sub	sp, #56	; 0x38
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a55      	ldr	r2, [pc, #340]	; (8004718 <HAL_LTDC_MspInit+0x174>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	f040 80a3 	bne.w	800470e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80045c8:	4b54      	ldr	r3, [pc, #336]	; (800471c <HAL_LTDC_MspInit+0x178>)
 80045ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045cc:	4a53      	ldr	r2, [pc, #332]	; (800471c <HAL_LTDC_MspInit+0x178>)
 80045ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045d2:	6453      	str	r3, [r2, #68]	; 0x44
 80045d4:	4b51      	ldr	r3, [pc, #324]	; (800471c <HAL_LTDC_MspInit+0x178>)
 80045d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045dc:	623b      	str	r3, [r7, #32]
 80045de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80045e0:	4b4e      	ldr	r3, [pc, #312]	; (800471c <HAL_LTDC_MspInit+0x178>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	4a4d      	ldr	r2, [pc, #308]	; (800471c <HAL_LTDC_MspInit+0x178>)
 80045e6:	f043 0310 	orr.w	r3, r3, #16
 80045ea:	6313      	str	r3, [r2, #48]	; 0x30
 80045ec:	4b4b      	ldr	r3, [pc, #300]	; (800471c <HAL_LTDC_MspInit+0x178>)
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	61fb      	str	r3, [r7, #28]
 80045f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80045f8:	4b48      	ldr	r3, [pc, #288]	; (800471c <HAL_LTDC_MspInit+0x178>)
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	4a47      	ldr	r2, [pc, #284]	; (800471c <HAL_LTDC_MspInit+0x178>)
 80045fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004602:	6313      	str	r3, [r2, #48]	; 0x30
 8004604:	4b45      	ldr	r3, [pc, #276]	; (800471c <HAL_LTDC_MspInit+0x178>)
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004610:	4b42      	ldr	r3, [pc, #264]	; (800471c <HAL_LTDC_MspInit+0x178>)
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	4a41      	ldr	r2, [pc, #260]	; (800471c <HAL_LTDC_MspInit+0x178>)
 8004616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800461a:	6313      	str	r3, [r2, #48]	; 0x30
 800461c:	4b3f      	ldr	r3, [pc, #252]	; (800471c <HAL_LTDC_MspInit+0x178>)
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004628:	4b3c      	ldr	r3, [pc, #240]	; (800471c <HAL_LTDC_MspInit+0x178>)
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	4a3b      	ldr	r2, [pc, #236]	; (800471c <HAL_LTDC_MspInit+0x178>)
 800462e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004632:	6313      	str	r3, [r2, #48]	; 0x30
 8004634:	4b39      	ldr	r3, [pc, #228]	; (800471c <HAL_LTDC_MspInit+0x178>)
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004640:	4b36      	ldr	r3, [pc, #216]	; (800471c <HAL_LTDC_MspInit+0x178>)
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	4a35      	ldr	r2, [pc, #212]	; (800471c <HAL_LTDC_MspInit+0x178>)
 8004646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800464a:	6313      	str	r3, [r2, #48]	; 0x30
 800464c:	4b33      	ldr	r3, [pc, #204]	; (800471c <HAL_LTDC_MspInit+0x178>)
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004658:	2310      	movs	r3, #16
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465c:	2302      	movs	r3, #2
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004660:	2300      	movs	r3, #0
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004664:	2300      	movs	r3, #0
 8004666:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004668:	230e      	movs	r3, #14
 800466a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800466c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004670:	4619      	mov	r1, r3
 8004672:	482b      	ldr	r0, [pc, #172]	; (8004720 <HAL_LTDC_MspInit+0x17c>)
 8004674:	f001 fe86 	bl	8006384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004678:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467e:	2302      	movs	r3, #2
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004682:	2300      	movs	r3, #0
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004686:	2300      	movs	r3, #0
 8004688:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800468a:	230e      	movs	r3, #14
 800468c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800468e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004692:	4619      	mov	r1, r3
 8004694:	4823      	ldr	r0, [pc, #140]	; (8004724 <HAL_LTDC_MspInit+0x180>)
 8004696:	f001 fe75 	bl	8006384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800469a:	23f7      	movs	r3, #247	; 0xf7
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469e:	2302      	movs	r3, #2
 80046a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a6:	2300      	movs	r3, #0
 80046a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80046aa:	230e      	movs	r3, #14
 80046ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80046ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046b2:	4619      	mov	r1, r3
 80046b4:	481c      	ldr	r0, [pc, #112]	; (8004728 <HAL_LTDC_MspInit+0x184>)
 80046b6:	f001 fe65 	bl	8006384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80046ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c0:	2302      	movs	r3, #2
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c8:	2300      	movs	r3, #0
 80046ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80046cc:	2309      	movs	r3, #9
 80046ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80046d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d4:	4619      	mov	r1, r3
 80046d6:	4815      	ldr	r0, [pc, #84]	; (800472c <HAL_LTDC_MspInit+0x188>)
 80046d8:	f001 fe54 	bl	8006384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80046dc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e2:	2302      	movs	r3, #2
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ea:	2300      	movs	r3, #0
 80046ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80046ee:	230e      	movs	r3, #14
 80046f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80046f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f6:	4619      	mov	r1, r3
 80046f8:	480d      	ldr	r0, [pc, #52]	; (8004730 <HAL_LTDC_MspInit+0x18c>)
 80046fa:	f001 fe43 	bl	8006384 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80046fe:	2200      	movs	r2, #0
 8004700:	2105      	movs	r1, #5
 8004702:	2058      	movs	r0, #88	; 0x58
 8004704:	f001 f8dc 	bl	80058c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004708:	2058      	movs	r0, #88	; 0x58
 800470a:	f001 f8f5 	bl	80058f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800470e:	bf00      	nop
 8004710:	3738      	adds	r7, #56	; 0x38
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40016800 	.word	0x40016800
 800471c:	40023800 	.word	0x40023800
 8004720:	40021000 	.word	0x40021000
 8004724:	40022400 	.word	0x40022400
 8004728:	40022800 	.word	0x40022800
 800472c:	40021800 	.word	0x40021800
 8004730:	40022000 	.word	0x40022000

08004734 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a0a      	ldr	r2, [pc, #40]	; (800476c <HAL_RNG_MspInit+0x38>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d10b      	bne.n	800475e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004746:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <HAL_RNG_MspInit+0x3c>)
 8004748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474a:	4a09      	ldr	r2, [pc, #36]	; (8004770 <HAL_RNG_MspInit+0x3c>)
 800474c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004750:	6353      	str	r3, [r2, #52]	; 0x34
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <HAL_RNG_MspInit+0x3c>)
 8004754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	50060800 	.word	0x50060800
 8004770:	40023800 	.word	0x40023800

08004774 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a07      	ldr	r2, [pc, #28]	; (80047a0 <HAL_RTC_MspInit+0x2c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d105      	bne.n	8004792 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004786:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <HAL_RTC_MspInit+0x30>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478a:	4a06      	ldr	r2, [pc, #24]	; (80047a4 <HAL_RTC_MspInit+0x30>)
 800478c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004790:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40002800 	.word	0x40002800
 80047a4:	40023800 	.word	0x40023800

080047a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	; 0x28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b0:	f107 0314 	add.w	r3, r7, #20
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a2d      	ldr	r2, [pc, #180]	; (800487c <HAL_SPI_MspInit+0xd4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d154      	bne.n	8004874 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80047ca:	4b2d      	ldr	r3, [pc, #180]	; (8004880 <HAL_SPI_MspInit+0xd8>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	4a2c      	ldr	r2, [pc, #176]	; (8004880 <HAL_SPI_MspInit+0xd8>)
 80047d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047d4:	6413      	str	r3, [r2, #64]	; 0x40
 80047d6:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <HAL_SPI_MspInit+0xd8>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80047e2:	4b27      	ldr	r3, [pc, #156]	; (8004880 <HAL_SPI_MspInit+0xd8>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a26      	ldr	r2, [pc, #152]	; (8004880 <HAL_SPI_MspInit+0xd8>)
 80047e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	4b24      	ldr	r3, [pc, #144]	; (8004880 <HAL_SPI_MspInit+0xd8>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047fa:	4b21      	ldr	r3, [pc, #132]	; (8004880 <HAL_SPI_MspInit+0xd8>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	4a20      	ldr	r2, [pc, #128]	; (8004880 <HAL_SPI_MspInit+0xd8>)
 8004800:	f043 0302 	orr.w	r3, r3, #2
 8004804:	6313      	str	r3, [r2, #48]	; 0x30
 8004806:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <HAL_SPI_MspInit+0xd8>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004812:	2302      	movs	r3, #2
 8004814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004816:	2302      	movs	r3, #2
 8004818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800481e:	2300      	movs	r3, #0
 8004820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004822:	2305      	movs	r3, #5
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004826:	f107 0314 	add.w	r3, r7, #20
 800482a:	4619      	mov	r1, r3
 800482c:	4815      	ldr	r0, [pc, #84]	; (8004884 <HAL_SPI_MspInit+0xdc>)
 800482e:	f001 fda9 	bl	8006384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004832:	2301      	movs	r3, #1
 8004834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004836:	2302      	movs	r3, #2
 8004838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800483e:	2303      	movs	r3, #3
 8004840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004842:	2305      	movs	r3, #5
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004846:	f107 0314 	add.w	r3, r7, #20
 800484a:	4619      	mov	r1, r3
 800484c:	480d      	ldr	r0, [pc, #52]	; (8004884 <HAL_SPI_MspInit+0xdc>)
 800484e:	f001 fd99 	bl	8006384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004852:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004858:	2302      	movs	r3, #2
 800485a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485c:	2300      	movs	r3, #0
 800485e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004860:	2303      	movs	r3, #3
 8004862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004864:	2305      	movs	r3, #5
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004868:	f107 0314 	add.w	r3, r7, #20
 800486c:	4619      	mov	r1, r3
 800486e:	4806      	ldr	r0, [pc, #24]	; (8004888 <HAL_SPI_MspInit+0xe0>)
 8004870:	f001 fd88 	bl	8006384 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004874:	bf00      	nop
 8004876:	3728      	adds	r7, #40	; 0x28
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40003800 	.word	0x40003800
 8004880:	40023800 	.word	0x40023800
 8004884:	40022000 	.word	0x40022000
 8004888:	40020400 	.word	0x40020400

0800488c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800488c:	b480      	push	{r7}
 800488e:	b089      	sub	sp, #36	; 0x24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2e      	ldr	r2, [pc, #184]	; (8004954 <HAL_TIM_Base_MspInit+0xc8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d10c      	bne.n	80048b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800489e:	4b2e      	ldr	r3, [pc, #184]	; (8004958 <HAL_TIM_Base_MspInit+0xcc>)
 80048a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a2:	4a2d      	ldr	r2, [pc, #180]	; (8004958 <HAL_TIM_Base_MspInit+0xcc>)
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	6453      	str	r3, [r2, #68]	; 0x44
 80048aa:	4b2b      	ldr	r3, [pc, #172]	; (8004958 <HAL_TIM_Base_MspInit+0xcc>)
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80048b6:	e046      	b.n	8004946 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c0:	d10c      	bne.n	80048dc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048c2:	4b25      	ldr	r3, [pc, #148]	; (8004958 <HAL_TIM_Base_MspInit+0xcc>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	4a24      	ldr	r2, [pc, #144]	; (8004958 <HAL_TIM_Base_MspInit+0xcc>)
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	6413      	str	r3, [r2, #64]	; 0x40
 80048ce:	4b22      	ldr	r3, [pc, #136]	; (8004958 <HAL_TIM_Base_MspInit+0xcc>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	61bb      	str	r3, [r7, #24]
 80048d8:	69bb      	ldr	r3, [r7, #24]
}
 80048da:	e034      	b.n	8004946 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a1e      	ldr	r2, [pc, #120]	; (800495c <HAL_TIM_Base_MspInit+0xd0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d10c      	bne.n	8004900 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048e6:	4b1c      	ldr	r3, [pc, #112]	; (8004958 <HAL_TIM_Base_MspInit+0xcc>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	4a1b      	ldr	r2, [pc, #108]	; (8004958 <HAL_TIM_Base_MspInit+0xcc>)
 80048ec:	f043 0302 	orr.w	r3, r3, #2
 80048f0:	6413      	str	r3, [r2, #64]	; 0x40
 80048f2:	4b19      	ldr	r3, [pc, #100]	; (8004958 <HAL_TIM_Base_MspInit+0xcc>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	697b      	ldr	r3, [r7, #20]
}
 80048fe:	e022      	b.n	8004946 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a16      	ldr	r2, [pc, #88]	; (8004960 <HAL_TIM_Base_MspInit+0xd4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d10c      	bne.n	8004924 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800490a:	4b13      	ldr	r3, [pc, #76]	; (8004958 <HAL_TIM_Base_MspInit+0xcc>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	4a12      	ldr	r2, [pc, #72]	; (8004958 <HAL_TIM_Base_MspInit+0xcc>)
 8004910:	f043 0308 	orr.w	r3, r3, #8
 8004914:	6413      	str	r3, [r2, #64]	; 0x40
 8004916:	4b10      	ldr	r3, [pc, #64]	; (8004958 <HAL_TIM_Base_MspInit+0xcc>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	693b      	ldr	r3, [r7, #16]
}
 8004922:	e010      	b.n	8004946 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a0e      	ldr	r2, [pc, #56]	; (8004964 <HAL_TIM_Base_MspInit+0xd8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d10b      	bne.n	8004946 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800492e:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <HAL_TIM_Base_MspInit+0xcc>)
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	4a09      	ldr	r2, [pc, #36]	; (8004958 <HAL_TIM_Base_MspInit+0xcc>)
 8004934:	f043 0302 	orr.w	r3, r3, #2
 8004938:	6453      	str	r3, [r2, #68]	; 0x44
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <HAL_TIM_Base_MspInit+0xcc>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
}
 8004946:	bf00      	nop
 8004948:	3724      	adds	r7, #36	; 0x24
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000
 8004958:	40023800 	.word	0x40023800
 800495c:	40000400 	.word	0x40000400
 8004960:	40000c00 	.word	0x40000c00
 8004964:	40010400 	.word	0x40010400

08004968 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08a      	sub	sp, #40	; 0x28
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004970:	f107 0314 	add.w	r3, r7, #20
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	609a      	str	r2, [r3, #8]
 800497c:	60da      	str	r2, [r3, #12]
 800497e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a22      	ldr	r2, [pc, #136]	; (8004a10 <HAL_TIM_MspPostInit+0xa8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d11c      	bne.n	80049c4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800498a:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <HAL_TIM_MspPostInit+0xac>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	4a21      	ldr	r2, [pc, #132]	; (8004a14 <HAL_TIM_MspPostInit+0xac>)
 8004990:	f043 0302 	orr.w	r3, r3, #2
 8004994:	6313      	str	r3, [r2, #48]	; 0x30
 8004996:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <HAL_TIM_MspPostInit+0xac>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80049a2:	2310      	movs	r3, #16
 80049a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a6:	2302      	movs	r3, #2
 80049a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ae:	2300      	movs	r3, #0
 80049b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80049b2:	2302      	movs	r3, #2
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b6:	f107 0314 	add.w	r3, r7, #20
 80049ba:	4619      	mov	r1, r3
 80049bc:	4816      	ldr	r0, [pc, #88]	; (8004a18 <HAL_TIM_MspPostInit+0xb0>)
 80049be:	f001 fce1 	bl	8006384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80049c2:	e020      	b.n	8004a06 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a14      	ldr	r2, [pc, #80]	; (8004a1c <HAL_TIM_MspPostInit+0xb4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d11b      	bne.n	8004a06 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80049ce:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <HAL_TIM_MspPostInit+0xac>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	4a10      	ldr	r2, [pc, #64]	; (8004a14 <HAL_TIM_MspPostInit+0xac>)
 80049d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d8:	6313      	str	r3, [r2, #48]	; 0x30
 80049da:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <HAL_TIM_MspPostInit+0xac>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80049e6:	2304      	movs	r3, #4
 80049e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ea:	2302      	movs	r3, #2
 80049ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049f2:	2300      	movs	r3, #0
 80049f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80049f6:	2303      	movs	r3, #3
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80049fa:	f107 0314 	add.w	r3, r7, #20
 80049fe:	4619      	mov	r1, r3
 8004a00:	4807      	ldr	r0, [pc, #28]	; (8004a20 <HAL_TIM_MspPostInit+0xb8>)
 8004a02:	f001 fcbf 	bl	8006384 <HAL_GPIO_Init>
}
 8004a06:	bf00      	nop
 8004a08:	3728      	adds	r7, #40	; 0x28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40023800 	.word	0x40023800
 8004a18:	40020400 	.word	0x40020400
 8004a1c:	40010400 	.word	0x40010400
 8004a20:	40022000 	.word	0x40022000

08004a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08e      	sub	sp, #56	; 0x38
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a57      	ldr	r2, [pc, #348]	; (8004ba0 <HAL_UART_MspInit+0x17c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d130      	bne.n	8004aa8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004a46:	4b57      	ldr	r3, [pc, #348]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	4a56      	ldr	r2, [pc, #344]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004a4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a50:	6413      	str	r3, [r2, #64]	; 0x40
 8004a52:	4b54      	ldr	r3, [pc, #336]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a5a:	623b      	str	r3, [r7, #32]
 8004a5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a5e:	4b51      	ldr	r3, [pc, #324]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	4a50      	ldr	r2, [pc, #320]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004a64:	f043 0320 	orr.w	r3, r3, #32
 8004a68:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6a:	4b4e      	ldr	r3, [pc, #312]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004a76:	23c0      	movs	r3, #192	; 0xc0
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a82:	2303      	movs	r3, #3
 8004a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004a86:	2308      	movs	r3, #8
 8004a88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4845      	ldr	r0, [pc, #276]	; (8004ba8 <HAL_UART_MspInit+0x184>)
 8004a92:	f001 fc77 	bl	8006384 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8004a96:	2200      	movs	r2, #0
 8004a98:	2105      	movs	r1, #5
 8004a9a:	2052      	movs	r0, #82	; 0x52
 8004a9c:	f000 ff10 	bl	80058c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004aa0:	2052      	movs	r0, #82	; 0x52
 8004aa2:	f000 ff29 	bl	80058f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004aa6:	e077      	b.n	8004b98 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a3f      	ldr	r2, [pc, #252]	; (8004bac <HAL_UART_MspInit+0x188>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d145      	bne.n	8004b3e <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ab2:	4b3c      	ldr	r3, [pc, #240]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	4a3b      	ldr	r2, [pc, #236]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004ab8:	f043 0310 	orr.w	r3, r3, #16
 8004abc:	6453      	str	r3, [r2, #68]	; 0x44
 8004abe:	4b39      	ldr	r3, [pc, #228]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	61bb      	str	r3, [r7, #24]
 8004ac8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aca:	4b36      	ldr	r3, [pc, #216]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	4a35      	ldr	r2, [pc, #212]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004ad0:	f043 0302 	orr.w	r3, r3, #2
 8004ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad6:	4b33      	ldr	r3, [pc, #204]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae2:	4b30      	ldr	r3, [pc, #192]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	4a2f      	ldr	r2, [pc, #188]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	6313      	str	r3, [r2, #48]	; 0x30
 8004aee:	4b2d      	ldr	r3, [pc, #180]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004afa:	2380      	movs	r3, #128	; 0x80
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afe:	2302      	movs	r3, #2
 8004b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b06:	2300      	movs	r3, #0
 8004b08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b0a:	2307      	movs	r3, #7
 8004b0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b12:	4619      	mov	r1, r3
 8004b14:	4826      	ldr	r0, [pc, #152]	; (8004bb0 <HAL_UART_MspInit+0x18c>)
 8004b16:	f001 fc35 	bl	8006384 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b20:	2302      	movs	r3, #2
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b2c:	2307      	movs	r3, #7
 8004b2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b34:	4619      	mov	r1, r3
 8004b36:	481f      	ldr	r0, [pc, #124]	; (8004bb4 <HAL_UART_MspInit+0x190>)
 8004b38:	f001 fc24 	bl	8006384 <HAL_GPIO_Init>
}
 8004b3c:	e02c      	b.n	8004b98 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a1d      	ldr	r2, [pc, #116]	; (8004bb8 <HAL_UART_MspInit+0x194>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d127      	bne.n	8004b98 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004b48:	4b16      	ldr	r3, [pc, #88]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4c:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004b4e:	f043 0320 	orr.w	r3, r3, #32
 8004b52:	6453      	str	r3, [r2, #68]	; 0x44
 8004b54:	4b13      	ldr	r3, [pc, #76]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b60:	4b10      	ldr	r3, [pc, #64]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	4a0f      	ldr	r2, [pc, #60]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004b66:	f043 0304 	orr.w	r3, r3, #4
 8004b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <HAL_UART_MspInit+0x180>)
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004b78:	23c0      	movs	r3, #192	; 0xc0
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b84:	2303      	movs	r3, #3
 8004b86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004b88:	2308      	movs	r3, #8
 8004b8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b90:	4619      	mov	r1, r3
 8004b92:	480a      	ldr	r0, [pc, #40]	; (8004bbc <HAL_UART_MspInit+0x198>)
 8004b94:	f001 fbf6 	bl	8006384 <HAL_GPIO_Init>
}
 8004b98:	bf00      	nop
 8004b9a:	3738      	adds	r7, #56	; 0x38
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40007800 	.word	0x40007800
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	40021400 	.word	0x40021400
 8004bac:	40011000 	.word	0x40011000
 8004bb0:	40020400 	.word	0x40020400
 8004bb4:	40020000 	.word	0x40020000
 8004bb8:	40011400 	.word	0x40011400
 8004bbc:	40020800 	.word	0x40020800

08004bc0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004bc6:	1d3b      	adds	r3, r7, #4
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	609a      	str	r2, [r3, #8]
 8004bd0:	60da      	str	r2, [r3, #12]
 8004bd2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004bd4:	4b3a      	ldr	r3, [pc, #232]	; (8004cc0 <HAL_FMC_MspInit+0x100>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d16d      	bne.n	8004cb8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004bdc:	4b38      	ldr	r3, [pc, #224]	; (8004cc0 <HAL_FMC_MspInit+0x100>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004be2:	4b38      	ldr	r3, [pc, #224]	; (8004cc4 <HAL_FMC_MspInit+0x104>)
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	4a37      	ldr	r2, [pc, #220]	; (8004cc4 <HAL_FMC_MspInit+0x104>)
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	6393      	str	r3, [r2, #56]	; 0x38
 8004bee:	4b35      	ldr	r3, [pc, #212]	; (8004cc4 <HAL_FMC_MspInit+0x104>)
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8004bfa:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004bfe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c00:	2302      	movs	r3, #2
 8004c02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004c0c:	230c      	movs	r3, #12
 8004c0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c10:	1d3b      	adds	r3, r7, #4
 8004c12:	4619      	mov	r1, r3
 8004c14:	482c      	ldr	r0, [pc, #176]	; (8004cc8 <HAL_FMC_MspInit+0x108>)
 8004c16:	f001 fbb5 	bl	8006384 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8004c1a:	f248 1333 	movw	r3, #33075	; 0x8133
 8004c1e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c20:	2302      	movs	r3, #2
 8004c22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004c2c:	230c      	movs	r3, #12
 8004c2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004c30:	1d3b      	adds	r3, r7, #4
 8004c32:	4619      	mov	r1, r3
 8004c34:	4825      	ldr	r0, [pc, #148]	; (8004ccc <HAL_FMC_MspInit+0x10c>)
 8004c36:	f001 fba5 	bl	8006384 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8004c3a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004c3e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c40:	2302      	movs	r3, #2
 8004c42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004c4c:	230c      	movs	r3, #12
 8004c4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c50:	1d3b      	adds	r3, r7, #4
 8004c52:	4619      	mov	r1, r3
 8004c54:	481e      	ldr	r0, [pc, #120]	; (8004cd0 <HAL_FMC_MspInit+0x110>)
 8004c56:	f001 fb95 	bl	8006384 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004c5a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004c5e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c60:	2302      	movs	r3, #2
 8004c62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004c6c:	230c      	movs	r3, #12
 8004c6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004c70:	1d3b      	adds	r3, r7, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4817      	ldr	r0, [pc, #92]	; (8004cd4 <HAL_FMC_MspInit+0x114>)
 8004c76:	f001 fb85 	bl	8006384 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8004c7a:	2328      	movs	r3, #40	; 0x28
 8004c7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7e:	2302      	movs	r3, #2
 8004c80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c86:	2303      	movs	r3, #3
 8004c88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004c8a:	230c      	movs	r3, #12
 8004c8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004c8e:	1d3b      	adds	r3, r7, #4
 8004c90:	4619      	mov	r1, r3
 8004c92:	4811      	ldr	r0, [pc, #68]	; (8004cd8 <HAL_FMC_MspInit+0x118>)
 8004c94:	f001 fb76 	bl	8006384 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004c98:	2308      	movs	r3, #8
 8004c9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004ca8:	230c      	movs	r3, #12
 8004caa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cac:	1d3b      	adds	r3, r7, #4
 8004cae:	4619      	mov	r1, r3
 8004cb0:	480a      	ldr	r0, [pc, #40]	; (8004cdc <HAL_FMC_MspInit+0x11c>)
 8004cb2:	f001 fb67 	bl	8006384 <HAL_GPIO_Init>
 8004cb6:	e000      	b.n	8004cba <HAL_FMC_MspInit+0xfa>
    return;
 8004cb8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20000544 	.word	0x20000544
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	40021800 	.word	0x40021800
 8004cd0:	40020c00 	.word	0x40020c00
 8004cd4:	40021400 	.word	0x40021400
 8004cd8:	40021c00 	.word	0x40021c00
 8004cdc:	40020800 	.word	0x40020800

08004ce0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004ce8:	f7ff ff6a 	bl	8004bc0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004cec:	bf00      	nop
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08c      	sub	sp, #48	; 0x30
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004d04:	2200      	movs	r2, #0
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	2036      	movs	r0, #54	; 0x36
 8004d0a:	f000 fdd9 	bl	80058c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004d0e:	2036      	movs	r0, #54	; 0x36
 8004d10:	f000 fdf2 	bl	80058f8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004d14:	4b1f      	ldr	r3, [pc, #124]	; (8004d94 <HAL_InitTick+0xa0>)
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	4a1e      	ldr	r2, [pc, #120]	; (8004d94 <HAL_InitTick+0xa0>)
 8004d1a:	f043 0310 	orr.w	r3, r3, #16
 8004d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8004d20:	4b1c      	ldr	r3, [pc, #112]	; (8004d94 <HAL_InitTick+0xa0>)
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d2c:	f107 0210 	add.w	r2, r7, #16
 8004d30:	f107 0314 	add.w	r3, r7, #20
 8004d34:	4611      	mov	r1, r2
 8004d36:	4618      	mov	r0, r3
 8004d38:	f003 fc08 	bl	800854c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004d3c:	f003 fbde 	bl	80084fc <HAL_RCC_GetPCLK1Freq>
 8004d40:	4603      	mov	r3, r0
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	4a13      	ldr	r2, [pc, #76]	; (8004d98 <HAL_InitTick+0xa4>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	0c9b      	lsrs	r3, r3, #18
 8004d50:	3b01      	subs	r3, #1
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004d54:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <HAL_InitTick+0xa8>)
 8004d56:	4a12      	ldr	r2, [pc, #72]	; (8004da0 <HAL_InitTick+0xac>)
 8004d58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004d5a:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <HAL_InitTick+0xa8>)
 8004d5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d60:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004d62:	4a0e      	ldr	r2, [pc, #56]	; (8004d9c <HAL_InitTick+0xa8>)
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004d68:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <HAL_InitTick+0xa8>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d6e:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <HAL_InitTick+0xa8>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004d74:	4809      	ldr	r0, [pc, #36]	; (8004d9c <HAL_InitTick+0xa8>)
 8004d76:	f004 fd56 	bl	8009826 <HAL_TIM_Base_Init>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d104      	bne.n	8004d8a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004d80:	4806      	ldr	r0, [pc, #24]	; (8004d9c <HAL_InitTick+0xa8>)
 8004d82:	f004 fd7b 	bl	800987c <HAL_TIM_Base_Start_IT>
 8004d86:	4603      	mov	r3, r0
 8004d88:	e000      	b.n	8004d8c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3730      	adds	r7, #48	; 0x30
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40023800 	.word	0x40023800
 8004d98:	431bde83 	.word	0x431bde83
 8004d9c:	20008d90 	.word	0x20008d90
 8004da0:	40001000 	.word	0x40001000

08004da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004da8:	e7fe      	b.n	8004da8 <NMI_Handler+0x4>

08004daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004daa:	b480      	push	{r7}
 8004dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dae:	e7fe      	b.n	8004dae <HardFault_Handler+0x4>

08004db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004db4:	e7fe      	b.n	8004db4 <MemManage_Handler+0x4>

08004db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004db6:	b480      	push	{r7}
 8004db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dba:	e7fe      	b.n	8004dba <BusFault_Handler+0x4>

08004dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dc0:	e7fe      	b.n	8004dc0 <UsageFault_Handler+0x4>

08004dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dc6:	bf00      	nop
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8004dd4:	4803      	ldr	r0, [pc, #12]	; (8004de4 <TIM6_DAC_IRQHandler+0x14>)
 8004dd6:	f000 fdbf 	bl	8005958 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8004dda:	4803      	ldr	r0, [pc, #12]	; (8004de8 <TIM6_DAC_IRQHandler+0x18>)
 8004ddc:	f004 fdad 	bl	800993a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004de0:	bf00      	nop
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20008abc 	.word	0x20008abc
 8004de8:	20008d90 	.word	0x20008d90

08004dec <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004df0:	4802      	ldr	r0, [pc, #8]	; (8004dfc <UART7_IRQHandler+0x10>)
 8004df2:	f005 fe95 	bl	800ab20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004df6:	bf00      	nop
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	2000875c 	.word	0x2000875c

08004e00 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004e04:	4802      	ldr	r0, [pc, #8]	; (8004e10 <LTDC_IRQHandler+0x10>)
 8004e06:	f002 fc23 	bl	8007650 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20008904 	.word	0x20008904

08004e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e1c:	4a14      	ldr	r2, [pc, #80]	; (8004e70 <_sbrk+0x5c>)
 8004e1e:	4b15      	ldr	r3, [pc, #84]	; (8004e74 <_sbrk+0x60>)
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e28:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <_sbrk+0x64>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e30:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <_sbrk+0x64>)
 8004e32:	4a12      	ldr	r2, [pc, #72]	; (8004e7c <_sbrk+0x68>)
 8004e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e36:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <_sbrk+0x64>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d207      	bcs.n	8004e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e44:	f008 ffb4 	bl	800ddb0 <__errno>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	230c      	movs	r3, #12
 8004e4c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e52:	e009      	b.n	8004e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e54:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <_sbrk+0x64>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e5a:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <_sbrk+0x64>)
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4413      	add	r3, r2
 8004e62:	4a05      	ldr	r2, [pc, #20]	; (8004e78 <_sbrk+0x64>)
 8004e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e66:	68fb      	ldr	r3, [r7, #12]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20050000 	.word	0x20050000
 8004e74:	00000400 	.word	0x00000400
 8004e78:	20000548 	.word	0x20000548
 8004e7c:	20008dd8 	.word	0x20008dd8

08004e80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e84:	4b08      	ldr	r3, [pc, #32]	; (8004ea8 <SystemInit+0x28>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8a:	4a07      	ldr	r2, [pc, #28]	; (8004ea8 <SystemInit+0x28>)
 8004e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <SystemInit+0x28>)
 8004e96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e9a:	609a      	str	r2, [r3, #8]
#endif
}
 8004e9c:	bf00      	nop
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	e000ed00 	.word	0xe000ed00

08004eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ee4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004eb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004eb2:	e003      	b.n	8004ebc <LoopCopyDataInit>

08004eb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004eb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004eb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004eb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004eba:	3104      	adds	r1, #4

08004ebc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ebc:	480b      	ldr	r0, [pc, #44]	; (8004eec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004ebe:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ec0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ec2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ec4:	d3f6      	bcc.n	8004eb4 <CopyDataInit>
  ldr  r2, =_sbss
 8004ec6:	4a0b      	ldr	r2, [pc, #44]	; (8004ef4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004ec8:	e002      	b.n	8004ed0 <LoopFillZerobss>

08004eca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004eca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ecc:	f842 3b04 	str.w	r3, [r2], #4

08004ed0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ed0:	4b09      	ldr	r3, [pc, #36]	; (8004ef8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004ed2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ed4:	d3f9      	bcc.n	8004eca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ed6:	f7ff ffd3 	bl	8004e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004eda:	f008 ff6f 	bl	800ddbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ede:	f7fc f81d 	bl	8000f1c <main>
  bx  lr    
 8004ee2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ee4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004ee8:	08010710 	.word	0x08010710
  ldr  r0, =_sdata
 8004eec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ef0:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8004ef4:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8004ef8:	20008dd8 	.word	0x20008dd8

08004efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004efc:	e7fe      	b.n	8004efc <ADC_IRQHandler>

08004efe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f02:	2003      	movs	r0, #3
 8004f04:	f000 fcd1 	bl	80058aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f08:	2000      	movs	r0, #0
 8004f0a:	f7ff fef3 	bl	8004cf4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004f0e:	f7ff f997 	bl	8004240 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f1c:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <HAL_IncTick+0x20>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_IncTick+0x24>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4413      	add	r3, r2
 8004f28:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <HAL_IncTick+0x24>)
 8004f2a:	6013      	str	r3, [r2, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20000044 	.word	0x20000044
 8004f3c:	20008dd0 	.word	0x20008dd0

08004f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  return uwTick;
 8004f44:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <HAL_GetTick+0x14>)
 8004f46:	681b      	ldr	r3, [r3, #0]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20008dd0 	.word	0x20008dd0

08004f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f60:	f7ff ffee 	bl	8004f40 <HAL_GetTick>
 8004f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d005      	beq.n	8004f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f72:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <HAL_Delay+0x40>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f7e:	bf00      	nop
 8004f80:	f7ff ffde 	bl	8004f40 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d8f7      	bhi.n	8004f80 <HAL_Delay+0x28>
  {
  }
}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	20000044 	.word	0x20000044

08004f9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e031      	b.n	8005016 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff f968 	bl	8004290 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d116      	bne.n	8005008 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fde:	4b10      	ldr	r3, [pc, #64]	; (8005020 <HAL_ADC_Init+0x84>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	f043 0202 	orr.w	r2, r3, #2
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fab6 	bl	800555c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	f043 0201 	orr.w	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	641a      	str	r2, [r3, #64]	; 0x40
 8005006:	e001      	b.n	800500c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	ffffeefd 	.word	0xffffeefd

08005024 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_ADC_Start+0x1a>
 800503a:	2302      	movs	r3, #2
 800503c:	e0a0      	b.n	8005180 <HAL_ADC_Start+0x15c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b01      	cmp	r3, #1
 8005052:	d018      	beq.n	8005086 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005064:	4b49      	ldr	r3, [pc, #292]	; (800518c <HAL_ADC_Start+0x168>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a49      	ldr	r2, [pc, #292]	; (8005190 <HAL_ADC_Start+0x16c>)
 800506a:	fba2 2303 	umull	r2, r3, r2, r3
 800506e:	0c9a      	lsrs	r2, r3, #18
 8005070:	4613      	mov	r3, r2
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	4413      	add	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005078:	e002      	b.n	8005080 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3b01      	subs	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f9      	bne.n	800507a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b01      	cmp	r3, #1
 8005092:	d174      	bne.n	800517e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005098:	4b3e      	ldr	r3, [pc, #248]	; (8005194 <HAL_ADC_Start+0x170>)
 800509a:	4013      	ands	r3, r2
 800509c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ce:	d106      	bne.n	80050de <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d4:	f023 0206 	bic.w	r2, r3, #6
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	645a      	str	r2, [r3, #68]	; 0x44
 80050dc:	e002      	b.n	80050e4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80050f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80050f6:	4b28      	ldr	r3, [pc, #160]	; (8005198 <HAL_ADC_Start+0x174>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10f      	bne.n	8005122 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d136      	bne.n	800517e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800511e:	609a      	str	r2, [r3, #8]
 8005120:	e02d      	b.n	800517e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a1d      	ldr	r2, [pc, #116]	; (800519c <HAL_ADC_Start+0x178>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d10e      	bne.n	800514a <HAL_ADC_Start+0x126>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d107      	bne.n	800514a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005148:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800514a:	4b13      	ldr	r3, [pc, #76]	; (8005198 <HAL_ADC_Start+0x174>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b00      	cmp	r3, #0
 8005154:	d113      	bne.n	800517e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <HAL_ADC_Start+0x17c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10e      	bne.n	800517e <HAL_ADC_Start+0x15a>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d107      	bne.n	800517e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800517c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	2000003c 	.word	0x2000003c
 8005190:	431bde83 	.word	0x431bde83
 8005194:	fffff8fe 	.word	0xfffff8fe
 8005198:	40012300 	.word	0x40012300
 800519c:	40012000 	.word	0x40012000
 80051a0:	40012200 	.word	0x40012200

080051a4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c0:	d113      	bne.n	80051ea <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80051cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d0:	d10b      	bne.n	80051ea <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	f043 0220 	orr.w	r2, r3, #32
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e05c      	b.n	80052a4 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80051ea:	f7ff fea9 	bl	8004f40 <HAL_GetTick>
 80051ee:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80051f0:	e01a      	b.n	8005228 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f8:	d016      	beq.n	8005228 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <HAL_ADC_PollForConversion+0x6c>
 8005200:	f7ff fe9e 	bl	8004f40 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d20b      	bcs.n	8005228 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	f043 0204 	orr.w	r2, r3, #4
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e03d      	b.n	80052a4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b02      	cmp	r3, #2
 8005234:	d1dd      	bne.n	80051f2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f06f 0212 	mvn.w	r2, #18
 800523e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d123      	bne.n	80052a2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800525e:	2b00      	cmp	r3, #0
 8005260:	d11f      	bne.n	80052a2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800526c:	2b00      	cmp	r3, #0
 800526e:	d006      	beq.n	800527e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800527a:	2b00      	cmp	r3, #0
 800527c:	d111      	bne.n	80052a2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d105      	bne.n	80052a2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f043 0201 	orr.w	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
	...

080052c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_ADC_ConfigChannel+0x1c>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e12a      	b.n	800553a <HAL_ADC_ConfigChannel+0x272>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b09      	cmp	r3, #9
 80052f2:	d93a      	bls.n	800536a <HAL_ADC_ConfigChannel+0xa2>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052fc:	d035      	beq.n	800536a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68d9      	ldr	r1, [r3, #12]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	4613      	mov	r3, r2
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	4413      	add	r3, r2
 8005312:	3b1e      	subs	r3, #30
 8005314:	2207      	movs	r2, #7
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	43da      	mvns	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	400a      	ands	r2, r1
 8005322:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a87      	ldr	r2, [pc, #540]	; (8005548 <HAL_ADC_ConfigChannel+0x280>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d10a      	bne.n	8005344 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68d9      	ldr	r1, [r3, #12]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	061a      	lsls	r2, r3, #24
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005342:	e035      	b.n	80053b0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68d9      	ldr	r1, [r3, #12]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	4618      	mov	r0, r3
 8005356:	4603      	mov	r3, r0
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	4403      	add	r3, r0
 800535c:	3b1e      	subs	r3, #30
 800535e:	409a      	lsls	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005368:	e022      	b.n	80053b0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6919      	ldr	r1, [r3, #16]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	4613      	mov	r3, r2
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	4413      	add	r3, r2
 800537e:	2207      	movs	r2, #7
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	43da      	mvns	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	400a      	ands	r2, r1
 800538c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6919      	ldr	r1, [r3, #16]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	4618      	mov	r0, r3
 80053a0:	4603      	mov	r3, r0
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	4403      	add	r3, r0
 80053a6:	409a      	lsls	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b06      	cmp	r3, #6
 80053b6:	d824      	bhi.n	8005402 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	3b05      	subs	r3, #5
 80053ca:	221f      	movs	r2, #31
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	43da      	mvns	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	400a      	ands	r2, r1
 80053d8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	4618      	mov	r0, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	3b05      	subs	r3, #5
 80053f4:	fa00 f203 	lsl.w	r2, r0, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	635a      	str	r2, [r3, #52]	; 0x34
 8005400:	e04c      	b.n	800549c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b0c      	cmp	r3, #12
 8005408:	d824      	bhi.n	8005454 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	3b23      	subs	r3, #35	; 0x23
 800541c:	221f      	movs	r2, #31
 800541e:	fa02 f303 	lsl.w	r3, r2, r3
 8005422:	43da      	mvns	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	400a      	ands	r2, r1
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	b29b      	uxth	r3, r3
 8005438:	4618      	mov	r0, r3
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	3b23      	subs	r3, #35	; 0x23
 8005446:	fa00 f203 	lsl.w	r2, r0, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
 8005452:	e023      	b.n	800549c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	3b41      	subs	r3, #65	; 0x41
 8005466:	221f      	movs	r2, #31
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	43da      	mvns	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	400a      	ands	r2, r1
 8005474:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	b29b      	uxth	r3, r3
 8005482:	4618      	mov	r0, r3
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	3b41      	subs	r3, #65	; 0x41
 8005490:	fa00 f203 	lsl.w	r2, r0, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a2a      	ldr	r2, [pc, #168]	; (800554c <HAL_ADC_ConfigChannel+0x284>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d10a      	bne.n	80054bc <HAL_ADC_ConfigChannel+0x1f4>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ae:	d105      	bne.n	80054bc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80054b0:	4b27      	ldr	r3, [pc, #156]	; (8005550 <HAL_ADC_ConfigChannel+0x288>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	4a26      	ldr	r2, [pc, #152]	; (8005550 <HAL_ADC_ConfigChannel+0x288>)
 80054b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80054ba:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a22      	ldr	r2, [pc, #136]	; (800554c <HAL_ADC_ConfigChannel+0x284>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d109      	bne.n	80054da <HAL_ADC_ConfigChannel+0x212>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b12      	cmp	r3, #18
 80054cc:	d105      	bne.n	80054da <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80054ce:	4b20      	ldr	r3, [pc, #128]	; (8005550 <HAL_ADC_ConfigChannel+0x288>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	4a1f      	ldr	r2, [pc, #124]	; (8005550 <HAL_ADC_ConfigChannel+0x288>)
 80054d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1b      	ldr	r2, [pc, #108]	; (800554c <HAL_ADC_ConfigChannel+0x284>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d125      	bne.n	8005530 <HAL_ADC_ConfigChannel+0x268>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a17      	ldr	r2, [pc, #92]	; (8005548 <HAL_ADC_ConfigChannel+0x280>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d003      	beq.n	80054f6 <HAL_ADC_ConfigChannel+0x22e>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b11      	cmp	r3, #17
 80054f4:	d11c      	bne.n	8005530 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80054f6:	4b16      	ldr	r3, [pc, #88]	; (8005550 <HAL_ADC_ConfigChannel+0x288>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	4a15      	ldr	r2, [pc, #84]	; (8005550 <HAL_ADC_ConfigChannel+0x288>)
 80054fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005500:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a10      	ldr	r2, [pc, #64]	; (8005548 <HAL_ADC_ConfigChannel+0x280>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d111      	bne.n	8005530 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800550c:	4b11      	ldr	r3, [pc, #68]	; (8005554 <HAL_ADC_ConfigChannel+0x28c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a11      	ldr	r2, [pc, #68]	; (8005558 <HAL_ADC_ConfigChannel+0x290>)
 8005512:	fba2 2303 	umull	r2, r3, r2, r3
 8005516:	0c9a      	lsrs	r2, r3, #18
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005522:	e002      	b.n	800552a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3b01      	subs	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f9      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	10000012 	.word	0x10000012
 800554c:	40012000 	.word	0x40012000
 8005550:	40012300 	.word	0x40012300
 8005554:	2000003c 	.word	0x2000003c
 8005558:	431bde83 	.word	0x431bde83

0800555c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005564:	4b78      	ldr	r3, [pc, #480]	; (8005748 <ADC_Init+0x1ec>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4a77      	ldr	r2, [pc, #476]	; (8005748 <ADC_Init+0x1ec>)
 800556a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800556e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005570:	4b75      	ldr	r3, [pc, #468]	; (8005748 <ADC_Init+0x1ec>)
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	4973      	ldr	r1, [pc, #460]	; (8005748 <ADC_Init+0x1ec>)
 800557a:	4313      	orrs	r3, r2
 800557c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800558c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6859      	ldr	r1, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	021a      	lsls	r2, r3, #8
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80055b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6859      	ldr	r1, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6899      	ldr	r1, [r3, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	4a58      	ldr	r2, [pc, #352]	; (800574c <ADC_Init+0x1f0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d022      	beq.n	8005636 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6899      	ldr	r1, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6899      	ldr	r1, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	609a      	str	r2, [r3, #8]
 8005634:	e00f      	b.n	8005656 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005654:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0202 	bic.w	r2, r2, #2
 8005664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6899      	ldr	r1, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	005a      	lsls	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01b      	beq.n	80056bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005692:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80056a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6859      	ldr	r1, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	3b01      	subs	r3, #1
 80056b0:	035a      	lsls	r2, r3, #13
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	605a      	str	r2, [r3, #4]
 80056ba:	e007      	b.n	80056cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80056da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	051a      	lsls	r2, r3, #20
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6899      	ldr	r1, [r3, #8]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800570e:	025a      	lsls	r2, r3, #9
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6899      	ldr	r1, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	029a      	lsls	r2, r3, #10
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	609a      	str	r2, [r3, #8]
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	40012300 	.word	0x40012300
 800574c:	0f000001 	.word	0x0f000001

08005750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <__NVIC_SetPriorityGrouping+0x40>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800576c:	4013      	ands	r3, r2
 800576e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005778:	4b06      	ldr	r3, [pc, #24]	; (8005794 <__NVIC_SetPriorityGrouping+0x44>)
 800577a:	4313      	orrs	r3, r2
 800577c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800577e:	4a04      	ldr	r2, [pc, #16]	; (8005790 <__NVIC_SetPriorityGrouping+0x40>)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	60d3      	str	r3, [r2, #12]
}
 8005784:	bf00      	nop
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	e000ed00 	.word	0xe000ed00
 8005794:	05fa0000 	.word	0x05fa0000

08005798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800579c:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <__NVIC_GetPriorityGrouping+0x18>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	0a1b      	lsrs	r3, r3, #8
 80057a2:	f003 0307 	and.w	r3, r3, #7
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	e000ed00 	.word	0xe000ed00

080057b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	4603      	mov	r3, r0
 80057bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	db0b      	blt.n	80057de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057c6:	79fb      	ldrb	r3, [r7, #7]
 80057c8:	f003 021f 	and.w	r2, r3, #31
 80057cc:	4907      	ldr	r1, [pc, #28]	; (80057ec <__NVIC_EnableIRQ+0x38>)
 80057ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	2001      	movs	r0, #1
 80057d6:	fa00 f202 	lsl.w	r2, r0, r2
 80057da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	e000e100 	.word	0xe000e100

080057f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	6039      	str	r1, [r7, #0]
 80057fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005800:	2b00      	cmp	r3, #0
 8005802:	db0a      	blt.n	800581a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	b2da      	uxtb	r2, r3
 8005808:	490c      	ldr	r1, [pc, #48]	; (800583c <__NVIC_SetPriority+0x4c>)
 800580a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580e:	0112      	lsls	r2, r2, #4
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	440b      	add	r3, r1
 8005814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005818:	e00a      	b.n	8005830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	b2da      	uxtb	r2, r3
 800581e:	4908      	ldr	r1, [pc, #32]	; (8005840 <__NVIC_SetPriority+0x50>)
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	3b04      	subs	r3, #4
 8005828:	0112      	lsls	r2, r2, #4
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	440b      	add	r3, r1
 800582e:	761a      	strb	r2, [r3, #24]
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	e000e100 	.word	0xe000e100
 8005840:	e000ed00 	.word	0xe000ed00

08005844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005844:	b480      	push	{r7}
 8005846:	b089      	sub	sp, #36	; 0x24
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f1c3 0307 	rsb	r3, r3, #7
 800585e:	2b04      	cmp	r3, #4
 8005860:	bf28      	it	cs
 8005862:	2304      	movcs	r3, #4
 8005864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	3304      	adds	r3, #4
 800586a:	2b06      	cmp	r3, #6
 800586c:	d902      	bls.n	8005874 <NVIC_EncodePriority+0x30>
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	3b03      	subs	r3, #3
 8005872:	e000      	b.n	8005876 <NVIC_EncodePriority+0x32>
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005878:	f04f 32ff 	mov.w	r2, #4294967295
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	43da      	mvns	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	401a      	ands	r2, r3
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800588c:	f04f 31ff 	mov.w	r1, #4294967295
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	fa01 f303 	lsl.w	r3, r1, r3
 8005896:	43d9      	mvns	r1, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800589c:	4313      	orrs	r3, r2
         );
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3724      	adds	r7, #36	; 0x24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff ff4c 	bl	8005750 <__NVIC_SetPriorityGrouping>
}
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80058ce:	2300      	movs	r3, #0
 80058d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058d2:	f7ff ff61 	bl	8005798 <__NVIC_GetPriorityGrouping>
 80058d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	68b9      	ldr	r1, [r7, #8]
 80058dc:	6978      	ldr	r0, [r7, #20]
 80058de:	f7ff ffb1 	bl	8005844 <NVIC_EncodePriority>
 80058e2:	4602      	mov	r2, r0
 80058e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058e8:	4611      	mov	r1, r2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff ff80 	bl	80057f0 <__NVIC_SetPriority>
}
 80058f0:	bf00      	nop
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	4603      	mov	r3, r0
 8005900:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff ff54 	bl	80057b4 <__NVIC_EnableIRQ>
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e014      	b.n	8005950 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	791b      	ldrb	r3, [r3, #4]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d105      	bne.n	800593c <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fe fd18 	bl	800436c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800596a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800596e:	d118      	bne.n	80059a2 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2204      	movs	r2, #4
 8005974:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f043 0201 	orr.w	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800598a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800599a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f825 	bl	80059ec <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059b0:	d118      	bne.n	80059e4 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2204      	movs	r2, #4
 80059b6:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f043 0202 	orr.w	r2, r3, #2
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80059cc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80059dc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f85b 	bl	8005a9a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80059e4:	bf00      	nop
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	2300      	movs	r3, #0
 8005a12:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	795b      	ldrb	r3, [r3, #5]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d101      	bne.n	8005a20 <HAL_DAC_ConfigChannel+0x20>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e036      	b.n	8005a8e <HAL_DAC_ConfigChannel+0x8e>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2202      	movs	r2, #2
 8005a2a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005a34:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4013      	ands	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6819      	ldr	r1, [r3, #0]
 8005a6e:	22c0      	movs	r2, #192	; 0xc0
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	43da      	mvns	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	400a      	ands	r2, r1
 8005a7e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
	...

08005ab0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005abc:	f7ff fa40 	bl	8004f40 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e099      	b.n	8005c00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0201 	bic.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005aec:	e00f      	b.n	8005b0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005aee:	f7ff fa27 	bl	8004f40 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b05      	cmp	r3, #5
 8005afa:	d908      	bls.n	8005b0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2203      	movs	r2, #3
 8005b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e078      	b.n	8005c00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e8      	bne.n	8005aee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4b38      	ldr	r3, [pc, #224]	; (8005c08 <HAL_DMA_Init+0x158>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d107      	bne.n	8005b78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	4313      	orrs	r3, r2
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f023 0307 	bic.w	r3, r3, #7
 8005b8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d117      	bne.n	8005bd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00e      	beq.n	8005bd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f8df 	bl	8005d78 <DMA_CheckFifoParam>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2240      	movs	r2, #64	; 0x40
 8005bc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e016      	b.n	8005c00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f896 	bl	8005d0c <DMA_CalcBaseAndBitshift>
 8005be0:	4603      	mov	r3, r0
 8005be2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be8:	223f      	movs	r2, #63	; 0x3f
 8005bea:	409a      	lsls	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	f010803f 	.word	0xf010803f

08005c0c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e050      	b.n	8005cc0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d101      	bne.n	8005c2e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e048      	b.n	8005cc0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0201 	bic.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2200      	movs	r2, #0
 8005c54:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2200      	movs	r2, #0
 8005c64:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2221      	movs	r2, #33	; 0x21
 8005c6c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f84c 	bl	8005d0c <DMA_CalcBaseAndBitshift>
 8005c74:	4603      	mov	r3, r0
 8005c76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7c:	223f      	movs	r2, #63	; 0x3f
 8005c7e:	409a      	lsls	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d004      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2280      	movs	r2, #128	; 0x80
 8005ce0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e00c      	b.n	8005d00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2205      	movs	r2, #5
 8005cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	3b10      	subs	r3, #16
 8005d1c:	4a13      	ldr	r2, [pc, #76]	; (8005d6c <DMA_CalcBaseAndBitshift+0x60>)
 8005d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d22:	091b      	lsrs	r3, r3, #4
 8005d24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d26:	4a12      	ldr	r2, [pc, #72]	; (8005d70 <DMA_CalcBaseAndBitshift+0x64>)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d908      	bls.n	8005d4c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <DMA_CalcBaseAndBitshift+0x68>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	1d1a      	adds	r2, r3, #4
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	659a      	str	r2, [r3, #88]	; 0x58
 8005d4a:	e006      	b.n	8005d5a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	4b08      	ldr	r3, [pc, #32]	; (8005d74 <DMA_CalcBaseAndBitshift+0x68>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	aaaaaaab 	.word	0xaaaaaaab
 8005d70:	080106c4 	.word	0x080106c4
 8005d74:	fffffc00 	.word	0xfffffc00

08005d78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d11f      	bne.n	8005dd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d855      	bhi.n	8005e44 <DMA_CheckFifoParam+0xcc>
 8005d98:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <DMA_CheckFifoParam+0x28>)
 8005d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9e:	bf00      	nop
 8005da0:	08005db1 	.word	0x08005db1
 8005da4:	08005dc3 	.word	0x08005dc3
 8005da8:	08005db1 	.word	0x08005db1
 8005dac:	08005e45 	.word	0x08005e45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d045      	beq.n	8005e48 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dc0:	e042      	b.n	8005e48 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005dca:	d13f      	bne.n	8005e4c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dd0:	e03c      	b.n	8005e4c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dda:	d121      	bne.n	8005e20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d836      	bhi.n	8005e50 <DMA_CheckFifoParam+0xd8>
 8005de2:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <DMA_CheckFifoParam+0x70>)
 8005de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de8:	08005df9 	.word	0x08005df9
 8005dec:	08005dff 	.word	0x08005dff
 8005df0:	08005df9 	.word	0x08005df9
 8005df4:	08005e11 	.word	0x08005e11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005dfc:	e02f      	b.n	8005e5e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d024      	beq.n	8005e54 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e0e:	e021      	b.n	8005e54 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e18:	d11e      	bne.n	8005e58 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e1e:	e01b      	b.n	8005e58 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d902      	bls.n	8005e2c <DMA_CheckFifoParam+0xb4>
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d003      	beq.n	8005e32 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e2a:	e018      	b.n	8005e5e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e30:	e015      	b.n	8005e5e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00e      	beq.n	8005e5c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
      break;
 8005e42:	e00b      	b.n	8005e5c <DMA_CheckFifoParam+0xe4>
      break;
 8005e44:	bf00      	nop
 8005e46:	e00a      	b.n	8005e5e <DMA_CheckFifoParam+0xe6>
      break;
 8005e48:	bf00      	nop
 8005e4a:	e008      	b.n	8005e5e <DMA_CheckFifoParam+0xe6>
      break;
 8005e4c:	bf00      	nop
 8005e4e:	e006      	b.n	8005e5e <DMA_CheckFifoParam+0xe6>
      break;
 8005e50:	bf00      	nop
 8005e52:	e004      	b.n	8005e5e <DMA_CheckFifoParam+0xe6>
      break;
 8005e54:	bf00      	nop
 8005e56:	e002      	b.n	8005e5e <DMA_CheckFifoParam+0xe6>
      break;   
 8005e58:	bf00      	nop
 8005e5a:	e000      	b.n	8005e5e <DMA_CheckFifoParam+0xe6>
      break;
 8005e5c:	bf00      	nop
    }
  } 
  
  return status; 
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e039      	b.n	8005ef2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fe fab2 	bl	80043fc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebc:	f023 0107 	bic.w	r1, r3, #7
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <HAL_DMA2D_Init+0x90>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	68d1      	ldr	r1, [r2, #12]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6812      	ldr	r2, [r2, #0]
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	ffffc000 	.word	0xffffc000

08005f00 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_DMA2D_Start+0x1c>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e018      	b.n	8005f4e <HAL_DMA2D_Start+0x4e>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f988 	bl	800624c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b086      	sub	sp, #24
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d056      	beq.n	8006020 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005f72:	f7fe ffe5 	bl	8004f40 <HAL_GetTick>
 8005f76:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005f78:	e04b      	b.n	8006012 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d023      	beq.n	8005fd4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9a:	f043 0202 	orr.w	r2, r3, #2
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb0:	f043 0201 	orr.w	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2221      	movs	r2, #33	; 0x21
 8005fbe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2204      	movs	r2, #4
 8005fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0a5      	b.n	8006120 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fda:	d01a      	beq.n	8006012 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005fdc:	f7fe ffb0 	bl	8004f40 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d302      	bcc.n	8005ff2 <HAL_DMA2D_PollForTransfer+0x9c>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10f      	bne.n	8006012 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff6:	f043 0220 	orr.w	r2, r3, #32
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2203      	movs	r2, #3
 8006002:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e086      	b.n	8006120 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0ac      	beq.n	8005f7a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d061      	beq.n	8006106 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006042:	f7fe ff7d 	bl	8004f40 <HAL_GetTick>
 8006046:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006048:	e056      	b.n	80060f8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006058:	2b00      	cmp	r3, #0
 800605a:	d02e      	beq.n	80060ba <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d005      	beq.n	8006072 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606a:	f043 0204 	orr.w	r2, r3, #4
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f003 0320 	and.w	r3, r3, #32
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006080:	f043 0202 	orr.w	r2, r3, #2
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006096:	f043 0201 	orr.w	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2229      	movs	r2, #41	; 0x29
 80060a4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2204      	movs	r2, #4
 80060aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e032      	b.n	8006120 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d01a      	beq.n	80060f8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80060c2:	f7fe ff3d 	bl	8004f40 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d302      	bcc.n	80060d8 <HAL_DMA2D_PollForTransfer+0x182>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10f      	bne.n	80060f8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060dc:	f043 0220 	orr.w	r2, r3, #32
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2203      	movs	r2, #3
 80060e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e013      	b.n	8006120 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0a1      	beq.n	800604a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2212      	movs	r2, #18
 800610c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_DMA2D_ConfigLayer+0x20>
 8006144:	2302      	movs	r3, #2
 8006146:	e079      	b.n	800623c <HAL_DMA2D_ConfigLayer+0x114>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	3318      	adds	r3, #24
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4413      	add	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	041b      	lsls	r3, r3, #16
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006172:	4b35      	ldr	r3, [pc, #212]	; (8006248 <HAL_DMA2D_ConfigLayer+0x120>)
 8006174:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b0a      	cmp	r3, #10
 800617c:	d003      	beq.n	8006186 <HAL_DMA2D_ConfigLayer+0x5e>
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b09      	cmp	r3, #9
 8006184:	d107      	bne.n	8006196 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	617b      	str	r3, [r7, #20]
 8006194:	e005      	b.n	80061a2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	061b      	lsls	r3, r3, #24
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d120      	bne.n	80061ea <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	43db      	mvns	r3, r3
 80061b2:	ea02 0103 	and.w	r1, r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	430a      	orrs	r2, r1
 80061be:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b0a      	cmp	r3, #10
 80061d0:	d003      	beq.n	80061da <HAL_DMA2D_ConfigLayer+0xb2>
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b09      	cmp	r3, #9
 80061d8:	d127      	bne.n	800622a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80061e6:	629a      	str	r2, [r3, #40]	; 0x28
 80061e8:	e01f      	b.n	800622a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	43db      	mvns	r3, r3
 80061f4:	ea02 0103 	and.w	r1, r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	430a      	orrs	r2, r1
 8006200:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2b0a      	cmp	r3, #10
 8006212:	d003      	beq.n	800621c <HAL_DMA2D_ConfigLayer+0xf4>
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b09      	cmp	r3, #9
 800621a:	d106      	bne.n	800622a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	68da      	ldr	r2, [r3, #12]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006228:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	371c      	adds	r7, #28
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	ff03000f 	.word	0xff03000f

0800624c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800624c:	b480      	push	{r7}
 800624e:	b08b      	sub	sp, #44	; 0x2c
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006260:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	041a      	lsls	r2, r3, #16
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	431a      	orrs	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006284:	d174      	bne.n	8006370 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800628c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006294:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800629c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d108      	bne.n	80062be <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	431a      	orrs	r2, r3
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
 80062bc:	e053      	b.n	8006366 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d106      	bne.n	80062d4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
 80062d2:	e048      	b.n	8006366 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d111      	bne.n	8006300 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	0cdb      	lsrs	r3, r3, #19
 80062e0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	0a9b      	lsrs	r3, r3, #10
 80062e6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	08db      	lsrs	r3, r3, #3
 80062ec:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	02db      	lsls	r3, r3, #11
 80062f6:	4313      	orrs	r3, r2
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
 80062fe:	e032      	b.n	8006366 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	2b03      	cmp	r3, #3
 8006306:	d117      	bne.n	8006338 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	0fdb      	lsrs	r3, r3, #31
 800630c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	0cdb      	lsrs	r3, r3, #19
 8006312:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	0adb      	lsrs	r3, r3, #11
 8006318:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	08db      	lsrs	r3, r3, #3
 800631e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	029b      	lsls	r3, r3, #10
 8006328:	431a      	orrs	r2, r3
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	03db      	lsls	r3, r3, #15
 800632e:	4313      	orrs	r3, r2
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	627b      	str	r3, [r7, #36]	; 0x24
 8006336:	e016      	b.n	8006366 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	0f1b      	lsrs	r3, r3, #28
 800633c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	0d1b      	lsrs	r3, r3, #20
 8006342:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	0b1b      	lsrs	r3, r3, #12
 8006348:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	091b      	lsrs	r3, r3, #4
 800634e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	011a      	lsls	r2, r3, #4
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	021b      	lsls	r3, r3, #8
 8006358:	431a      	orrs	r2, r3
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	031b      	lsls	r3, r3, #12
 800635e:	4313      	orrs	r3, r2
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	4313      	orrs	r3, r2
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800636e:	e003      	b.n	8006378 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	60da      	str	r2, [r3, #12]
}
 8006378:	bf00      	nop
 800637a:	372c      	adds	r7, #44	; 0x2c
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006384:	b480      	push	{r7}
 8006386:	b089      	sub	sp, #36	; 0x24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800638e:	2300      	movs	r3, #0
 8006390:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006396:	2300      	movs	r3, #0
 8006398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800639a:	2300      	movs	r3, #0
 800639c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800639e:	2300      	movs	r3, #0
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	e175      	b.n	8006690 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80063a4:	2201      	movs	r2, #1
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4013      	ands	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	429a      	cmp	r2, r3
 80063be:	f040 8164 	bne.w	800668a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d00b      	beq.n	80063e2 <HAL_GPIO_Init+0x5e>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d007      	beq.n	80063e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80063d6:	2b11      	cmp	r3, #17
 80063d8:	d003      	beq.n	80063e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	2b12      	cmp	r3, #18
 80063e0:	d130      	bne.n	8006444 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	2203      	movs	r2, #3
 80063ee:	fa02 f303 	lsl.w	r3, r2, r3
 80063f2:	43db      	mvns	r3, r3
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	4013      	ands	r3, r2
 80063f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	fa02 f303 	lsl.w	r3, r2, r3
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	4313      	orrs	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006418:	2201      	movs	r2, #1
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	fa02 f303 	lsl.w	r3, r2, r3
 8006420:	43db      	mvns	r3, r3
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	4013      	ands	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	091b      	lsrs	r3, r3, #4
 800642e:	f003 0201 	and.w	r2, r3, #1
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	4313      	orrs	r3, r2
 800643c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	2203      	movs	r2, #3
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	43db      	mvns	r3, r3
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	4013      	ands	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	4313      	orrs	r3, r2
 800646c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2b02      	cmp	r3, #2
 800647a:	d003      	beq.n	8006484 <HAL_GPIO_Init+0x100>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b12      	cmp	r3, #18
 8006482:	d123      	bne.n	80064cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	08da      	lsrs	r2, r3, #3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3208      	adds	r2, #8
 800648c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	220f      	movs	r2, #15
 800649c:	fa02 f303 	lsl.w	r3, r2, r3
 80064a0:	43db      	mvns	r3, r3
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	4013      	ands	r3, r2
 80064a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	691a      	ldr	r2, [r3, #16]
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	08da      	lsrs	r2, r3, #3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3208      	adds	r2, #8
 80064c6:	69b9      	ldr	r1, [r7, #24]
 80064c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	2203      	movs	r2, #3
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	43db      	mvns	r3, r3
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	4013      	ands	r3, r2
 80064e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f003 0203 	and.w	r2, r3, #3
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 80be 	beq.w	800668a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800650e:	4b65      	ldr	r3, [pc, #404]	; (80066a4 <HAL_GPIO_Init+0x320>)
 8006510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006512:	4a64      	ldr	r2, [pc, #400]	; (80066a4 <HAL_GPIO_Init+0x320>)
 8006514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006518:	6453      	str	r3, [r2, #68]	; 0x44
 800651a:	4b62      	ldr	r3, [pc, #392]	; (80066a4 <HAL_GPIO_Init+0x320>)
 800651c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006526:	4a60      	ldr	r2, [pc, #384]	; (80066a8 <HAL_GPIO_Init+0x324>)
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	089b      	lsrs	r3, r3, #2
 800652c:	3302      	adds	r3, #2
 800652e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006532:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	220f      	movs	r2, #15
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	43db      	mvns	r3, r3
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	4013      	ands	r3, r2
 8006548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a57      	ldr	r2, [pc, #348]	; (80066ac <HAL_GPIO_Init+0x328>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d037      	beq.n	80065c2 <HAL_GPIO_Init+0x23e>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a56      	ldr	r2, [pc, #344]	; (80066b0 <HAL_GPIO_Init+0x32c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d031      	beq.n	80065be <HAL_GPIO_Init+0x23a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a55      	ldr	r2, [pc, #340]	; (80066b4 <HAL_GPIO_Init+0x330>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d02b      	beq.n	80065ba <HAL_GPIO_Init+0x236>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a54      	ldr	r2, [pc, #336]	; (80066b8 <HAL_GPIO_Init+0x334>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d025      	beq.n	80065b6 <HAL_GPIO_Init+0x232>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a53      	ldr	r2, [pc, #332]	; (80066bc <HAL_GPIO_Init+0x338>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d01f      	beq.n	80065b2 <HAL_GPIO_Init+0x22e>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a52      	ldr	r2, [pc, #328]	; (80066c0 <HAL_GPIO_Init+0x33c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d019      	beq.n	80065ae <HAL_GPIO_Init+0x22a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a51      	ldr	r2, [pc, #324]	; (80066c4 <HAL_GPIO_Init+0x340>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d013      	beq.n	80065aa <HAL_GPIO_Init+0x226>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a50      	ldr	r2, [pc, #320]	; (80066c8 <HAL_GPIO_Init+0x344>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00d      	beq.n	80065a6 <HAL_GPIO_Init+0x222>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a4f      	ldr	r2, [pc, #316]	; (80066cc <HAL_GPIO_Init+0x348>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d007      	beq.n	80065a2 <HAL_GPIO_Init+0x21e>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a4e      	ldr	r2, [pc, #312]	; (80066d0 <HAL_GPIO_Init+0x34c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d101      	bne.n	800659e <HAL_GPIO_Init+0x21a>
 800659a:	2309      	movs	r3, #9
 800659c:	e012      	b.n	80065c4 <HAL_GPIO_Init+0x240>
 800659e:	230a      	movs	r3, #10
 80065a0:	e010      	b.n	80065c4 <HAL_GPIO_Init+0x240>
 80065a2:	2308      	movs	r3, #8
 80065a4:	e00e      	b.n	80065c4 <HAL_GPIO_Init+0x240>
 80065a6:	2307      	movs	r3, #7
 80065a8:	e00c      	b.n	80065c4 <HAL_GPIO_Init+0x240>
 80065aa:	2306      	movs	r3, #6
 80065ac:	e00a      	b.n	80065c4 <HAL_GPIO_Init+0x240>
 80065ae:	2305      	movs	r3, #5
 80065b0:	e008      	b.n	80065c4 <HAL_GPIO_Init+0x240>
 80065b2:	2304      	movs	r3, #4
 80065b4:	e006      	b.n	80065c4 <HAL_GPIO_Init+0x240>
 80065b6:	2303      	movs	r3, #3
 80065b8:	e004      	b.n	80065c4 <HAL_GPIO_Init+0x240>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e002      	b.n	80065c4 <HAL_GPIO_Init+0x240>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <HAL_GPIO_Init+0x240>
 80065c2:	2300      	movs	r3, #0
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	f002 0203 	and.w	r2, r2, #3
 80065ca:	0092      	lsls	r2, r2, #2
 80065cc:	4093      	lsls	r3, r2
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80065d4:	4934      	ldr	r1, [pc, #208]	; (80066a8 <HAL_GPIO_Init+0x324>)
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	089b      	lsrs	r3, r3, #2
 80065da:	3302      	adds	r3, #2
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065e2:	4b3c      	ldr	r3, [pc, #240]	; (80066d4 <HAL_GPIO_Init+0x350>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	43db      	mvns	r3, r3
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	4013      	ands	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006606:	4a33      	ldr	r2, [pc, #204]	; (80066d4 <HAL_GPIO_Init+0x350>)
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800660c:	4b31      	ldr	r3, [pc, #196]	; (80066d4 <HAL_GPIO_Init+0x350>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	43db      	mvns	r3, r3
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	4013      	ands	r3, r2
 800661a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006630:	4a28      	ldr	r2, [pc, #160]	; (80066d4 <HAL_GPIO_Init+0x350>)
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006636:	4b27      	ldr	r3, [pc, #156]	; (80066d4 <HAL_GPIO_Init+0x350>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	43db      	mvns	r3, r3
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	4013      	ands	r3, r2
 8006644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800665a:	4a1e      	ldr	r2, [pc, #120]	; (80066d4 <HAL_GPIO_Init+0x350>)
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006660:	4b1c      	ldr	r3, [pc, #112]	; (80066d4 <HAL_GPIO_Init+0x350>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	43db      	mvns	r3, r3
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	4013      	ands	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006684:	4a13      	ldr	r2, [pc, #76]	; (80066d4 <HAL_GPIO_Init+0x350>)
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	3301      	adds	r3, #1
 800668e:	61fb      	str	r3, [r7, #28]
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	2b0f      	cmp	r3, #15
 8006694:	f67f ae86 	bls.w	80063a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006698:	bf00      	nop
 800669a:	3724      	adds	r7, #36	; 0x24
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	40023800 	.word	0x40023800
 80066a8:	40013800 	.word	0x40013800
 80066ac:	40020000 	.word	0x40020000
 80066b0:	40020400 	.word	0x40020400
 80066b4:	40020800 	.word	0x40020800
 80066b8:	40020c00 	.word	0x40020c00
 80066bc:	40021000 	.word	0x40021000
 80066c0:	40021400 	.word	0x40021400
 80066c4:	40021800 	.word	0x40021800
 80066c8:	40021c00 	.word	0x40021c00
 80066cc:	40022000 	.word	0x40022000
 80066d0:	40022400 	.word	0x40022400
 80066d4:	40013c00 	.word	0x40013c00

080066d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80066e2:	2300      	movs	r3, #0
 80066e4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80066ee:	2300      	movs	r3, #0
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	e0d9      	b.n	80068a8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80066f4:	2201      	movs	r2, #1
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4013      	ands	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	429a      	cmp	r2, r3
 800670c:	f040 80c9 	bne.w	80068a2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006710:	4a6a      	ldr	r2, [pc, #424]	; (80068bc <HAL_GPIO_DeInit+0x1e4>)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	089b      	lsrs	r3, r3, #2
 8006716:	3302      	adds	r3, #2
 8006718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800671c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f003 0303 	and.w	r3, r3, #3
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	220f      	movs	r2, #15
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	4013      	ands	r3, r2
 8006730:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a62      	ldr	r2, [pc, #392]	; (80068c0 <HAL_GPIO_DeInit+0x1e8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d037      	beq.n	80067aa <HAL_GPIO_DeInit+0xd2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a61      	ldr	r2, [pc, #388]	; (80068c4 <HAL_GPIO_DeInit+0x1ec>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d031      	beq.n	80067a6 <HAL_GPIO_DeInit+0xce>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a60      	ldr	r2, [pc, #384]	; (80068c8 <HAL_GPIO_DeInit+0x1f0>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d02b      	beq.n	80067a2 <HAL_GPIO_DeInit+0xca>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a5f      	ldr	r2, [pc, #380]	; (80068cc <HAL_GPIO_DeInit+0x1f4>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d025      	beq.n	800679e <HAL_GPIO_DeInit+0xc6>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a5e      	ldr	r2, [pc, #376]	; (80068d0 <HAL_GPIO_DeInit+0x1f8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01f      	beq.n	800679a <HAL_GPIO_DeInit+0xc2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a5d      	ldr	r2, [pc, #372]	; (80068d4 <HAL_GPIO_DeInit+0x1fc>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d019      	beq.n	8006796 <HAL_GPIO_DeInit+0xbe>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a5c      	ldr	r2, [pc, #368]	; (80068d8 <HAL_GPIO_DeInit+0x200>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d013      	beq.n	8006792 <HAL_GPIO_DeInit+0xba>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a5b      	ldr	r2, [pc, #364]	; (80068dc <HAL_GPIO_DeInit+0x204>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00d      	beq.n	800678e <HAL_GPIO_DeInit+0xb6>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a5a      	ldr	r2, [pc, #360]	; (80068e0 <HAL_GPIO_DeInit+0x208>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d007      	beq.n	800678a <HAL_GPIO_DeInit+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a59      	ldr	r2, [pc, #356]	; (80068e4 <HAL_GPIO_DeInit+0x20c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d101      	bne.n	8006786 <HAL_GPIO_DeInit+0xae>
 8006782:	2309      	movs	r3, #9
 8006784:	e012      	b.n	80067ac <HAL_GPIO_DeInit+0xd4>
 8006786:	230a      	movs	r3, #10
 8006788:	e010      	b.n	80067ac <HAL_GPIO_DeInit+0xd4>
 800678a:	2308      	movs	r3, #8
 800678c:	e00e      	b.n	80067ac <HAL_GPIO_DeInit+0xd4>
 800678e:	2307      	movs	r3, #7
 8006790:	e00c      	b.n	80067ac <HAL_GPIO_DeInit+0xd4>
 8006792:	2306      	movs	r3, #6
 8006794:	e00a      	b.n	80067ac <HAL_GPIO_DeInit+0xd4>
 8006796:	2305      	movs	r3, #5
 8006798:	e008      	b.n	80067ac <HAL_GPIO_DeInit+0xd4>
 800679a:	2304      	movs	r3, #4
 800679c:	e006      	b.n	80067ac <HAL_GPIO_DeInit+0xd4>
 800679e:	2303      	movs	r3, #3
 80067a0:	e004      	b.n	80067ac <HAL_GPIO_DeInit+0xd4>
 80067a2:	2302      	movs	r3, #2
 80067a4:	e002      	b.n	80067ac <HAL_GPIO_DeInit+0xd4>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <HAL_GPIO_DeInit+0xd4>
 80067aa:	2300      	movs	r3, #0
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	f002 0203 	and.w	r2, r2, #3
 80067b2:	0092      	lsls	r2, r2, #2
 80067b4:	4093      	lsls	r3, r2
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d132      	bne.n	8006822 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80067bc:	4b4a      	ldr	r3, [pc, #296]	; (80068e8 <HAL_GPIO_DeInit+0x210>)
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	43db      	mvns	r3, r3
 80067c4:	4948      	ldr	r1, [pc, #288]	; (80068e8 <HAL_GPIO_DeInit+0x210>)
 80067c6:	4013      	ands	r3, r2
 80067c8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80067ca:	4b47      	ldr	r3, [pc, #284]	; (80068e8 <HAL_GPIO_DeInit+0x210>)
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	43db      	mvns	r3, r3
 80067d2:	4945      	ldr	r1, [pc, #276]	; (80068e8 <HAL_GPIO_DeInit+0x210>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80067d8:	4b43      	ldr	r3, [pc, #268]	; (80068e8 <HAL_GPIO_DeInit+0x210>)
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	43db      	mvns	r3, r3
 80067e0:	4941      	ldr	r1, [pc, #260]	; (80068e8 <HAL_GPIO_DeInit+0x210>)
 80067e2:	4013      	ands	r3, r2
 80067e4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80067e6:	4b40      	ldr	r3, [pc, #256]	; (80068e8 <HAL_GPIO_DeInit+0x210>)
 80067e8:	68da      	ldr	r2, [r3, #12]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	43db      	mvns	r3, r3
 80067ee:	493e      	ldr	r1, [pc, #248]	; (80068e8 <HAL_GPIO_DeInit+0x210>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f003 0303 	and.w	r3, r3, #3
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	220f      	movs	r2, #15
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006804:	4a2d      	ldr	r2, [pc, #180]	; (80068bc <HAL_GPIO_DeInit+0x1e4>)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	089b      	lsrs	r3, r3, #2
 800680a:	3302      	adds	r3, #2
 800680c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	43da      	mvns	r2, r3
 8006814:	4829      	ldr	r0, [pc, #164]	; (80068bc <HAL_GPIO_DeInit+0x1e4>)
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	089b      	lsrs	r3, r3, #2
 800681a:	400a      	ands	r2, r1
 800681c:	3302      	adds	r3, #2
 800681e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	2103      	movs	r1, #3
 800682c:	fa01 f303 	lsl.w	r3, r1, r3
 8006830:	43db      	mvns	r3, r3
 8006832:	401a      	ands	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	08da      	lsrs	r2, r3, #3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	3208      	adds	r2, #8
 8006840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	220f      	movs	r2, #15
 800684e:	fa02 f303 	lsl.w	r3, r2, r3
 8006852:	43db      	mvns	r3, r3
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	08d2      	lsrs	r2, r2, #3
 8006858:	4019      	ands	r1, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3208      	adds	r2, #8
 800685e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	2103      	movs	r1, #3
 800686c:	fa01 f303 	lsl.w	r3, r1, r3
 8006870:	43db      	mvns	r3, r3
 8006872:	401a      	ands	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	2101      	movs	r1, #1
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	fa01 f303 	lsl.w	r3, r1, r3
 8006884:	43db      	mvns	r3, r3
 8006886:	401a      	ands	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	2103      	movs	r1, #3
 8006896:	fa01 f303 	lsl.w	r3, r1, r3
 800689a:	43db      	mvns	r3, r3
 800689c:	401a      	ands	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	3301      	adds	r3, #1
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	2b0f      	cmp	r3, #15
 80068ac:	f67f af22 	bls.w	80066f4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80068b0:	bf00      	nop
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	40013800 	.word	0x40013800
 80068c0:	40020000 	.word	0x40020000
 80068c4:	40020400 	.word	0x40020400
 80068c8:	40020800 	.word	0x40020800
 80068cc:	40020c00 	.word	0x40020c00
 80068d0:	40021000 	.word	0x40021000
 80068d4:	40021400 	.word	0x40021400
 80068d8:	40021800 	.word	0x40021800
 80068dc:	40021c00 	.word	0x40021c00
 80068e0:	40022000 	.word	0x40022000
 80068e4:	40022400 	.word	0x40022400
 80068e8:	40013c00 	.word	0x40013c00

080068ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	887b      	ldrh	r3, [r7, #2]
 80068fe:	4013      	ands	r3, r2
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006904:	2301      	movs	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]
 8006908:	e001      	b.n	800690e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800690a:	2300      	movs	r3, #0
 800690c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800690e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	807b      	strh	r3, [r7, #2]
 8006928:	4613      	mov	r3, r2
 800692a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800692c:	787b      	ldrb	r3, [r7, #1]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006932:	887a      	ldrh	r2, [r7, #2]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006938:	e003      	b.n	8006942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800693a:	887b      	ldrh	r3, [r7, #2]
 800693c:	041a      	lsls	r2, r3, #16
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	619a      	str	r2, [r3, #24]
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
	...

08006950 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e07f      	b.n	8006a62 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d106      	bne.n	800697c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fd fd60 	bl	800443c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2224      	movs	r2, #36	; 0x24
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0201 	bic.w	r2, r2, #1
 8006992:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80069a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d107      	bne.n	80069ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069c6:	609a      	str	r2, [r3, #8]
 80069c8:	e006      	b.n	80069d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80069d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d104      	bne.n	80069ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6859      	ldr	r1, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	4b1d      	ldr	r3, [pc, #116]	; (8006a6c <HAL_I2C_Init+0x11c>)
 80069f6:	430b      	orrs	r3, r1
 80069f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691a      	ldr	r2, [r3, #16]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	ea42 0103 	orr.w	r1, r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	021a      	lsls	r2, r3, #8
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	69d9      	ldr	r1, [r3, #28]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a1a      	ldr	r2, [r3, #32]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0201 	orr.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	02008000 	.word	0x02008000

08006a70 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e021      	b.n	8006ac6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2224      	movs	r2, #36	; 0x24
 8006a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0201 	bic.w	r2, r2, #1
 8006a98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7fd fd46 	bl	800452c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af02      	add	r7, sp, #8
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	4608      	mov	r0, r1
 8006ada:	4611      	mov	r1, r2
 8006adc:	461a      	mov	r2, r3
 8006ade:	4603      	mov	r3, r0
 8006ae0:	817b      	strh	r3, [r7, #10]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	813b      	strh	r3, [r7, #8]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	f040 80f9 	bne.w	8006cea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <HAL_I2C_Mem_Write+0x34>
 8006afe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d105      	bne.n	8006b10 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e0ed      	b.n	8006cec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_I2C_Mem_Write+0x4e>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e0e6      	b.n	8006cec <HAL_I2C_Mem_Write+0x21c>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b26:	f7fe fa0b 	bl	8004f40 <HAL_GetTick>
 8006b2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	2319      	movs	r3, #25
 8006b32:	2201      	movs	r2, #1
 8006b34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 fad1 	bl	80070e0 <I2C_WaitOnFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e0d1      	b.n	8006cec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2221      	movs	r2, #33	; 0x21
 8006b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2240      	movs	r2, #64	; 0x40
 8006b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a3a      	ldr	r2, [r7, #32]
 8006b62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b70:	88f8      	ldrh	r0, [r7, #6]
 8006b72:	893a      	ldrh	r2, [r7, #8]
 8006b74:	8979      	ldrh	r1, [r7, #10]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	4603      	mov	r3, r0
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 f9e1 	bl	8006f48 <I2C_RequestMemoryWrite>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e0a9      	b.n	8006cec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2bff      	cmp	r3, #255	; 0xff
 8006ba0:	d90e      	bls.n	8006bc0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	22ff      	movs	r2, #255	; 0xff
 8006ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	8979      	ldrh	r1, [r7, #10]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 fbb3 	bl	8007324 <I2C_TransferConfig>
 8006bbe:	e00f      	b.n	8006be0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	8979      	ldrh	r1, [r7, #10]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 fba2 	bl	8007324 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 fabb 	bl	8007160 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e07b      	b.n	8006cec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	781a      	ldrb	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	1c5a      	adds	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d034      	beq.n	8006c98 <HAL_I2C_Mem_Write+0x1c8>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d130      	bne.n	8006c98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	2180      	movs	r1, #128	; 0x80
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fa4d 	bl	80070e0 <I2C_WaitOnFlagUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e04d      	b.n	8006cec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2bff      	cmp	r3, #255	; 0xff
 8006c58:	d90e      	bls.n	8006c78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	22ff      	movs	r2, #255	; 0xff
 8006c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	8979      	ldrh	r1, [r7, #10]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 fb57 	bl	8007324 <I2C_TransferConfig>
 8006c76:	e00f      	b.n	8006c98 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	8979      	ldrh	r1, [r7, #10]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fb46 	bl	8007324 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d19e      	bne.n	8006be0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 fa9a 	bl	80071e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e01a      	b.n	8006cec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6859      	ldr	r1, [r3, #4]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	4b0a      	ldr	r3, [pc, #40]	; (8006cf4 <HAL_I2C_Mem_Write+0x224>)
 8006cca:	400b      	ands	r3, r1
 8006ccc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e000      	b.n	8006cec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006cea:	2302      	movs	r3, #2
  }
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	fe00e800 	.word	0xfe00e800

08006cf8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	4608      	mov	r0, r1
 8006d02:	4611      	mov	r1, r2
 8006d04:	461a      	mov	r2, r3
 8006d06:	4603      	mov	r3, r0
 8006d08:	817b      	strh	r3, [r7, #10]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	813b      	strh	r3, [r7, #8]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	f040 80fd 	bne.w	8006f1a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <HAL_I2C_Mem_Read+0x34>
 8006d26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d105      	bne.n	8006d38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e0f1      	b.n	8006f1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_I2C_Mem_Read+0x4e>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e0ea      	b.n	8006f1c <HAL_I2C_Mem_Read+0x224>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d4e:	f7fe f8f7 	bl	8004f40 <HAL_GetTick>
 8006d52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	2319      	movs	r3, #25
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 f9bd 	bl	80070e0 <I2C_WaitOnFlagUntilTimeout>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e0d5      	b.n	8006f1c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2222      	movs	r2, #34	; 0x22
 8006d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2240      	movs	r2, #64	; 0x40
 8006d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a3a      	ldr	r2, [r7, #32]
 8006d8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d98:	88f8      	ldrh	r0, [r7, #6]
 8006d9a:	893a      	ldrh	r2, [r7, #8]
 8006d9c:	8979      	ldrh	r1, [r7, #10]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	9301      	str	r3, [sp, #4]
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	4603      	mov	r3, r0
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 f921 	bl	8006ff0 <I2C_RequestMemoryRead>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d005      	beq.n	8006dc0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e0ad      	b.n	8006f1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	2bff      	cmp	r3, #255	; 0xff
 8006dc8:	d90e      	bls.n	8006de8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	22ff      	movs	r2, #255	; 0xff
 8006dce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	8979      	ldrh	r1, [r7, #10]
 8006dd8:	4b52      	ldr	r3, [pc, #328]	; (8006f24 <HAL_I2C_Mem_Read+0x22c>)
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 fa9f 	bl	8007324 <I2C_TransferConfig>
 8006de6:	e00f      	b.n	8006e08 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	8979      	ldrh	r1, [r7, #10]
 8006dfa:	4b4a      	ldr	r3, [pc, #296]	; (8006f24 <HAL_I2C_Mem_Read+0x22c>)
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 fa8e 	bl	8007324 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2104      	movs	r1, #4
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 f964 	bl	80070e0 <I2C_WaitOnFlagUntilTimeout>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e07c      	b.n	8006f1c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	b2d2      	uxtb	r2, r2
 8006e2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d034      	beq.n	8006ec8 <HAL_I2C_Mem_Read+0x1d0>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d130      	bne.n	8006ec8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2180      	movs	r1, #128	; 0x80
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 f935 	bl	80070e0 <I2C_WaitOnFlagUntilTimeout>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e04d      	b.n	8006f1c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2bff      	cmp	r3, #255	; 0xff
 8006e88:	d90e      	bls.n	8006ea8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	22ff      	movs	r2, #255	; 0xff
 8006e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	8979      	ldrh	r1, [r7, #10]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 fa3f 	bl	8007324 <I2C_TransferConfig>
 8006ea6:	e00f      	b.n	8006ec8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	8979      	ldrh	r1, [r7, #10]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 fa2e 	bl	8007324 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d19a      	bne.n	8006e08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 f982 	bl	80071e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e01a      	b.n	8006f1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2220      	movs	r2, #32
 8006eec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6859      	ldr	r1, [r3, #4]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	4b0b      	ldr	r3, [pc, #44]	; (8006f28 <HAL_I2C_Mem_Read+0x230>)
 8006efa:	400b      	ands	r3, r1
 8006efc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	e000      	b.n	8006f1c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006f1a:	2302      	movs	r3, #2
  }
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	80002400 	.word	0x80002400
 8006f28:	fe00e800 	.word	0xfe00e800

08006f2c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f3a:	b2db      	uxtb	r3, r3
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af02      	add	r7, sp, #8
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	4608      	mov	r0, r1
 8006f52:	4611      	mov	r1, r2
 8006f54:	461a      	mov	r2, r3
 8006f56:	4603      	mov	r3, r0
 8006f58:	817b      	strh	r3, [r7, #10]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	813b      	strh	r3, [r7, #8]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006f62:	88fb      	ldrh	r3, [r7, #6]
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	8979      	ldrh	r1, [r7, #10]
 8006f68:	4b20      	ldr	r3, [pc, #128]	; (8006fec <I2C_RequestMemoryWrite+0xa4>)
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 f9d7 	bl	8007324 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	69b9      	ldr	r1, [r7, #24]
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 f8f0 	bl	8007160 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e02c      	b.n	8006fe4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f8a:	88fb      	ldrh	r3, [r7, #6]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d105      	bne.n	8006f9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f90:	893b      	ldrh	r3, [r7, #8]
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	629a      	str	r2, [r3, #40]	; 0x28
 8006f9a:	e015      	b.n	8006fc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f9c:	893b      	ldrh	r3, [r7, #8]
 8006f9e:	0a1b      	lsrs	r3, r3, #8
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006faa:	69fa      	ldr	r2, [r7, #28]
 8006fac:	69b9      	ldr	r1, [r7, #24]
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 f8d6 	bl	8007160 <I2C_WaitOnTXISFlagUntilTimeout>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e012      	b.n	8006fe4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006fbe:	893b      	ldrh	r3, [r7, #8]
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2180      	movs	r1, #128	; 0x80
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 f884 	bl	80070e0 <I2C_WaitOnFlagUntilTimeout>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e000      	b.n	8006fe4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	80002000 	.word	0x80002000

08006ff0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	4608      	mov	r0, r1
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	4603      	mov	r3, r0
 8007000:	817b      	strh	r3, [r7, #10]
 8007002:	460b      	mov	r3, r1
 8007004:	813b      	strh	r3, [r7, #8]
 8007006:	4613      	mov	r3, r2
 8007008:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	b2da      	uxtb	r2, r3
 800700e:	8979      	ldrh	r1, [r7, #10]
 8007010:	4b20      	ldr	r3, [pc, #128]	; (8007094 <I2C_RequestMemoryRead+0xa4>)
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	2300      	movs	r3, #0
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 f984 	bl	8007324 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	69b9      	ldr	r1, [r7, #24]
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f89d 	bl	8007160 <I2C_WaitOnTXISFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e02c      	b.n	800708a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007030:	88fb      	ldrh	r3, [r7, #6]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d105      	bne.n	8007042 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007036:	893b      	ldrh	r3, [r7, #8]
 8007038:	b2da      	uxtb	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	629a      	str	r2, [r3, #40]	; 0x28
 8007040:	e015      	b.n	800706e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007042:	893b      	ldrh	r3, [r7, #8]
 8007044:	0a1b      	lsrs	r3, r3, #8
 8007046:	b29b      	uxth	r3, r3
 8007048:	b2da      	uxtb	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007050:	69fa      	ldr	r2, [r7, #28]
 8007052:	69b9      	ldr	r1, [r7, #24]
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 f883 	bl	8007160 <I2C_WaitOnTXISFlagUntilTimeout>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e012      	b.n	800708a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007064:	893b      	ldrh	r3, [r7, #8]
 8007066:	b2da      	uxtb	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	2200      	movs	r2, #0
 8007076:	2140      	movs	r1, #64	; 0x40
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 f831 	bl	80070e0 <I2C_WaitOnFlagUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e000      	b.n	800708a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	80002000 	.word	0x80002000

08007098 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d103      	bne.n	80070b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2200      	movs	r2, #0
 80070b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d007      	beq.n	80070d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699a      	ldr	r2, [r3, #24]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0201 	orr.w	r2, r2, #1
 80070d2:	619a      	str	r2, [r3, #24]
  }
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	4613      	mov	r3, r2
 80070ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070f0:	e022      	b.n	8007138 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f8:	d01e      	beq.n	8007138 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070fa:	f7fd ff21 	bl	8004f40 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d302      	bcc.n	8007110 <I2C_WaitOnFlagUntilTimeout+0x30>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d113      	bne.n	8007138 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007114:	f043 0220 	orr.w	r2, r3, #32
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2220      	movs	r2, #32
 8007120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e00f      	b.n	8007158 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699a      	ldr	r2, [r3, #24]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4013      	ands	r3, r2
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	429a      	cmp	r2, r3
 8007146:	bf0c      	ite	eq
 8007148:	2301      	moveq	r3, #1
 800714a:	2300      	movne	r3, #0
 800714c:	b2db      	uxtb	r3, r3
 800714e:	461a      	mov	r2, r3
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	429a      	cmp	r2, r3
 8007154:	d0cd      	beq.n	80070f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800716c:	e02c      	b.n	80071c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	68b9      	ldr	r1, [r7, #8]
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 f870 	bl	8007258 <I2C_IsAcknowledgeFailed>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e02a      	b.n	80071d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007188:	d01e      	beq.n	80071c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718a:	f7fd fed9 	bl	8004f40 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	429a      	cmp	r2, r3
 8007198:	d302      	bcc.n	80071a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d113      	bne.n	80071c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a4:	f043 0220 	orr.w	r2, r3, #32
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e007      	b.n	80071d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d1cb      	bne.n	800716e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071ec:	e028      	b.n	8007240 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 f830 	bl	8007258 <I2C_IsAcknowledgeFailed>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e026      	b.n	8007250 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007202:	f7fd fe9d 	bl	8004f40 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	429a      	cmp	r2, r3
 8007210:	d302      	bcc.n	8007218 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d113      	bne.n	8007240 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721c:	f043 0220 	orr.w	r2, r3, #32
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2220      	movs	r2, #32
 8007228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e007      	b.n	8007250 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b20      	cmp	r3, #32
 800724c:	d1cf      	bne.n	80071ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	f003 0310 	and.w	r3, r3, #16
 800726e:	2b10      	cmp	r3, #16
 8007270:	d151      	bne.n	8007316 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007272:	e022      	b.n	80072ba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727a:	d01e      	beq.n	80072ba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800727c:	f7fd fe60 	bl	8004f40 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	429a      	cmp	r2, r3
 800728a:	d302      	bcc.n	8007292 <I2C_IsAcknowledgeFailed+0x3a>
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d113      	bne.n	80072ba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007296:	f043 0220 	orr.w	r2, r3, #32
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2220      	movs	r2, #32
 80072a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e02e      	b.n	8007318 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	f003 0320 	and.w	r3, r3, #32
 80072c4:	2b20      	cmp	r3, #32
 80072c6:	d1d5      	bne.n	8007274 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2210      	movs	r2, #16
 80072ce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2220      	movs	r2, #32
 80072d6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f7ff fedd 	bl	8007098 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6859      	ldr	r1, [r3, #4]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	4b0d      	ldr	r3, [pc, #52]	; (8007320 <I2C_IsAcknowledgeFailed+0xc8>)
 80072ea:	400b      	ands	r3, r1
 80072ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f2:	f043 0204 	orr.w	r2, r3, #4
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e000      	b.n	8007318 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	fe00e800 	.word	0xfe00e800

08007324 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	607b      	str	r3, [r7, #4]
 800732e:	460b      	mov	r3, r1
 8007330:	817b      	strh	r3, [r7, #10]
 8007332:	4613      	mov	r3, r2
 8007334:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	0d5b      	lsrs	r3, r3, #21
 8007340:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007344:	4b0d      	ldr	r3, [pc, #52]	; (800737c <I2C_TransferConfig+0x58>)
 8007346:	430b      	orrs	r3, r1
 8007348:	43db      	mvns	r3, r3
 800734a:	ea02 0103 	and.w	r1, r2, r3
 800734e:	897b      	ldrh	r3, [r7, #10]
 8007350:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007354:	7a7b      	ldrb	r3, [r7, #9]
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	431a      	orrs	r2, r3
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	431a      	orrs	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	03ff63ff 	.word	0x03ff63ff

08007380 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b20      	cmp	r3, #32
 8007394:	d138      	bne.n	8007408 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80073a0:	2302      	movs	r3, #2
 80073a2:	e032      	b.n	800740a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2224      	movs	r2, #36	; 0x24
 80073b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0201 	bic.w	r2, r2, #1
 80073c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6819      	ldr	r1, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0201 	orr.w	r2, r2, #1
 80073f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	e000      	b.n	800740a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007408:	2302      	movs	r3, #2
  }
}
 800740a:	4618      	mov	r0, r3
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007416:	b480      	push	{r7}
 8007418:	b085      	sub	sp, #20
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b20      	cmp	r3, #32
 800742a:	d139      	bne.n	80074a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007432:	2b01      	cmp	r3, #1
 8007434:	d101      	bne.n	800743a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007436:	2302      	movs	r3, #2
 8007438:	e033      	b.n	80074a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2224      	movs	r2, #36	; 0x24
 8007446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0201 	bic.w	r2, r2, #1
 8007458:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007468:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	021b      	lsls	r3, r3, #8
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 0201 	orr.w	r2, r2, #1
 800748a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	e000      	b.n	80074a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80074a0:	2302      	movs	r3, #2
  }
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
	...

080074b0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e0bf      	b.n	8007642 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fd f864 	bl	80045a4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80074f2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6999      	ldr	r1, [r3, #24]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007508:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6899      	ldr	r1, [r3, #8]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4b4a      	ldr	r3, [pc, #296]	; (800764c <HAL_LTDC_Init+0x19c>)
 8007524:	400b      	ands	r3, r1
 8007526:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	041b      	lsls	r3, r3, #16
 800752e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6899      	ldr	r1, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	699a      	ldr	r2, [r3, #24]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68d9      	ldr	r1, [r3, #12]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	4b3e      	ldr	r3, [pc, #248]	; (800764c <HAL_LTDC_Init+0x19c>)
 8007552:	400b      	ands	r3, r1
 8007554:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	041b      	lsls	r3, r3, #16
 800755c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68d9      	ldr	r1, [r3, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a1a      	ldr	r2, [r3, #32]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	431a      	orrs	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6919      	ldr	r1, [r3, #16]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	4b33      	ldr	r3, [pc, #204]	; (800764c <HAL_LTDC_Init+0x19c>)
 8007580:	400b      	ands	r3, r1
 8007582:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	041b      	lsls	r3, r3, #16
 800758a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6919      	ldr	r1, [r3, #16]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	431a      	orrs	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6959      	ldr	r1, [r3, #20]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	4b27      	ldr	r3, [pc, #156]	; (800764c <HAL_LTDC_Init+0x19c>)
 80075ae:	400b      	ands	r3, r1
 80075b0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b6:	041b      	lsls	r3, r3, #16
 80075b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6959      	ldr	r1, [r3, #20]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80075e0:	041b      	lsls	r3, r3, #16
 80075e2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80075f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4313      	orrs	r3, r2
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0206 	orr.w	r2, r2, #6
 800761e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699a      	ldr	r2, [r3, #24]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f042 0201 	orr.w	r2, r2, #1
 800762e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	f000f800 	.word	0xf000f800

08007650 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007666:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f003 0304 	and.w	r3, r3, #4
 800766e:	2b00      	cmp	r3, #0
 8007670:	d023      	beq.n	80076ba <HAL_LTDC_IRQHandler+0x6a>
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	f003 0304 	and.w	r3, r3, #4
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01e      	beq.n	80076ba <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0204 	bic.w	r2, r2, #4
 800768a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2204      	movs	r2, #4
 8007692:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800769a:	f043 0201 	orr.w	r2, r3, #1
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2204      	movs	r2, #4
 80076a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f86f 	bl	8007798 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d023      	beq.n	800770c <HAL_LTDC_IRQHandler+0xbc>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f003 0302 	and.w	r3, r3, #2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01e      	beq.n	800770c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0202 	bic.w	r2, r2, #2
 80076dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2202      	movs	r2, #2
 80076e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076ec:	f043 0202 	orr.w	r2, r3, #2
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2204      	movs	r2, #4
 80076fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f846 	bl	8007798 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d01b      	beq.n	800774e <HAL_LTDC_IRQHandler+0xfe>
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	d016      	beq.n	800774e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0201 	bic.w	r2, r2, #1
 800772e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2201      	movs	r2, #1
 8007736:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f82f 	bl	80077ac <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f003 0308 	and.w	r3, r3, #8
 8007754:	2b00      	cmp	r3, #0
 8007756:	d01b      	beq.n	8007790 <HAL_LTDC_IRQHandler+0x140>
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	2b00      	cmp	r3, #0
 8007760:	d016      	beq.n	8007790 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 0208 	bic.w	r2, r2, #8
 8007770:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2208      	movs	r2, #8
 8007778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f818 	bl	80077c0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007790:	bf00      	nop
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80077d4:	b5b0      	push	{r4, r5, r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d101      	bne.n	80077ee <HAL_LTDC_ConfigLayer+0x1a>
 80077ea:	2302      	movs	r3, #2
 80077ec:	e02c      	b.n	8007848 <HAL_LTDC_ConfigLayer+0x74>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2202      	movs	r2, #2
 80077fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2134      	movs	r1, #52	; 0x34
 8007804:	fb01 f303 	mul.w	r3, r1, r3
 8007808:	4413      	add	r3, r2
 800780a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	4614      	mov	r4, r2
 8007812:	461d      	mov	r5, r3
 8007814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800781a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800781c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800781e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	68b9      	ldr	r1, [r7, #8]
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 f81f 	bl	800786c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2201      	movs	r2, #1
 8007834:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bdb0      	pop	{r4, r5, r7, pc}

08007850 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800785e:	b2db      	uxtb	r3, r3
}
 8007860:	4618      	mov	r0, r3
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800786c:	b480      	push	{r7}
 800786e:	b089      	sub	sp, #36	; 0x24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	0c1b      	lsrs	r3, r3, #16
 8007884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007888:	4413      	add	r3, r2
 800788a:	041b      	lsls	r3, r3, #16
 800788c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	01db      	lsls	r3, r3, #7
 8007898:	4413      	add	r3, r2
 800789a:	3384      	adds	r3, #132	; 0x84
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	6812      	ldr	r2, [r2, #0]
 80078a2:	4611      	mov	r1, r2
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	01d2      	lsls	r2, r2, #7
 80078a8:	440a      	add	r2, r1
 80078aa:	3284      	adds	r2, #132	; 0x84
 80078ac:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80078b0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	0c1b      	lsrs	r3, r3, #16
 80078be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078c2:	4413      	add	r3, r2
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4619      	mov	r1, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	01db      	lsls	r3, r3, #7
 80078d0:	440b      	add	r3, r1
 80078d2:	3384      	adds	r3, #132	; 0x84
 80078d4:	4619      	mov	r1, r3
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	4313      	orrs	r3, r2
 80078da:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078ea:	4413      	add	r3, r2
 80078ec:	041b      	lsls	r3, r3, #16
 80078ee:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	01db      	lsls	r3, r3, #7
 80078fa:	4413      	add	r3, r2
 80078fc:	3384      	adds	r3, #132	; 0x84
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	6812      	ldr	r2, [r2, #0]
 8007904:	4611      	mov	r1, r2
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	01d2      	lsls	r2, r2, #7
 800790a:	440a      	add	r2, r1
 800790c:	3284      	adds	r2, #132	; 0x84
 800790e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007912:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007922:	4413      	add	r3, r2
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4619      	mov	r1, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	01db      	lsls	r3, r3, #7
 8007930:	440b      	add	r3, r1
 8007932:	3384      	adds	r3, #132	; 0x84
 8007934:	4619      	mov	r1, r3
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	4313      	orrs	r3, r2
 800793a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	461a      	mov	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	01db      	lsls	r3, r3, #7
 8007946:	4413      	add	r3, r2
 8007948:	3384      	adds	r3, #132	; 0x84
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	6812      	ldr	r2, [r2, #0]
 8007950:	4611      	mov	r1, r2
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	01d2      	lsls	r2, r2, #7
 8007956:	440a      	add	r2, r1
 8007958:	3284      	adds	r2, #132	; 0x84
 800795a:	f023 0307 	bic.w	r3, r3, #7
 800795e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	461a      	mov	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	01db      	lsls	r3, r3, #7
 800796a:	4413      	add	r3, r2
 800796c:	3384      	adds	r3, #132	; 0x84
 800796e:	461a      	mov	r2, r3
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800797c:	021b      	lsls	r3, r3, #8
 800797e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007986:	041b      	lsls	r3, r3, #16
 8007988:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	061b      	lsls	r3, r3, #24
 8007990:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	01db      	lsls	r3, r3, #7
 800799c:	4413      	add	r3, r2
 800799e:	3384      	adds	r3, #132	; 0x84
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	01db      	lsls	r3, r3, #7
 80079ac:	4413      	add	r3, r2
 80079ae:	3384      	adds	r3, #132	; 0x84
 80079b0:	461a      	mov	r2, r3
 80079b2:	2300      	movs	r3, #0
 80079b4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079bc:	461a      	mov	r2, r3
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	431a      	orrs	r2, r3
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	431a      	orrs	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4619      	mov	r1, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	01db      	lsls	r3, r3, #7
 80079d0:	440b      	add	r3, r1
 80079d2:	3384      	adds	r3, #132	; 0x84
 80079d4:	4619      	mov	r1, r3
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	4313      	orrs	r3, r2
 80079da:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	461a      	mov	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	01db      	lsls	r3, r3, #7
 80079e6:	4413      	add	r3, r2
 80079e8:	3384      	adds	r3, #132	; 0x84
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	4611      	mov	r1, r2
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	01d2      	lsls	r2, r2, #7
 80079f6:	440a      	add	r2, r1
 80079f8:	3284      	adds	r2, #132	; 0x84
 80079fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80079fe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	461a      	mov	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	01db      	lsls	r3, r3, #7
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3384      	adds	r3, #132	; 0x84
 8007a0e:	461a      	mov	r2, r3
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	01db      	lsls	r3, r3, #7
 8007a20:	4413      	add	r3, r2
 8007a22:	3384      	adds	r3, #132	; 0x84
 8007a24:	69da      	ldr	r2, [r3, #28]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	01db      	lsls	r3, r3, #7
 8007a30:	440b      	add	r3, r1
 8007a32:	3384      	adds	r3, #132	; 0x84
 8007a34:	4619      	mov	r1, r3
 8007a36:	4b58      	ldr	r3, [pc, #352]	; (8007b98 <LTDC_SetConfig+0x32c>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	69da      	ldr	r2, [r3, #28]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	68f9      	ldr	r1, [r7, #12]
 8007a46:	6809      	ldr	r1, [r1, #0]
 8007a48:	4608      	mov	r0, r1
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	01c9      	lsls	r1, r1, #7
 8007a4e:	4401      	add	r1, r0
 8007a50:	3184      	adds	r1, #132	; 0x84
 8007a52:	4313      	orrs	r3, r2
 8007a54:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	01db      	lsls	r3, r3, #7
 8007a60:	4413      	add	r3, r2
 8007a62:	3384      	adds	r3, #132	; 0x84
 8007a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	01db      	lsls	r3, r3, #7
 8007a70:	4413      	add	r3, r2
 8007a72:	3384      	adds	r3, #132	; 0x84
 8007a74:	461a      	mov	r2, r3
 8007a76:	2300      	movs	r3, #0
 8007a78:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	01db      	lsls	r3, r3, #7
 8007a84:	4413      	add	r3, r2
 8007a86:	3384      	adds	r3, #132	; 0x84
 8007a88:	461a      	mov	r2, r3
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007a98:	2304      	movs	r3, #4
 8007a9a:	61fb      	str	r3, [r7, #28]
 8007a9c:	e01b      	b.n	8007ad6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d102      	bne.n	8007aac <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	e014      	b.n	8007ad6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d00b      	beq.n	8007acc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d007      	beq.n	8007acc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d003      	beq.n	8007acc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007ac8:	2b07      	cmp	r3, #7
 8007aca:	d102      	bne.n	8007ad2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007acc:	2302      	movs	r3, #2
 8007ace:	61fb      	str	r3, [r7, #28]
 8007ad0:	e001      	b.n	8007ad6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	461a      	mov	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	01db      	lsls	r3, r3, #7
 8007ae0:	4413      	add	r3, r2
 8007ae2:	3384      	adds	r3, #132	; 0x84
 8007ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	6812      	ldr	r2, [r2, #0]
 8007aea:	4611      	mov	r1, r2
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	01d2      	lsls	r2, r2, #7
 8007af0:	440a      	add	r2, r1
 8007af2:	3284      	adds	r2, #132	; 0x84
 8007af4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007af8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	fb02 f303 	mul.w	r3, r2, r3
 8007b04:	041a      	lsls	r2, r3, #16
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	6859      	ldr	r1, [r3, #4]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	1acb      	subs	r3, r1, r3
 8007b10:	69f9      	ldr	r1, [r7, #28]
 8007b12:	fb01 f303 	mul.w	r3, r1, r3
 8007b16:	3303      	adds	r3, #3
 8007b18:	68f9      	ldr	r1, [r7, #12]
 8007b1a:	6809      	ldr	r1, [r1, #0]
 8007b1c:	4608      	mov	r0, r1
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	01c9      	lsls	r1, r1, #7
 8007b22:	4401      	add	r1, r0
 8007b24:	3184      	adds	r1, #132	; 0x84
 8007b26:	4313      	orrs	r3, r2
 8007b28:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	01db      	lsls	r3, r3, #7
 8007b34:	4413      	add	r3, r2
 8007b36:	3384      	adds	r3, #132	; 0x84
 8007b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	01db      	lsls	r3, r3, #7
 8007b44:	440b      	add	r3, r1
 8007b46:	3384      	adds	r3, #132	; 0x84
 8007b48:	4619      	mov	r1, r3
 8007b4a:	4b14      	ldr	r3, [pc, #80]	; (8007b9c <LTDC_SetConfig+0x330>)
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	461a      	mov	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	01db      	lsls	r3, r3, #7
 8007b5a:	4413      	add	r3, r2
 8007b5c:	3384      	adds	r3, #132	; 0x84
 8007b5e:	461a      	mov	r2, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	01db      	lsls	r3, r3, #7
 8007b70:	4413      	add	r3, r2
 8007b72:	3384      	adds	r3, #132	; 0x84
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	6812      	ldr	r2, [r2, #0]
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	01d2      	lsls	r2, r2, #7
 8007b80:	440a      	add	r2, r1
 8007b82:	3284      	adds	r2, #132	; 0x84
 8007b84:	f043 0301 	orr.w	r3, r3, #1
 8007b88:	6013      	str	r3, [r2, #0]
}
 8007b8a:	bf00      	nop
 8007b8c:	3724      	adds	r7, #36	; 0x24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	fffff8f8 	.word	0xfffff8f8
 8007b9c:	fffff800 	.word	0xfffff800

08007ba0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ba4:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a04      	ldr	r2, [pc, #16]	; (8007bbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bae:	6013      	str	r3, [r2, #0]
}
 8007bb0:	bf00      	nop
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	40007000 	.word	0x40007000

08007bc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007bca:	4b23      	ldr	r3, [pc, #140]	; (8007c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bce:	4a22      	ldr	r2, [pc, #136]	; (8007c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8007bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8007bd6:	4b20      	ldr	r3, [pc, #128]	; (8007c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007be2:	4b1e      	ldr	r3, [pc, #120]	; (8007c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a1d      	ldr	r2, [pc, #116]	; (8007c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007bee:	f7fd f9a7 	bl	8004f40 <HAL_GetTick>
 8007bf2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007bf4:	e009      	b.n	8007c0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007bf6:	f7fd f9a3 	bl	8004f40 <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c04:	d901      	bls.n	8007c0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e022      	b.n	8007c50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007c0a:	4b14      	ldr	r3, [pc, #80]	; (8007c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c16:	d1ee      	bne.n	8007bf6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007c18:	4b10      	ldr	r3, [pc, #64]	; (8007c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a0f      	ldr	r2, [pc, #60]	; (8007c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c24:	f7fd f98c 	bl	8004f40 <HAL_GetTick>
 8007c28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007c2a:	e009      	b.n	8007c40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007c2c:	f7fd f988 	bl	8004f40 <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c3a:	d901      	bls.n	8007c40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e007      	b.n	8007c50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007c40:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c4c:	d1ee      	bne.n	8007c2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	40023800 	.word	0x40023800
 8007c5c:	40007000 	.word	0x40007000

08007c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e291      	b.n	800819a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 8087 	beq.w	8007d92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c84:	4b96      	ldr	r3, [pc, #600]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 030c 	and.w	r3, r3, #12
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d00c      	beq.n	8007caa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c90:	4b93      	ldr	r3, [pc, #588]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f003 030c 	and.w	r3, r3, #12
 8007c98:	2b08      	cmp	r3, #8
 8007c9a:	d112      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x62>
 8007c9c:	4b90      	ldr	r3, [pc, #576]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ca8:	d10b      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007caa:	4b8d      	ldr	r3, [pc, #564]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d06c      	beq.n	8007d90 <HAL_RCC_OscConfig+0x130>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d168      	bne.n	8007d90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e26b      	b.n	800819a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cca:	d106      	bne.n	8007cda <HAL_RCC_OscConfig+0x7a>
 8007ccc:	4b84      	ldr	r3, [pc, #528]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a83      	ldr	r2, [pc, #524]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	e02e      	b.n	8007d38 <HAL_RCC_OscConfig+0xd8>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10c      	bne.n	8007cfc <HAL_RCC_OscConfig+0x9c>
 8007ce2:	4b7f      	ldr	r3, [pc, #508]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a7e      	ldr	r2, [pc, #504]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	4b7c      	ldr	r3, [pc, #496]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a7b      	ldr	r2, [pc, #492]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	e01d      	b.n	8007d38 <HAL_RCC_OscConfig+0xd8>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d04:	d10c      	bne.n	8007d20 <HAL_RCC_OscConfig+0xc0>
 8007d06:	4b76      	ldr	r3, [pc, #472]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a75      	ldr	r2, [pc, #468]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	4b73      	ldr	r3, [pc, #460]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a72      	ldr	r2, [pc, #456]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	e00b      	b.n	8007d38 <HAL_RCC_OscConfig+0xd8>
 8007d20:	4b6f      	ldr	r3, [pc, #444]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a6e      	ldr	r2, [pc, #440]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	4b6c      	ldr	r3, [pc, #432]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a6b      	ldr	r2, [pc, #428]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d013      	beq.n	8007d68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d40:	f7fd f8fe 	bl	8004f40 <HAL_GetTick>
 8007d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d46:	e008      	b.n	8007d5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d48:	f7fd f8fa 	bl	8004f40 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b64      	cmp	r3, #100	; 0x64
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e21f      	b.n	800819a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d5a:	4b61      	ldr	r3, [pc, #388]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0f0      	beq.n	8007d48 <HAL_RCC_OscConfig+0xe8>
 8007d66:	e014      	b.n	8007d92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d68:	f7fd f8ea 	bl	8004f40 <HAL_GetTick>
 8007d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d6e:	e008      	b.n	8007d82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d70:	f7fd f8e6 	bl	8004f40 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	2b64      	cmp	r3, #100	; 0x64
 8007d7c:	d901      	bls.n	8007d82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e20b      	b.n	800819a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d82:	4b57      	ldr	r3, [pc, #348]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1f0      	bne.n	8007d70 <HAL_RCC_OscConfig+0x110>
 8007d8e:	e000      	b.n	8007d92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d069      	beq.n	8007e72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d9e:	4b50      	ldr	r3, [pc, #320]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f003 030c 	and.w	r3, r3, #12
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00b      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007daa:	4b4d      	ldr	r3, [pc, #308]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 030c 	and.w	r3, r3, #12
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d11c      	bne.n	8007df0 <HAL_RCC_OscConfig+0x190>
 8007db6:	4b4a      	ldr	r3, [pc, #296]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d116      	bne.n	8007df0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dc2:	4b47      	ldr	r3, [pc, #284]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d005      	beq.n	8007dda <HAL_RCC_OscConfig+0x17a>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d001      	beq.n	8007dda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e1df      	b.n	800819a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dda:	4b41      	ldr	r3, [pc, #260]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	00db      	lsls	r3, r3, #3
 8007de8:	493d      	ldr	r1, [pc, #244]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dee:	e040      	b.n	8007e72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d023      	beq.n	8007e40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007df8:	4b39      	ldr	r3, [pc, #228]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a38      	ldr	r2, [pc, #224]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007dfe:	f043 0301 	orr.w	r3, r3, #1
 8007e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e04:	f7fd f89c 	bl	8004f40 <HAL_GetTick>
 8007e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e0a:	e008      	b.n	8007e1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e0c:	f7fd f898 	bl	8004f40 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e1bd      	b.n	800819a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e1e:	4b30      	ldr	r3, [pc, #192]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0302 	and.w	r3, r3, #2
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0f0      	beq.n	8007e0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e2a:	4b2d      	ldr	r3, [pc, #180]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	4929      	ldr	r1, [pc, #164]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	600b      	str	r3, [r1, #0]
 8007e3e:	e018      	b.n	8007e72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e40:	4b27      	ldr	r3, [pc, #156]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a26      	ldr	r2, [pc, #152]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007e46:	f023 0301 	bic.w	r3, r3, #1
 8007e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e4c:	f7fd f878 	bl	8004f40 <HAL_GetTick>
 8007e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e52:	e008      	b.n	8007e66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e54:	f7fd f874 	bl	8004f40 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d901      	bls.n	8007e66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e199      	b.n	800819a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e66:	4b1e      	ldr	r3, [pc, #120]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1f0      	bne.n	8007e54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0308 	and.w	r3, r3, #8
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d038      	beq.n	8007ef0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d019      	beq.n	8007eba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e86:	4b16      	ldr	r3, [pc, #88]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e8a:	4a15      	ldr	r2, [pc, #84]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007e8c:	f043 0301 	orr.w	r3, r3, #1
 8007e90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e92:	f7fd f855 	bl	8004f40 <HAL_GetTick>
 8007e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e98:	e008      	b.n	8007eac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e9a:	f7fd f851 	bl	8004f40 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d901      	bls.n	8007eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e176      	b.n	800819a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eac:	4b0c      	ldr	r3, [pc, #48]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eb0:	f003 0302 	and.w	r3, r3, #2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0f0      	beq.n	8007e9a <HAL_RCC_OscConfig+0x23a>
 8007eb8:	e01a      	b.n	8007ef0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007eba:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ebe:	4a08      	ldr	r2, [pc, #32]	; (8007ee0 <HAL_RCC_OscConfig+0x280>)
 8007ec0:	f023 0301 	bic.w	r3, r3, #1
 8007ec4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ec6:	f7fd f83b 	bl	8004f40 <HAL_GetTick>
 8007eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ecc:	e00a      	b.n	8007ee4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ece:	f7fd f837 	bl	8004f40 <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d903      	bls.n	8007ee4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e15c      	b.n	800819a <HAL_RCC_OscConfig+0x53a>
 8007ee0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ee4:	4b91      	ldr	r3, [pc, #580]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ee8:	f003 0302 	and.w	r3, r3, #2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1ee      	bne.n	8007ece <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0304 	and.w	r3, r3, #4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 80a4 	beq.w	8008046 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007efe:	4b8b      	ldr	r3, [pc, #556]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10d      	bne.n	8007f26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f0a:	4b88      	ldr	r3, [pc, #544]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	4a87      	ldr	r2, [pc, #540]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f14:	6413      	str	r3, [r2, #64]	; 0x40
 8007f16:	4b85      	ldr	r3, [pc, #532]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f1e:	60bb      	str	r3, [r7, #8]
 8007f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f22:	2301      	movs	r3, #1
 8007f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f26:	4b82      	ldr	r3, [pc, #520]	; (8008130 <HAL_RCC_OscConfig+0x4d0>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d118      	bne.n	8007f64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007f32:	4b7f      	ldr	r3, [pc, #508]	; (8008130 <HAL_RCC_OscConfig+0x4d0>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a7e      	ldr	r2, [pc, #504]	; (8008130 <HAL_RCC_OscConfig+0x4d0>)
 8007f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f3e:	f7fc ffff 	bl	8004f40 <HAL_GetTick>
 8007f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f44:	e008      	b.n	8007f58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f46:	f7fc fffb 	bl	8004f40 <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	2b64      	cmp	r3, #100	; 0x64
 8007f52:	d901      	bls.n	8007f58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e120      	b.n	800819a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f58:	4b75      	ldr	r3, [pc, #468]	; (8008130 <HAL_RCC_OscConfig+0x4d0>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d0f0      	beq.n	8007f46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d106      	bne.n	8007f7a <HAL_RCC_OscConfig+0x31a>
 8007f6c:	4b6f      	ldr	r3, [pc, #444]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f70:	4a6e      	ldr	r2, [pc, #440]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007f72:	f043 0301 	orr.w	r3, r3, #1
 8007f76:	6713      	str	r3, [r2, #112]	; 0x70
 8007f78:	e02d      	b.n	8007fd6 <HAL_RCC_OscConfig+0x376>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10c      	bne.n	8007f9c <HAL_RCC_OscConfig+0x33c>
 8007f82:	4b6a      	ldr	r3, [pc, #424]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f86:	4a69      	ldr	r2, [pc, #420]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007f88:	f023 0301 	bic.w	r3, r3, #1
 8007f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8007f8e:	4b67      	ldr	r3, [pc, #412]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f92:	4a66      	ldr	r2, [pc, #408]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007f94:	f023 0304 	bic.w	r3, r3, #4
 8007f98:	6713      	str	r3, [r2, #112]	; 0x70
 8007f9a:	e01c      	b.n	8007fd6 <HAL_RCC_OscConfig+0x376>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	2b05      	cmp	r3, #5
 8007fa2:	d10c      	bne.n	8007fbe <HAL_RCC_OscConfig+0x35e>
 8007fa4:	4b61      	ldr	r3, [pc, #388]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa8:	4a60      	ldr	r2, [pc, #384]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007faa:	f043 0304 	orr.w	r3, r3, #4
 8007fae:	6713      	str	r3, [r2, #112]	; 0x70
 8007fb0:	4b5e      	ldr	r3, [pc, #376]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb4:	4a5d      	ldr	r2, [pc, #372]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007fb6:	f043 0301 	orr.w	r3, r3, #1
 8007fba:	6713      	str	r3, [r2, #112]	; 0x70
 8007fbc:	e00b      	b.n	8007fd6 <HAL_RCC_OscConfig+0x376>
 8007fbe:	4b5b      	ldr	r3, [pc, #364]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	4a5a      	ldr	r2, [pc, #360]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007fc4:	f023 0301 	bic.w	r3, r3, #1
 8007fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8007fca:	4b58      	ldr	r3, [pc, #352]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fce:	4a57      	ldr	r2, [pc, #348]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007fd0:	f023 0304 	bic.w	r3, r3, #4
 8007fd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d015      	beq.n	800800a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fde:	f7fc ffaf 	bl	8004f40 <HAL_GetTick>
 8007fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fe4:	e00a      	b.n	8007ffc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fe6:	f7fc ffab 	bl	8004f40 <HAL_GetTick>
 8007fea:	4602      	mov	r2, r0
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d901      	bls.n	8007ffc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e0ce      	b.n	800819a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ffc:	4b4b      	ldr	r3, [pc, #300]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8007ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008000:	f003 0302 	and.w	r3, r3, #2
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0ee      	beq.n	8007fe6 <HAL_RCC_OscConfig+0x386>
 8008008:	e014      	b.n	8008034 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800800a:	f7fc ff99 	bl	8004f40 <HAL_GetTick>
 800800e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008010:	e00a      	b.n	8008028 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008012:	f7fc ff95 	bl	8004f40 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008020:	4293      	cmp	r3, r2
 8008022:	d901      	bls.n	8008028 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e0b8      	b.n	800819a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008028:	4b40      	ldr	r3, [pc, #256]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 800802a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802c:	f003 0302 	and.w	r3, r3, #2
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1ee      	bne.n	8008012 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d105      	bne.n	8008046 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800803a:	4b3c      	ldr	r3, [pc, #240]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 800803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803e:	4a3b      	ldr	r2, [pc, #236]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8008040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008044:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 80a4 	beq.w	8008198 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008050:	4b36      	ldr	r3, [pc, #216]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f003 030c 	and.w	r3, r3, #12
 8008058:	2b08      	cmp	r3, #8
 800805a:	d06b      	beq.n	8008134 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d149      	bne.n	80080f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008064:	4b31      	ldr	r3, [pc, #196]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a30      	ldr	r2, [pc, #192]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 800806a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800806e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008070:	f7fc ff66 	bl	8004f40 <HAL_GetTick>
 8008074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008078:	f7fc ff62 	bl	8004f40 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e087      	b.n	800819a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800808a:	4b28      	ldr	r3, [pc, #160]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f0      	bne.n	8008078 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	69da      	ldr	r2, [r3, #28]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	431a      	orrs	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	019b      	lsls	r3, r3, #6
 80080a6:	431a      	orrs	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ac:	085b      	lsrs	r3, r3, #1
 80080ae:	3b01      	subs	r3, #1
 80080b0:	041b      	lsls	r3, r3, #16
 80080b2:	431a      	orrs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	061b      	lsls	r3, r3, #24
 80080ba:	4313      	orrs	r3, r2
 80080bc:	4a1b      	ldr	r2, [pc, #108]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 80080be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080c4:	4b19      	ldr	r3, [pc, #100]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a18      	ldr	r2, [pc, #96]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 80080ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d0:	f7fc ff36 	bl	8004f40 <HAL_GetTick>
 80080d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080d6:	e008      	b.n	80080ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080d8:	f7fc ff32 	bl	8004f40 <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e057      	b.n	800819a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080ea:	4b10      	ldr	r3, [pc, #64]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d0f0      	beq.n	80080d8 <HAL_RCC_OscConfig+0x478>
 80080f6:	e04f      	b.n	8008198 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080f8:	4b0c      	ldr	r3, [pc, #48]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a0b      	ldr	r2, [pc, #44]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 80080fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008104:	f7fc ff1c 	bl	8004f40 <HAL_GetTick>
 8008108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800810a:	e008      	b.n	800811e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800810c:	f7fc ff18 	bl	8004f40 <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	2b02      	cmp	r3, #2
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e03d      	b.n	800819a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800811e:	4b03      	ldr	r3, [pc, #12]	; (800812c <HAL_RCC_OscConfig+0x4cc>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f0      	bne.n	800810c <HAL_RCC_OscConfig+0x4ac>
 800812a:	e035      	b.n	8008198 <HAL_RCC_OscConfig+0x538>
 800812c:	40023800 	.word	0x40023800
 8008130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008134:	4b1b      	ldr	r3, [pc, #108]	; (80081a4 <HAL_RCC_OscConfig+0x544>)
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d028      	beq.n	8008194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800814c:	429a      	cmp	r2, r3
 800814e:	d121      	bne.n	8008194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800815a:	429a      	cmp	r2, r3
 800815c:	d11a      	bne.n	8008194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008164:	4013      	ands	r3, r2
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800816a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800816c:	4293      	cmp	r3, r2
 800816e:	d111      	bne.n	8008194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817a:	085b      	lsrs	r3, r3, #1
 800817c:	3b01      	subs	r3, #1
 800817e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008180:	429a      	cmp	r2, r3
 8008182:	d107      	bne.n	8008194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008190:	429a      	cmp	r2, r3
 8008192:	d001      	beq.n	8008198 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e000      	b.n	800819a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	40023800 	.word	0x40023800

080081a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e0d0      	b.n	8008362 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081c0:	4b6a      	ldr	r3, [pc, #424]	; (800836c <HAL_RCC_ClockConfig+0x1c4>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 030f 	and.w	r3, r3, #15
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d910      	bls.n	80081f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ce:	4b67      	ldr	r3, [pc, #412]	; (800836c <HAL_RCC_ClockConfig+0x1c4>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f023 020f 	bic.w	r2, r3, #15
 80081d6:	4965      	ldr	r1, [pc, #404]	; (800836c <HAL_RCC_ClockConfig+0x1c4>)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	4313      	orrs	r3, r2
 80081dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081de:	4b63      	ldr	r3, [pc, #396]	; (800836c <HAL_RCC_ClockConfig+0x1c4>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 030f 	and.w	r3, r3, #15
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d001      	beq.n	80081f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e0b8      	b.n	8008362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d020      	beq.n	800823e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0304 	and.w	r3, r3, #4
 8008204:	2b00      	cmp	r3, #0
 8008206:	d005      	beq.n	8008214 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008208:	4b59      	ldr	r3, [pc, #356]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	4a58      	ldr	r2, [pc, #352]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 800820e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008212:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0308 	and.w	r3, r3, #8
 800821c:	2b00      	cmp	r3, #0
 800821e:	d005      	beq.n	800822c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008220:	4b53      	ldr	r3, [pc, #332]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	4a52      	ldr	r2, [pc, #328]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 8008226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800822a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800822c:	4b50      	ldr	r3, [pc, #320]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	494d      	ldr	r1, [pc, #308]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 800823a:	4313      	orrs	r3, r2
 800823c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d040      	beq.n	80082cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d107      	bne.n	8008262 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008252:	4b47      	ldr	r3, [pc, #284]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d115      	bne.n	800828a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e07f      	b.n	8008362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	2b02      	cmp	r3, #2
 8008268:	d107      	bne.n	800827a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800826a:	4b41      	ldr	r3, [pc, #260]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d109      	bne.n	800828a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e073      	b.n	8008362 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800827a:	4b3d      	ldr	r3, [pc, #244]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e06b      	b.n	8008362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800828a:	4b39      	ldr	r3, [pc, #228]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f023 0203 	bic.w	r2, r3, #3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	4936      	ldr	r1, [pc, #216]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 8008298:	4313      	orrs	r3, r2
 800829a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800829c:	f7fc fe50 	bl	8004f40 <HAL_GetTick>
 80082a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082a2:	e00a      	b.n	80082ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082a4:	f7fc fe4c 	bl	8004f40 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d901      	bls.n	80082ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e053      	b.n	8008362 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ba:	4b2d      	ldr	r3, [pc, #180]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f003 020c 	and.w	r2, r3, #12
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d1eb      	bne.n	80082a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082cc:	4b27      	ldr	r3, [pc, #156]	; (800836c <HAL_RCC_ClockConfig+0x1c4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 030f 	and.w	r3, r3, #15
 80082d4:	683a      	ldr	r2, [r7, #0]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d210      	bcs.n	80082fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082da:	4b24      	ldr	r3, [pc, #144]	; (800836c <HAL_RCC_ClockConfig+0x1c4>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f023 020f 	bic.w	r2, r3, #15
 80082e2:	4922      	ldr	r1, [pc, #136]	; (800836c <HAL_RCC_ClockConfig+0x1c4>)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ea:	4b20      	ldr	r3, [pc, #128]	; (800836c <HAL_RCC_ClockConfig+0x1c4>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 030f 	and.w	r3, r3, #15
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d001      	beq.n	80082fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e032      	b.n	8008362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b00      	cmp	r3, #0
 8008306:	d008      	beq.n	800831a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008308:	4b19      	ldr	r3, [pc, #100]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	4916      	ldr	r1, [pc, #88]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 8008316:	4313      	orrs	r3, r2
 8008318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0308 	and.w	r3, r3, #8
 8008322:	2b00      	cmp	r3, #0
 8008324:	d009      	beq.n	800833a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008326:	4b12      	ldr	r3, [pc, #72]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	490e      	ldr	r1, [pc, #56]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 8008336:	4313      	orrs	r3, r2
 8008338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800833a:	f000 f821 	bl	8008380 <HAL_RCC_GetSysClockFreq>
 800833e:	4601      	mov	r1, r0
 8008340:	4b0b      	ldr	r3, [pc, #44]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	091b      	lsrs	r3, r3, #4
 8008346:	f003 030f 	and.w	r3, r3, #15
 800834a:	4a0a      	ldr	r2, [pc, #40]	; (8008374 <HAL_RCC_ClockConfig+0x1cc>)
 800834c:	5cd3      	ldrb	r3, [r2, r3]
 800834e:	fa21 f303 	lsr.w	r3, r1, r3
 8008352:	4a09      	ldr	r2, [pc, #36]	; (8008378 <HAL_RCC_ClockConfig+0x1d0>)
 8008354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008356:	4b09      	ldr	r3, [pc, #36]	; (800837c <HAL_RCC_ClockConfig+0x1d4>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4618      	mov	r0, r3
 800835c:	f7fc fcca 	bl	8004cf4 <HAL_InitTick>

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	40023c00 	.word	0x40023c00
 8008370:	40023800 	.word	0x40023800
 8008374:	080106ac 	.word	0x080106ac
 8008378:	2000003c 	.word	0x2000003c
 800837c:	20000040 	.word	0x20000040

08008380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008386:	2300      	movs	r3, #0
 8008388:	607b      	str	r3, [r7, #4]
 800838a:	2300      	movs	r3, #0
 800838c:	60fb      	str	r3, [r7, #12]
 800838e:	2300      	movs	r3, #0
 8008390:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008396:	4b50      	ldr	r3, [pc, #320]	; (80084d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	f003 030c 	and.w	r3, r3, #12
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d007      	beq.n	80083b2 <HAL_RCC_GetSysClockFreq+0x32>
 80083a2:	2b08      	cmp	r3, #8
 80083a4:	d008      	beq.n	80083b8 <HAL_RCC_GetSysClockFreq+0x38>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f040 808d 	bne.w	80084c6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083ac:	4b4b      	ldr	r3, [pc, #300]	; (80084dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80083ae:	60bb      	str	r3, [r7, #8]
      break;
 80083b0:	e08c      	b.n	80084cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083b2:	4b4b      	ldr	r3, [pc, #300]	; (80084e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80083b4:	60bb      	str	r3, [r7, #8]
      break;
 80083b6:	e089      	b.n	80084cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083b8:	4b47      	ldr	r3, [pc, #284]	; (80084d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083c0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80083c2:	4b45      	ldr	r3, [pc, #276]	; (80084d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d023      	beq.n	8008416 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083ce:	4b42      	ldr	r3, [pc, #264]	; (80084d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	099b      	lsrs	r3, r3, #6
 80083d4:	f04f 0400 	mov.w	r4, #0
 80083d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80083dc:	f04f 0200 	mov.w	r2, #0
 80083e0:	ea03 0501 	and.w	r5, r3, r1
 80083e4:	ea04 0602 	and.w	r6, r4, r2
 80083e8:	4a3d      	ldr	r2, [pc, #244]	; (80084e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80083ea:	fb02 f106 	mul.w	r1, r2, r6
 80083ee:	2200      	movs	r2, #0
 80083f0:	fb02 f205 	mul.w	r2, r2, r5
 80083f4:	440a      	add	r2, r1
 80083f6:	493a      	ldr	r1, [pc, #232]	; (80084e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80083f8:	fba5 0101 	umull	r0, r1, r5, r1
 80083fc:	1853      	adds	r3, r2, r1
 80083fe:	4619      	mov	r1, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f04f 0400 	mov.w	r4, #0
 8008406:	461a      	mov	r2, r3
 8008408:	4623      	mov	r3, r4
 800840a:	f7f7 ff51 	bl	80002b0 <__aeabi_uldivmod>
 800840e:	4603      	mov	r3, r0
 8008410:	460c      	mov	r4, r1
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	e049      	b.n	80084aa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008416:	4b30      	ldr	r3, [pc, #192]	; (80084d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	099b      	lsrs	r3, r3, #6
 800841c:	f04f 0400 	mov.w	r4, #0
 8008420:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008424:	f04f 0200 	mov.w	r2, #0
 8008428:	ea03 0501 	and.w	r5, r3, r1
 800842c:	ea04 0602 	and.w	r6, r4, r2
 8008430:	4629      	mov	r1, r5
 8008432:	4632      	mov	r2, r6
 8008434:	f04f 0300 	mov.w	r3, #0
 8008438:	f04f 0400 	mov.w	r4, #0
 800843c:	0154      	lsls	r4, r2, #5
 800843e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008442:	014b      	lsls	r3, r1, #5
 8008444:	4619      	mov	r1, r3
 8008446:	4622      	mov	r2, r4
 8008448:	1b49      	subs	r1, r1, r5
 800844a:	eb62 0206 	sbc.w	r2, r2, r6
 800844e:	f04f 0300 	mov.w	r3, #0
 8008452:	f04f 0400 	mov.w	r4, #0
 8008456:	0194      	lsls	r4, r2, #6
 8008458:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800845c:	018b      	lsls	r3, r1, #6
 800845e:	1a5b      	subs	r3, r3, r1
 8008460:	eb64 0402 	sbc.w	r4, r4, r2
 8008464:	f04f 0100 	mov.w	r1, #0
 8008468:	f04f 0200 	mov.w	r2, #0
 800846c:	00e2      	lsls	r2, r4, #3
 800846e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008472:	00d9      	lsls	r1, r3, #3
 8008474:	460b      	mov	r3, r1
 8008476:	4614      	mov	r4, r2
 8008478:	195b      	adds	r3, r3, r5
 800847a:	eb44 0406 	adc.w	r4, r4, r6
 800847e:	f04f 0100 	mov.w	r1, #0
 8008482:	f04f 0200 	mov.w	r2, #0
 8008486:	02a2      	lsls	r2, r4, #10
 8008488:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800848c:	0299      	lsls	r1, r3, #10
 800848e:	460b      	mov	r3, r1
 8008490:	4614      	mov	r4, r2
 8008492:	4618      	mov	r0, r3
 8008494:	4621      	mov	r1, r4
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f04f 0400 	mov.w	r4, #0
 800849c:	461a      	mov	r2, r3
 800849e:	4623      	mov	r3, r4
 80084a0:	f7f7 ff06 	bl	80002b0 <__aeabi_uldivmod>
 80084a4:	4603      	mov	r3, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80084aa:	4b0b      	ldr	r3, [pc, #44]	; (80084d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	0c1b      	lsrs	r3, r3, #16
 80084b0:	f003 0303 	and.w	r3, r3, #3
 80084b4:	3301      	adds	r3, #1
 80084b6:	005b      	lsls	r3, r3, #1
 80084b8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c2:	60bb      	str	r3, [r7, #8]
      break;
 80084c4:	e002      	b.n	80084cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80084c6:	4b05      	ldr	r3, [pc, #20]	; (80084dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80084c8:	60bb      	str	r3, [r7, #8]
      break;
 80084ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80084cc:	68bb      	ldr	r3, [r7, #8]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d6:	bf00      	nop
 80084d8:	40023800 	.word	0x40023800
 80084dc:	00f42400 	.word	0x00f42400
 80084e0:	017d7840 	.word	0x017d7840

080084e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084e4:	b480      	push	{r7}
 80084e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084e8:	4b03      	ldr	r3, [pc, #12]	; (80084f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80084ea:	681b      	ldr	r3, [r3, #0]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	2000003c 	.word	0x2000003c

080084fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008500:	f7ff fff0 	bl	80084e4 <HAL_RCC_GetHCLKFreq>
 8008504:	4601      	mov	r1, r0
 8008506:	4b05      	ldr	r3, [pc, #20]	; (800851c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	0a9b      	lsrs	r3, r3, #10
 800850c:	f003 0307 	and.w	r3, r3, #7
 8008510:	4a03      	ldr	r2, [pc, #12]	; (8008520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008512:	5cd3      	ldrb	r3, [r2, r3]
 8008514:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008518:	4618      	mov	r0, r3
 800851a:	bd80      	pop	{r7, pc}
 800851c:	40023800 	.word	0x40023800
 8008520:	080106bc 	.word	0x080106bc

08008524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008528:	f7ff ffdc 	bl	80084e4 <HAL_RCC_GetHCLKFreq>
 800852c:	4601      	mov	r1, r0
 800852e:	4b05      	ldr	r3, [pc, #20]	; (8008544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	0b5b      	lsrs	r3, r3, #13
 8008534:	f003 0307 	and.w	r3, r3, #7
 8008538:	4a03      	ldr	r2, [pc, #12]	; (8008548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800853a:	5cd3      	ldrb	r3, [r2, r3]
 800853c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008540:	4618      	mov	r0, r3
 8008542:	bd80      	pop	{r7, pc}
 8008544:	40023800 	.word	0x40023800
 8008548:	080106bc 	.word	0x080106bc

0800854c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	220f      	movs	r2, #15
 800855a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800855c:	4b12      	ldr	r3, [pc, #72]	; (80085a8 <HAL_RCC_GetClockConfig+0x5c>)
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f003 0203 	and.w	r2, r3, #3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008568:	4b0f      	ldr	r3, [pc, #60]	; (80085a8 <HAL_RCC_GetClockConfig+0x5c>)
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008574:	4b0c      	ldr	r3, [pc, #48]	; (80085a8 <HAL_RCC_GetClockConfig+0x5c>)
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008580:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <HAL_RCC_GetClockConfig+0x5c>)
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	08db      	lsrs	r3, r3, #3
 8008586:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800858e:	4b07      	ldr	r3, [pc, #28]	; (80085ac <HAL_RCC_GetClockConfig+0x60>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 020f 	and.w	r2, r3, #15
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	601a      	str	r2, [r3, #0]
}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	40023800 	.word	0x40023800
 80085ac:	40023c00 	.word	0x40023c00

080085b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80085c8:	2300      	movs	r3, #0
 80085ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d012      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80085d8:	4b69      	ldr	r3, [pc, #420]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	4a68      	ldr	r2, [pc, #416]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80085e2:	6093      	str	r3, [r2, #8]
 80085e4:	4b66      	ldr	r3, [pc, #408]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085e6:	689a      	ldr	r2, [r3, #8]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ec:	4964      	ldr	r1, [pc, #400]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80085fa:	2301      	movs	r3, #1
 80085fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d017      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800860a:	4b5d      	ldr	r3, [pc, #372]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800860c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008610:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008618:	4959      	ldr	r1, [pc, #356]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800861a:	4313      	orrs	r3, r2
 800861c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008628:	d101      	bne.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800862a:	2301      	movs	r3, #1
 800862c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008632:	2b00      	cmp	r3, #0
 8008634:	d101      	bne.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008636:	2301      	movs	r3, #1
 8008638:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d017      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008646:	4b4e      	ldr	r3, [pc, #312]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800864c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008654:	494a      	ldr	r1, [pc, #296]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008656:	4313      	orrs	r3, r2
 8008658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008664:	d101      	bne.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008666:	2301      	movs	r3, #1
 8008668:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008672:	2301      	movs	r3, #1
 8008674:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008682:	2301      	movs	r3, #1
 8008684:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0320 	and.w	r3, r3, #32
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 808b 	beq.w	80087aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008694:	4b3a      	ldr	r3, [pc, #232]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008698:	4a39      	ldr	r2, [pc, #228]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800869a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800869e:	6413      	str	r3, [r2, #64]	; 0x40
 80086a0:	4b37      	ldr	r3, [pc, #220]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086a8:	60bb      	str	r3, [r7, #8]
 80086aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80086ac:	4b35      	ldr	r3, [pc, #212]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a34      	ldr	r2, [pc, #208]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086b8:	f7fc fc42 	bl	8004f40 <HAL_GetTick>
 80086bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80086be:	e008      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086c0:	f7fc fc3e 	bl	8004f40 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	2b64      	cmp	r3, #100	; 0x64
 80086cc:	d901      	bls.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e355      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80086d2:	4b2c      	ldr	r3, [pc, #176]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0f0      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086de:	4b28      	ldr	r3, [pc, #160]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d035      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d02e      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086fc:	4b20      	ldr	r3, [pc, #128]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008704:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008706:	4b1e      	ldr	r3, [pc, #120]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800870a:	4a1d      	ldr	r2, [pc, #116]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800870c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008710:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008712:	4b1b      	ldr	r3, [pc, #108]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008716:	4a1a      	ldr	r2, [pc, #104]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800871c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800871e:	4a18      	ldr	r2, [pc, #96]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008724:	4b16      	ldr	r3, [pc, #88]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008728:	f003 0301 	and.w	r3, r3, #1
 800872c:	2b01      	cmp	r3, #1
 800872e:	d114      	bne.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008730:	f7fc fc06 	bl	8004f40 <HAL_GetTick>
 8008734:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008736:	e00a      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008738:	f7fc fc02 	bl	8004f40 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	f241 3288 	movw	r2, #5000	; 0x1388
 8008746:	4293      	cmp	r3, r2
 8008748:	d901      	bls.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e317      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800874e:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0ee      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008766:	d111      	bne.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008768:	4b05      	ldr	r3, [pc, #20]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008774:	4b04      	ldr	r3, [pc, #16]	; (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008776:	400b      	ands	r3, r1
 8008778:	4901      	ldr	r1, [pc, #4]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800877a:	4313      	orrs	r3, r2
 800877c:	608b      	str	r3, [r1, #8]
 800877e:	e00b      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008780:	40023800 	.word	0x40023800
 8008784:	40007000 	.word	0x40007000
 8008788:	0ffffcff 	.word	0x0ffffcff
 800878c:	4bb0      	ldr	r3, [pc, #704]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	4aaf      	ldr	r2, [pc, #700]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008792:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008796:	6093      	str	r3, [r2, #8]
 8008798:	4bad      	ldr	r3, [pc, #692]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800879a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087a4:	49aa      	ldr	r1, [pc, #680]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0310 	and.w	r3, r3, #16
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d010      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087b6:	4ba6      	ldr	r3, [pc, #664]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087bc:	4aa4      	ldr	r2, [pc, #656]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80087c6:	4ba2      	ldr	r3, [pc, #648]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d0:	499f      	ldr	r1, [pc, #636]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00a      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80087e4:	4b9a      	ldr	r3, [pc, #616]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087f2:	4997      	ldr	r1, [pc, #604]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008806:	4b92      	ldr	r3, [pc, #584]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800880c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008814:	498e      	ldr	r1, [pc, #568]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008816:	4313      	orrs	r3, r2
 8008818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00a      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008828:	4b89      	ldr	r3, [pc, #548]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800882a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800882e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008836:	4986      	ldr	r1, [pc, #536]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008838:	4313      	orrs	r3, r2
 800883a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800884a:	4b81      	ldr	r3, [pc, #516]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800884c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008850:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008858:	497d      	ldr	r1, [pc, #500]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800885a:	4313      	orrs	r3, r2
 800885c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00a      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800886c:	4b78      	ldr	r3, [pc, #480]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800886e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008872:	f023 0203 	bic.w	r2, r3, #3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800887a:	4975      	ldr	r1, [pc, #468]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800887c:	4313      	orrs	r3, r2
 800887e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800888e:	4b70      	ldr	r3, [pc, #448]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008894:	f023 020c 	bic.w	r2, r3, #12
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800889c:	496c      	ldr	r1, [pc, #432]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00a      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80088b0:	4b67      	ldr	r3, [pc, #412]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80088b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088be:	4964      	ldr	r1, [pc, #400]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00a      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80088d2:	4b5f      	ldr	r3, [pc, #380]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80088d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e0:	495b      	ldr	r1, [pc, #364]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00a      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80088f4:	4b56      	ldr	r3, [pc, #344]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80088f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008902:	4953      	ldr	r1, [pc, #332]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008904:	4313      	orrs	r3, r2
 8008906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00a      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008916:	4b4e      	ldr	r3, [pc, #312]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800891c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008924:	494a      	ldr	r1, [pc, #296]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008926:	4313      	orrs	r3, r2
 8008928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00a      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008938:	4b45      	ldr	r3, [pc, #276]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800893a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800893e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008946:	4942      	ldr	r1, [pc, #264]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008948:	4313      	orrs	r3, r2
 800894a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00a      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800895a:	4b3d      	ldr	r3, [pc, #244]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800895c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008960:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008968:	4939      	ldr	r1, [pc, #228]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800896a:	4313      	orrs	r3, r2
 800896c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00a      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800897c:	4b34      	ldr	r3, [pc, #208]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800897e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008982:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800898a:	4931      	ldr	r1, [pc, #196]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800898c:	4313      	orrs	r3, r2
 800898e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d011      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800899e:	4b2c      	ldr	r3, [pc, #176]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80089a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ac:	4928      	ldr	r1, [pc, #160]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80089ae:	4313      	orrs	r3, r2
 80089b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089bc:	d101      	bne.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80089be:	2301      	movs	r3, #1
 80089c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0308 	and.w	r3, r3, #8
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80089ce:	2301      	movs	r3, #1
 80089d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00a      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089de:	4b1c      	ldr	r3, [pc, #112]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80089e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089ec:	4918      	ldr	r1, [pc, #96]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00b      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008a00:	4b13      	ldr	r3, [pc, #76]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a10:	490f      	ldr	r1, [pc, #60]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d005      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a26:	f040 80d8 	bne.w	8008bda <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008a2a:	4b09      	ldr	r3, [pc, #36]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a08      	ldr	r2, [pc, #32]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008a30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a36:	f7fc fa83 	bl	8004f40 <HAL_GetTick>
 8008a3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a3c:	e00a      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a3e:	f7fc fa7f 	bl	8004f40 <HAL_GetTick>
 8008a42:	4602      	mov	r2, r0
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	2b64      	cmp	r3, #100	; 0x64
 8008a4a:	d903      	bls.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e196      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008a50:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a54:	4b6c      	ldr	r3, [pc, #432]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1ee      	bne.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d021      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d11d      	bne.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008a74:	4b64      	ldr	r3, [pc, #400]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a7a:	0c1b      	lsrs	r3, r3, #16
 8008a7c:	f003 0303 	and.w	r3, r3, #3
 8008a80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008a82:	4b61      	ldr	r3, [pc, #388]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a88:	0e1b      	lsrs	r3, r3, #24
 8008a8a:	f003 030f 	and.w	r3, r3, #15
 8008a8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	019a      	lsls	r2, r3, #6
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	041b      	lsls	r3, r3, #16
 8008a9a:	431a      	orrs	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	061b      	lsls	r3, r3, #24
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	071b      	lsls	r3, r3, #28
 8008aa8:	4957      	ldr	r1, [pc, #348]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d004      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ac4:	d00a      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d02e      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ada:	d129      	bne.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008adc:	4b4a      	ldr	r3, [pc, #296]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ae2:	0c1b      	lsrs	r3, r3, #16
 8008ae4:	f003 0303 	and.w	r3, r3, #3
 8008ae8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008aea:	4b47      	ldr	r3, [pc, #284]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008af0:	0f1b      	lsrs	r3, r3, #28
 8008af2:	f003 0307 	and.w	r3, r3, #7
 8008af6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	019a      	lsls	r2, r3, #6
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	041b      	lsls	r3, r3, #16
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	061b      	lsls	r3, r3, #24
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	071b      	lsls	r3, r3, #28
 8008b10:	493d      	ldr	r1, [pc, #244]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008b18:	4b3b      	ldr	r3, [pc, #236]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b1e:	f023 021f 	bic.w	r2, r3, #31
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	3b01      	subs	r3, #1
 8008b28:	4937      	ldr	r1, [pc, #220]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d01d      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008b3c:	4b32      	ldr	r3, [pc, #200]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b42:	0e1b      	lsrs	r3, r3, #24
 8008b44:	f003 030f 	and.w	r3, r3, #15
 8008b48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008b4a:	4b2f      	ldr	r3, [pc, #188]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b50:	0f1b      	lsrs	r3, r3, #28
 8008b52:	f003 0307 	and.w	r3, r3, #7
 8008b56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	019a      	lsls	r2, r3, #6
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	041b      	lsls	r3, r3, #16
 8008b64:	431a      	orrs	r2, r3
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	061b      	lsls	r3, r3, #24
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	071b      	lsls	r3, r3, #28
 8008b70:	4925      	ldr	r1, [pc, #148]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008b72:	4313      	orrs	r3, r2
 8008b74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d011      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	019a      	lsls	r2, r3, #6
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	041b      	lsls	r3, r3, #16
 8008b90:	431a      	orrs	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	061b      	lsls	r3, r3, #24
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	071b      	lsls	r3, r3, #28
 8008ba0:	4919      	ldr	r1, [pc, #100]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008ba8:	4b17      	ldr	r3, [pc, #92]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a16      	ldr	r2, [pc, #88]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008bae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bb4:	f7fc f9c4 	bl	8004f40 <HAL_GetTick>
 8008bb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008bba:	e008      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008bbc:	f7fc f9c0 	bl	8004f40 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b64      	cmp	r3, #100	; 0x64
 8008bc8:	d901      	bls.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e0d7      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008bce:	4b0e      	ldr	r3, [pc, #56]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0f0      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	f040 80cd 	bne.w	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008be2:	4b09      	ldr	r3, [pc, #36]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a08      	ldr	r2, [pc, #32]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bee:	f7fc f9a7 	bl	8004f40 <HAL_GetTick>
 8008bf2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008bf4:	e00a      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008bf6:	f7fc f9a3 	bl	8004f40 <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b64      	cmp	r3, #100	; 0x64
 8008c02:	d903      	bls.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e0ba      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008c08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008c0c:	4b5e      	ldr	r3, [pc, #376]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c18:	d0ed      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d009      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d02e      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d12a      	bne.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008c42:	4b51      	ldr	r3, [pc, #324]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c48:	0c1b      	lsrs	r3, r3, #16
 8008c4a:	f003 0303 	and.w	r3, r3, #3
 8008c4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008c50:	4b4d      	ldr	r3, [pc, #308]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c56:	0f1b      	lsrs	r3, r3, #28
 8008c58:	f003 0307 	and.w	r3, r3, #7
 8008c5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	019a      	lsls	r2, r3, #6
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	041b      	lsls	r3, r3, #16
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	061b      	lsls	r3, r3, #24
 8008c70:	431a      	orrs	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	071b      	lsls	r3, r3, #28
 8008c76:	4944      	ldr	r1, [pc, #272]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008c7e:	4b42      	ldr	r3, [pc, #264]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	021b      	lsls	r3, r3, #8
 8008c90:	493d      	ldr	r1, [pc, #244]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d022      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cac:	d11d      	bne.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008cae:	4b36      	ldr	r3, [pc, #216]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cb4:	0e1b      	lsrs	r3, r3, #24
 8008cb6:	f003 030f 	and.w	r3, r3, #15
 8008cba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008cbc:	4b32      	ldr	r3, [pc, #200]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc2:	0f1b      	lsrs	r3, r3, #28
 8008cc4:	f003 0307 	and.w	r3, r3, #7
 8008cc8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	019a      	lsls	r2, r3, #6
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	041b      	lsls	r3, r3, #16
 8008cd6:	431a      	orrs	r2, r3
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	061b      	lsls	r3, r3, #24
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	071b      	lsls	r3, r3, #28
 8008ce2:	4929      	ldr	r1, [pc, #164]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 0308 	and.w	r3, r3, #8
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d028      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008cf6:	4b24      	ldr	r3, [pc, #144]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cfc:	0e1b      	lsrs	r3, r3, #24
 8008cfe:	f003 030f 	and.w	r3, r3, #15
 8008d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008d04:	4b20      	ldr	r3, [pc, #128]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d0a:	0c1b      	lsrs	r3, r3, #16
 8008d0c:	f003 0303 	and.w	r3, r3, #3
 8008d10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	019a      	lsls	r2, r3, #6
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	041b      	lsls	r3, r3, #16
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	061b      	lsls	r3, r3, #24
 8008d22:	431a      	orrs	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	071b      	lsls	r3, r3, #28
 8008d2a:	4917      	ldr	r1, [pc, #92]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008d32:	4b15      	ldr	r3, [pc, #84]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d40:	4911      	ldr	r1, [pc, #68]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008d42:	4313      	orrs	r3, r2
 8008d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008d48:	4b0f      	ldr	r3, [pc, #60]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a0e      	ldr	r2, [pc, #56]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d54:	f7fc f8f4 	bl	8004f40 <HAL_GetTick>
 8008d58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d5a:	e008      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008d5c:	f7fc f8f0 	bl	8004f40 <HAL_GetTick>
 8008d60:	4602      	mov	r2, r0
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	2b64      	cmp	r3, #100	; 0x64
 8008d68:	d901      	bls.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e007      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d6e:	4b06      	ldr	r3, [pc, #24]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d7a:	d1ef      	bne.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3720      	adds	r7, #32
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	40023800 	.word	0x40023800

08008d8c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d101      	bne.n	8008d9e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e01c      	b.n	8008dd8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	795b      	ldrb	r3, [r3, #5]
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d105      	bne.n	8008db4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7fb fcc0 	bl	8004734 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2202      	movs	r2, #2
 8008db8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f042 0204 	orr.w	r2, r2, #4
 8008dc8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	791b      	ldrb	r3, [r3, #4]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d101      	bne.n	8008dfa <HAL_RNG_GenerateRandomNumber+0x1a>
 8008df6:	2302      	movs	r3, #2
 8008df8:	e03d      	b.n	8008e76 <HAL_RNG_GenerateRandomNumber+0x96>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	795b      	ldrb	r3, [r3, #5]
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d12c      	bne.n	8008e64 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2202      	movs	r2, #2
 8008e0e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e10:	f7fc f896 	bl	8004f40 <HAL_GetTick>
 8008e14:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008e16:	e011      	b.n	8008e3c <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008e18:	f7fc f892 	bl	8004f40 <HAL_GetTick>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d90a      	bls.n	8008e3c <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e01c      	b.n	8008e76 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d1e6      	bne.n	8008e18 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	689a      	ldr	r2, [r3, #8]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	715a      	strb	r2, [r3, #5]
 8008e62:	e004      	b.n	8008e6e <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2204      	movs	r2, #4
 8008e68:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	711a      	strb	r2, [r3, #4]

  return status;
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
	...

08008e80 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e06b      	b.n	8008f6a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	7f5b      	ldrb	r3, [r3, #29]
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d105      	bne.n	8008ea8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7fb fc66 	bl	8004774 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	22ca      	movs	r2, #202	; 0xca
 8008eb4:	625a      	str	r2, [r3, #36]	; 0x24
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2253      	movs	r2, #83	; 0x53
 8008ebc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fb00 	bl	80094c4 <RTC_EnterInitMode>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d008      	beq.n	8008edc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	22ff      	movs	r2, #255	; 0xff
 8008ed0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2204      	movs	r2, #4
 8008ed6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e046      	b.n	8008f6a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6899      	ldr	r1, [r3, #8]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	4b23      	ldr	r3, [pc, #140]	; (8008f74 <HAL_RTC_Init+0xf4>)
 8008ee8:	400b      	ands	r3, r1
 8008eea:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6899      	ldr	r1, [r3, #8]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685a      	ldr	r2, [r3, #4]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	431a      	orrs	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	430a      	orrs	r2, r1
 8008f08:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	68d2      	ldr	r2, [r2, #12]
 8008f12:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6919      	ldr	r1, [r3, #16]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	041a      	lsls	r2, r3, #16
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	430a      	orrs	r2, r1
 8008f26:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68da      	ldr	r2, [r3, #12]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f36:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f022 0208 	bic.w	r2, r2, #8
 8008f46:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	699a      	ldr	r2, [r3, #24]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	430a      	orrs	r2, r1
 8008f58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	22ff      	movs	r2, #255	; 0xff
 8008f60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008f68:	2300      	movs	r3, #0
  }
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	ff8fffbf 	.word	0xff8fffbf

08008f78 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008f78:	b590      	push	{r4, r7, lr}
 8008f7a:	b087      	sub	sp, #28
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008f84:	2300      	movs	r3, #0
 8008f86:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	7f1b      	ldrb	r3, [r3, #28]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d101      	bne.n	8008f94 <HAL_RTC_SetTime+0x1c>
 8008f90:	2302      	movs	r3, #2
 8008f92:	e0a8      	b.n	80090e6 <HAL_RTC_SetTime+0x16e>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2201      	movs	r2, #1
 8008f98:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d126      	bne.n	8008ff4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d102      	bne.n	8008fba <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 faac 	bl	800951c <RTC_ByteToBcd2>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	785b      	ldrb	r3, [r3, #1]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 faa5 	bl	800951c <RTC_ByteToBcd2>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008fd6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	789b      	ldrb	r3, [r3, #2]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fa9d 	bl	800951c <RTC_ByteToBcd2>
 8008fe2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008fe4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	7b1b      	ldrb	r3, [r3, #12]
 8008fec:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	617b      	str	r3, [r7, #20]
 8008ff2:	e018      	b.n	8009026 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d102      	bne.n	8009008 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2200      	movs	r2, #0
 8009006:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	785b      	ldrb	r3, [r3, #1]
 8009012:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009014:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800901a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	7b1b      	ldrb	r3, [r3, #12]
 8009020:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009022:	4313      	orrs	r3, r2
 8009024:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	22ca      	movs	r2, #202	; 0xca
 800902c:	625a      	str	r2, [r3, #36]	; 0x24
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2253      	movs	r2, #83	; 0x53
 8009034:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 fa44 	bl	80094c4 <RTC_EnterInitMode>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00b      	beq.n	800905a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	22ff      	movs	r2, #255	; 0xff
 8009048:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2204      	movs	r2, #4
 800904e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e045      	b.n	80090e6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	6979      	ldr	r1, [r7, #20]
 8009060:	4b23      	ldr	r3, [pc, #140]	; (80090f0 <HAL_RTC_SetTime+0x178>)
 8009062:	400b      	ands	r3, r1
 8009064:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009074:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6899      	ldr	r1, [r3, #8]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	691a      	ldr	r2, [r3, #16]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	431a      	orrs	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	430a      	orrs	r2, r1
 800908c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68da      	ldr	r2, [r3, #12]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800909c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f003 0320 	and.w	r3, r3, #32
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d111      	bne.n	80090d0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 f9e1 	bl	8009474 <HAL_RTC_WaitForSynchro>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00b      	beq.n	80090d0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	22ff      	movs	r2, #255	; 0xff
 80090be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2204      	movs	r2, #4
 80090c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e00a      	b.n	80090e6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	22ff      	movs	r2, #255	; 0xff
 80090d6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2201      	movs	r2, #1
 80090dc:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80090e4:	2300      	movs	r3, #0
  }
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	371c      	adds	r7, #28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd90      	pop	{r4, r7, pc}
 80090ee:	bf00      	nop
 80090f0:	007f7f7f 	.word	0x007f7f7f

080090f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80090f4:	b590      	push	{r4, r7, lr}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	7f1b      	ldrb	r3, [r3, #28]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d101      	bne.n	8009110 <HAL_RTC_SetDate+0x1c>
 800910c:	2302      	movs	r3, #2
 800910e:	e092      	b.n	8009236 <HAL_RTC_SetDate+0x142>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2201      	movs	r2, #1
 8009114:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2202      	movs	r2, #2
 800911a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10e      	bne.n	8009140 <HAL_RTC_SetDate+0x4c>
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	785b      	ldrb	r3, [r3, #1]
 8009126:	f003 0310 	and.w	r3, r3, #16
 800912a:	2b00      	cmp	r3, #0
 800912c:	d008      	beq.n	8009140 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	785b      	ldrb	r3, [r3, #1]
 8009132:	f023 0310 	bic.w	r3, r3, #16
 8009136:	b2db      	uxtb	r3, r3
 8009138:	330a      	adds	r3, #10
 800913a:	b2da      	uxtb	r2, r3
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d11c      	bne.n	8009180 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	78db      	ldrb	r3, [r3, #3]
 800914a:	4618      	mov	r0, r3
 800914c:	f000 f9e6 	bl	800951c <RTC_ByteToBcd2>
 8009150:	4603      	mov	r3, r0
 8009152:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	785b      	ldrb	r3, [r3, #1]
 8009158:	4618      	mov	r0, r3
 800915a:	f000 f9df 	bl	800951c <RTC_ByteToBcd2>
 800915e:	4603      	mov	r3, r0
 8009160:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009162:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	789b      	ldrb	r3, [r3, #2]
 8009168:	4618      	mov	r0, r3
 800916a:	f000 f9d7 	bl	800951c <RTC_ByteToBcd2>
 800916e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009170:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800917a:	4313      	orrs	r3, r2
 800917c:	617b      	str	r3, [r7, #20]
 800917e:	e00e      	b.n	800919e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	78db      	ldrb	r3, [r3, #3]
 8009184:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	785b      	ldrb	r3, [r3, #1]
 800918a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800918c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8009192:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800919a:	4313      	orrs	r3, r2
 800919c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	22ca      	movs	r2, #202	; 0xca
 80091a4:	625a      	str	r2, [r3, #36]	; 0x24
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2253      	movs	r2, #83	; 0x53
 80091ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f000 f988 	bl	80094c4 <RTC_EnterInitMode>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00b      	beq.n	80091d2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	22ff      	movs	r2, #255	; 0xff
 80091c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2204      	movs	r2, #4
 80091c6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e031      	b.n	8009236 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	6979      	ldr	r1, [r7, #20]
 80091d8:	4b19      	ldr	r3, [pc, #100]	; (8009240 <HAL_RTC_SetDate+0x14c>)
 80091da:	400b      	ands	r3, r1
 80091dc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091ec:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f003 0320 	and.w	r3, r3, #32
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d111      	bne.n	8009220 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 f939 	bl	8009474 <HAL_RTC_WaitForSynchro>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00b      	beq.n	8009220 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	22ff      	movs	r2, #255	; 0xff
 800920e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2204      	movs	r2, #4
 8009214:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e00a      	b.n	8009236 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	22ff      	movs	r2, #255	; 0xff
 8009226:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2201      	movs	r2, #1
 800922c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009234:	2300      	movs	r3, #0
  }
}
 8009236:	4618      	mov	r0, r3
 8009238:	371c      	adds	r7, #28
 800923a:	46bd      	mov	sp, r7
 800923c:	bd90      	pop	{r4, r7, pc}
 800923e:	bf00      	nop
 8009240:	00ffff3f 	.word	0x00ffff3f

08009244 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009244:	b590      	push	{r4, r7, lr}
 8009246:	b089      	sub	sp, #36	; 0x24
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8009250:	2300      	movs	r3, #0
 8009252:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	61fb      	str	r3, [r7, #28]
 8009258:	2300      	movs	r3, #0
 800925a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	7f1b      	ldrb	r3, [r3, #28]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d101      	bne.n	8009268 <HAL_RTC_SetAlarm+0x24>
 8009264:	2302      	movs	r3, #2
 8009266:	e101      	b.n	800946c <HAL_RTC_SetAlarm+0x228>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2201      	movs	r2, #1
 800926c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2202      	movs	r2, #2
 8009272:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d137      	bne.n	80092ea <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009284:	2b00      	cmp	r3, #0
 8009286:	d102      	bne.n	800928e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	2200      	movs	r2, #0
 800928c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	4618      	mov	r0, r3
 8009294:	f000 f942 	bl	800951c <RTC_ByteToBcd2>
 8009298:	4603      	mov	r3, r0
 800929a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	785b      	ldrb	r3, [r3, #1]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 f93b 	bl	800951c <RTC_ByteToBcd2>
 80092a6:	4603      	mov	r3, r0
 80092a8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80092aa:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	789b      	ldrb	r3, [r3, #2]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 f933 	bl	800951c <RTC_ByteToBcd2>
 80092b6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80092b8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	7b1b      	ldrb	r3, [r3, #12]
 80092c0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80092c2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 f925 	bl	800951c <RTC_ByteToBcd2>
 80092d2:	4603      	mov	r3, r0
 80092d4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80092d6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80092de:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80092e4:	4313      	orrs	r3, r2
 80092e6:	61fb      	str	r3, [r7, #28]
 80092e8:	e023      	b.n	8009332 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d102      	bne.n	80092fe <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2200      	movs	r2, #0
 80092fc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800930a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009310:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	7b1b      	ldrb	r3, [r3, #12]
 8009316:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009318:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009320:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009322:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009328:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800932e:	4313      	orrs	r3, r2
 8009330:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	69db      	ldr	r3, [r3, #28]
 800933a:	4313      	orrs	r3, r2
 800933c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	22ca      	movs	r2, #202	; 0xca
 8009344:	625a      	str	r2, [r3, #36]	; 0x24
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2253      	movs	r2, #83	; 0x53
 800934c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009356:	d13f      	bne.n	80093d8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689a      	ldr	r2, [r3, #8]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009366:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689a      	ldr	r2, [r3, #8]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009376:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009378:	f7fb fde2 	bl	8004f40 <HAL_GetTick>
 800937c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800937e:	e013      	b.n	80093a8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009380:	f7fb fdde 	bl	8004f40 <HAL_GetTick>
 8009384:	4602      	mov	r2, r0
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800938e:	d90b      	bls.n	80093a8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	22ff      	movs	r2, #255	; 0xff
 8009396:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2203      	movs	r2, #3
 800939c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e061      	b.n	800946c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d0e4      	beq.n	8009380 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	69fa      	ldr	r2, [r7, #28]
 80093bc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	689a      	ldr	r2, [r3, #8]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093d4:	609a      	str	r2, [r3, #8]
 80093d6:	e03e      	b.n	8009456 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689a      	ldr	r2, [r3, #8]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80093e6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	689a      	ldr	r2, [r3, #8]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093f6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80093f8:	f7fb fda2 	bl	8004f40 <HAL_GetTick>
 80093fc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80093fe:	e013      	b.n	8009428 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009400:	f7fb fd9e 	bl	8004f40 <HAL_GetTick>
 8009404:	4602      	mov	r2, r0
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800940e:	d90b      	bls.n	8009428 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	22ff      	movs	r2, #255	; 0xff
 8009416:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2203      	movs	r2, #3
 800941c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e021      	b.n	800946c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0e4      	beq.n	8009400 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69fa      	ldr	r2, [r7, #28]
 800943c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	689a      	ldr	r2, [r3, #8]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009454:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	22ff      	movs	r2, #255	; 0xff
 800945c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2201      	movs	r2, #1
 8009462:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3724      	adds	r7, #36	; 0x24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd90      	pop	{r4, r7, pc}

08009474 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68da      	ldr	r2, [r3, #12]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800948e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009490:	f7fb fd56 	bl	8004f40 <HAL_GetTick>
 8009494:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009496:	e009      	b.n	80094ac <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009498:	f7fb fd52 	bl	8004f40 <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094a6:	d901      	bls.n	80094ac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e007      	b.n	80094bc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f003 0320 	and.w	r3, r3, #32
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0ee      	beq.n	8009498 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d119      	bne.n	8009512 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f04f 32ff 	mov.w	r2, #4294967295
 80094e6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80094e8:	f7fb fd2a 	bl	8004f40 <HAL_GetTick>
 80094ec:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80094ee:	e009      	b.n	8009504 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80094f0:	f7fb fd26 	bl	8004f40 <HAL_GetTick>
 80094f4:	4602      	mov	r2, r0
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094fe:	d901      	bls.n	8009504 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e007      	b.n	8009514 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800950e:	2b00      	cmp	r3, #0
 8009510:	d0ee      	beq.n	80094f0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	4603      	mov	r3, r0
 8009524:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800952a:	e005      	b.n	8009538 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	3301      	adds	r3, #1
 8009530:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8009532:	79fb      	ldrb	r3, [r7, #7]
 8009534:	3b0a      	subs	r3, #10
 8009536:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	2b09      	cmp	r3, #9
 800953c:	d8f6      	bhi.n	800952c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	b2db      	uxtb	r3, r3
 8009542:	011b      	lsls	r3, r3, #4
 8009544:	b2da      	uxtb	r2, r3
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	4313      	orrs	r3, r2
 800954a:	b2db      	uxtb	r3, r3
}
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009558:	b480      	push	{r7}
 800955a:	b087      	sub	sp, #28
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009564:	2300      	movs	r3, #0
 8009566:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	7f1b      	ldrb	r3, [r3, #28]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d101      	bne.n	8009574 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009570:	2302      	movs	r3, #2
 8009572:	e03e      	b.n	80095f2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2201      	movs	r2, #1
 8009578:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2202      	movs	r2, #2
 800957e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	4b1e      	ldr	r3, [pc, #120]	; (8009600 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8009588:	4013      	ands	r3, r2
 800958a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	4313      	orrs	r3, r2
 8009592:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	22ca      	movs	r2, #202	; 0xca
 800959a:	625a      	str	r2, [r3, #36]	; 0x24
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2253      	movs	r2, #83	; 0x53
 80095a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 0206 	bic.w	r2, r2, #6
 80095b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	430a      	orrs	r2, r1
 80095c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	689a      	ldr	r2, [r3, #8]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095da:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	22ff      	movs	r2, #255	; 0xff
 80095e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2201      	movs	r2, #1
 80095e8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	371c      	adds	r7, #28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	fffff7f7 	.word	0xfffff7f7

08009604 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e025      	b.n	8009664 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b00      	cmp	r3, #0
 8009622:	d106      	bne.n	8009632 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7fb fb57 	bl	8004ce0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2202      	movs	r2, #2
 8009636:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	3304      	adds	r3, #4
 8009642:	4619      	mov	r1, r3
 8009644:	4610      	mov	r0, r2
 8009646:	f001 fff7 	bl	800b638 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6818      	ldr	r0, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	461a      	mov	r2, r3
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	f002 f861 	bl	800b71c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b02      	cmp	r3, #2
 8009682:	d101      	bne.n	8009688 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009684:	2302      	movs	r3, #2
 8009686:	e018      	b.n	80096ba <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2202      	movs	r2, #2
 800968c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	68b9      	ldr	r1, [r7, #8]
 8009698:	4618      	mov	r0, r3
 800969a:	f002 f8bf 	bl	800b81c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d104      	bne.n	80096b0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2205      	movs	r2, #5
 80096aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80096ae:	e003      	b.n	80096b8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b082      	sub	sp, #8
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d101      	bne.n	80096dc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80096d8:	2302      	movs	r3, #2
 80096da:	e00e      	b.n	80096fa <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2202      	movs	r2, #2
 80096e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f002 f8b7 	bl	800b85e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e084      	b.n	800981e <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	d106      	bne.n	8009734 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7fb f83a 	bl	80047a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2202      	movs	r2, #2
 8009738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800974a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009754:	d902      	bls.n	800975c <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009756:	2300      	movs	r3, #0
 8009758:	60fb      	str	r3, [r7, #12]
 800975a:	e002      	b.n	8009762 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800975c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009760:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800976a:	d007      	beq.n	800977c <HAL_SPI_Init+0x7a>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009774:	d002      	beq.n	800977c <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10b      	bne.n	800979c <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800978c:	d903      	bls.n	8009796 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2202      	movs	r2, #2
 8009792:	631a      	str	r2, [r3, #48]	; 0x30
 8009794:	e002      	b.n	800979c <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685a      	ldr	r2, [r3, #4]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	431a      	orrs	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	431a      	orrs	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	431a      	orrs	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097ba:	431a      	orrs	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	69db      	ldr	r3, [r3, #28]
 80097c0:	431a      	orrs	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	ea42 0103 	orr.w	r1, r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	430a      	orrs	r2, r1
 80097d4:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	0c1b      	lsrs	r3, r3, #16
 80097dc:	f003 0204 	and.w	r2, r3, #4
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e4:	431a      	orrs	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ea:	431a      	orrs	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	ea42 0103 	orr.w	r1, r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	430a      	orrs	r2, r1
 80097fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69da      	ldr	r2, [r3, #28]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800980c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b082      	sub	sp, #8
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d101      	bne.n	8009838 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e01d      	b.n	8009874 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	d106      	bne.n	8009852 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7fb f81d 	bl	800488c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2202      	movs	r2, #2
 8009856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	3304      	adds	r3, #4
 8009862:	4619      	mov	r1, r3
 8009864:	4610      	mov	r0, r2
 8009866:	f000 fbc3 	bl	8009ff0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68da      	ldr	r2, [r3, #12]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f042 0201 	orr.w	r2, r2, #1
 8009892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689a      	ldr	r2, [r3, #8]
 800989a:	4b0c      	ldr	r3, [pc, #48]	; (80098cc <HAL_TIM_Base_Start_IT+0x50>)
 800989c:	4013      	ands	r3, r2
 800989e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b06      	cmp	r3, #6
 80098a4:	d00b      	beq.n	80098be <HAL_TIM_Base_Start_IT+0x42>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ac:	d007      	beq.n	80098be <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f042 0201 	orr.w	r2, r2, #1
 80098bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	00010007 	.word	0x00010007

080098d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e01d      	b.n	800991e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d106      	bne.n	80098fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f815 	bl	8009926 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3304      	adds	r3, #4
 800990c:	4619      	mov	r1, r3
 800990e:	4610      	mov	r0, r2
 8009910:	f000 fb6e 	bl	8009ff0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009926:	b480      	push	{r7}
 8009928:	b083      	sub	sp, #12
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800992e:	bf00      	nop
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b082      	sub	sp, #8
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	f003 0302 	and.w	r3, r3, #2
 800994c:	2b02      	cmp	r3, #2
 800994e:	d122      	bne.n	8009996 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	f003 0302 	and.w	r3, r3, #2
 800995a:	2b02      	cmp	r3, #2
 800995c:	d11b      	bne.n	8009996 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f06f 0202 	mvn.w	r2, #2
 8009966:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	f003 0303 	and.w	r3, r3, #3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fb19 	bl	8009fb4 <HAL_TIM_IC_CaptureCallback>
 8009982:	e005      	b.n	8009990 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fb0b 	bl	8009fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fb1c 	bl	8009fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	f003 0304 	and.w	r3, r3, #4
 80099a0:	2b04      	cmp	r3, #4
 80099a2:	d122      	bne.n	80099ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	f003 0304 	and.w	r3, r3, #4
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	d11b      	bne.n	80099ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f06f 0204 	mvn.w	r2, #4
 80099ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2202      	movs	r2, #2
 80099c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 faef 	bl	8009fb4 <HAL_TIM_IC_CaptureCallback>
 80099d6:	e005      	b.n	80099e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fae1 	bl	8009fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 faf2 	bl	8009fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	f003 0308 	and.w	r3, r3, #8
 80099f4:	2b08      	cmp	r3, #8
 80099f6:	d122      	bne.n	8009a3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	f003 0308 	and.w	r3, r3, #8
 8009a02:	2b08      	cmp	r3, #8
 8009a04:	d11b      	bne.n	8009a3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f06f 0208 	mvn.w	r2, #8
 8009a0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2204      	movs	r2, #4
 8009a14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	f003 0303 	and.w	r3, r3, #3
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d003      	beq.n	8009a2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fac5 	bl	8009fb4 <HAL_TIM_IC_CaptureCallback>
 8009a2a:	e005      	b.n	8009a38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fab7 	bl	8009fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fac8 	bl	8009fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	f003 0310 	and.w	r3, r3, #16
 8009a48:	2b10      	cmp	r3, #16
 8009a4a:	d122      	bne.n	8009a92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	f003 0310 	and.w	r3, r3, #16
 8009a56:	2b10      	cmp	r3, #16
 8009a58:	d11b      	bne.n	8009a92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f06f 0210 	mvn.w	r2, #16
 8009a62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2208      	movs	r2, #8
 8009a68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	69db      	ldr	r3, [r3, #28]
 8009a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fa9b 	bl	8009fb4 <HAL_TIM_IC_CaptureCallback>
 8009a7e:	e005      	b.n	8009a8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fa8d 	bl	8009fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fa9e 	bl	8009fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	f003 0301 	and.w	r3, r3, #1
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d10e      	bne.n	8009abe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d107      	bne.n	8009abe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f06f 0201 	mvn.w	r2, #1
 8009ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7f8 fe5d 	bl	8002778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac8:	2b80      	cmp	r3, #128	; 0x80
 8009aca:	d10e      	bne.n	8009aea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ad6:	2b80      	cmp	r3, #128	; 0x80
 8009ad8:	d107      	bne.n	8009aea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 ffb9 	bl	800aa5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009af8:	d10e      	bne.n	8009b18 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b04:	2b80      	cmp	r3, #128	; 0x80
 8009b06:	d107      	bne.n	8009b18 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 ffac 	bl	800aa70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b22:	2b40      	cmp	r3, #64	; 0x40
 8009b24:	d10e      	bne.n	8009b44 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b30:	2b40      	cmp	r3, #64	; 0x40
 8009b32:	d107      	bne.n	8009b44 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fa4c 	bl	8009fdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	f003 0320 	and.w	r3, r3, #32
 8009b4e:	2b20      	cmp	r3, #32
 8009b50:	d10e      	bne.n	8009b70 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	f003 0320 	and.w	r3, r3, #32
 8009b5c:	2b20      	cmp	r3, #32
 8009b5e:	d107      	bne.n	8009b70 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f06f 0220 	mvn.w	r2, #32
 8009b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 ff6c 	bl	800aa48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b70:	bf00      	nop
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d101      	bne.n	8009b92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009b8e:	2302      	movs	r3, #2
 8009b90:	e105      	b.n	8009d9e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b14      	cmp	r3, #20
 8009ba6:	f200 80f0 	bhi.w	8009d8a <HAL_TIM_PWM_ConfigChannel+0x212>
 8009baa:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb0:	08009c05 	.word	0x08009c05
 8009bb4:	08009d8b 	.word	0x08009d8b
 8009bb8:	08009d8b 	.word	0x08009d8b
 8009bbc:	08009d8b 	.word	0x08009d8b
 8009bc0:	08009c45 	.word	0x08009c45
 8009bc4:	08009d8b 	.word	0x08009d8b
 8009bc8:	08009d8b 	.word	0x08009d8b
 8009bcc:	08009d8b 	.word	0x08009d8b
 8009bd0:	08009c87 	.word	0x08009c87
 8009bd4:	08009d8b 	.word	0x08009d8b
 8009bd8:	08009d8b 	.word	0x08009d8b
 8009bdc:	08009d8b 	.word	0x08009d8b
 8009be0:	08009cc7 	.word	0x08009cc7
 8009be4:	08009d8b 	.word	0x08009d8b
 8009be8:	08009d8b 	.word	0x08009d8b
 8009bec:	08009d8b 	.word	0x08009d8b
 8009bf0:	08009d09 	.word	0x08009d09
 8009bf4:	08009d8b 	.word	0x08009d8b
 8009bf8:	08009d8b 	.word	0x08009d8b
 8009bfc:	08009d8b 	.word	0x08009d8b
 8009c00:	08009d49 	.word	0x08009d49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68b9      	ldr	r1, [r7, #8]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 fa90 	bl	800a130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	699a      	ldr	r2, [r3, #24]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f042 0208 	orr.w	r2, r2, #8
 8009c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	699a      	ldr	r2, [r3, #24]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f022 0204 	bic.w	r2, r2, #4
 8009c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6999      	ldr	r1, [r3, #24]
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	691a      	ldr	r2, [r3, #16]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	619a      	str	r2, [r3, #24]
      break;
 8009c42:	e0a3      	b.n	8009d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68b9      	ldr	r1, [r7, #8]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 fae2 	bl	800a214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	699a      	ldr	r2, [r3, #24]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	699a      	ldr	r2, [r3, #24]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6999      	ldr	r1, [r3, #24]
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	021a      	lsls	r2, r3, #8
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	430a      	orrs	r2, r1
 8009c82:	619a      	str	r2, [r3, #24]
      break;
 8009c84:	e082      	b.n	8009d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 fb39 	bl	800a304 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	69da      	ldr	r2, [r3, #28]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f042 0208 	orr.w	r2, r2, #8
 8009ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	69da      	ldr	r2, [r3, #28]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f022 0204 	bic.w	r2, r2, #4
 8009cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	69d9      	ldr	r1, [r3, #28]
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	691a      	ldr	r2, [r3, #16]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	61da      	str	r2, [r3, #28]
      break;
 8009cc4:	e062      	b.n	8009d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68b9      	ldr	r1, [r7, #8]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f000 fb8f 	bl	800a3f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	69da      	ldr	r2, [r3, #28]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	69da      	ldr	r2, [r3, #28]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	69d9      	ldr	r1, [r3, #28]
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	021a      	lsls	r2, r3, #8
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	430a      	orrs	r2, r1
 8009d04:	61da      	str	r2, [r3, #28]
      break;
 8009d06:	e041      	b.n	8009d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68b9      	ldr	r1, [r7, #8]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 fbc6 	bl	800a4a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f042 0208 	orr.w	r2, r2, #8
 8009d22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f022 0204 	bic.w	r2, r2, #4
 8009d32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	691a      	ldr	r2, [r3, #16]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	430a      	orrs	r2, r1
 8009d44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009d46:	e021      	b.n	8009d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68b9      	ldr	r1, [r7, #8]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 fbf8 	bl	800a544 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	021a      	lsls	r2, r3, #8
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	430a      	orrs	r2, r1
 8009d86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009d88:	e000      	b.n	8009d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009d8a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop

08009da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d101      	bne.n	8009dc0 <HAL_TIM_ConfigClockSource+0x18>
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	e0a6      	b.n	8009f0e <HAL_TIM_ConfigClockSource+0x166>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	4b4f      	ldr	r3, [pc, #316]	; (8009f18 <HAL_TIM_ConfigClockSource+0x170>)
 8009ddc:	4013      	ands	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009de6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b40      	cmp	r3, #64	; 0x40
 8009df6:	d067      	beq.n	8009ec8 <HAL_TIM_ConfigClockSource+0x120>
 8009df8:	2b40      	cmp	r3, #64	; 0x40
 8009dfa:	d80b      	bhi.n	8009e14 <HAL_TIM_ConfigClockSource+0x6c>
 8009dfc:	2b10      	cmp	r3, #16
 8009dfe:	d073      	beq.n	8009ee8 <HAL_TIM_ConfigClockSource+0x140>
 8009e00:	2b10      	cmp	r3, #16
 8009e02:	d802      	bhi.n	8009e0a <HAL_TIM_ConfigClockSource+0x62>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d06f      	beq.n	8009ee8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009e08:	e078      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e0a:	2b20      	cmp	r3, #32
 8009e0c:	d06c      	beq.n	8009ee8 <HAL_TIM_ConfigClockSource+0x140>
 8009e0e:	2b30      	cmp	r3, #48	; 0x30
 8009e10:	d06a      	beq.n	8009ee8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009e12:	e073      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e14:	2b70      	cmp	r3, #112	; 0x70
 8009e16:	d00d      	beq.n	8009e34 <HAL_TIM_ConfigClockSource+0x8c>
 8009e18:	2b70      	cmp	r3, #112	; 0x70
 8009e1a:	d804      	bhi.n	8009e26 <HAL_TIM_ConfigClockSource+0x7e>
 8009e1c:	2b50      	cmp	r3, #80	; 0x50
 8009e1e:	d033      	beq.n	8009e88 <HAL_TIM_ConfigClockSource+0xe0>
 8009e20:	2b60      	cmp	r3, #96	; 0x60
 8009e22:	d041      	beq.n	8009ea8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009e24:	e06a      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e2a:	d066      	beq.n	8009efa <HAL_TIM_ConfigClockSource+0x152>
 8009e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e30:	d017      	beq.n	8009e62 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009e32:	e063      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6818      	ldr	r0, [r3, #0]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	6899      	ldr	r1, [r3, #8]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	f000 fcd4 	bl	800a7f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e56:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	609a      	str	r2, [r3, #8]
      break;
 8009e60:	e04c      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6818      	ldr	r0, [r3, #0]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	6899      	ldr	r1, [r3, #8]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	f000 fcbd 	bl	800a7f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	689a      	ldr	r2, [r3, #8]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e84:	609a      	str	r2, [r3, #8]
      break;
 8009e86:	e039      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6818      	ldr	r0, [r3, #0]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	6859      	ldr	r1, [r3, #4]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	461a      	mov	r2, r3
 8009e96:	f000 fc31 	bl	800a6fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2150      	movs	r1, #80	; 0x50
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 fc8a 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 8009ea6:	e029      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6818      	ldr	r0, [r3, #0]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	6859      	ldr	r1, [r3, #4]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	f000 fc50 	bl	800a75a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2160      	movs	r1, #96	; 0x60
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 fc7a 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 8009ec6:	e019      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6818      	ldr	r0, [r3, #0]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	6859      	ldr	r1, [r3, #4]
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	f000 fc11 	bl	800a6fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2140      	movs	r1, #64	; 0x40
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 fc6a 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 8009ee6:	e009      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	f000 fc61 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 8009ef8:	e000      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	fffeff88 	.word	0xfffeff88

08009f1c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d101      	bne.n	8009f34 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009f30:	2302      	movs	r3, #2
 8009f32:	e031      	b.n	8009f98 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fb50 	bl	800a5ec <TIM_SlaveTimer_SetConfig>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d009      	beq.n	8009f66 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e018      	b.n	8009f98 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68da      	ldr	r2, [r3, #12]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f74:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68da      	ldr	r2, [r3, #12]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009f84:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a40      	ldr	r2, [pc, #256]	; (800a104 <TIM_Base_SetConfig+0x114>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d013      	beq.n	800a030 <TIM_Base_SetConfig+0x40>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a00e:	d00f      	beq.n	800a030 <TIM_Base_SetConfig+0x40>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a3d      	ldr	r2, [pc, #244]	; (800a108 <TIM_Base_SetConfig+0x118>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d00b      	beq.n	800a030 <TIM_Base_SetConfig+0x40>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a3c      	ldr	r2, [pc, #240]	; (800a10c <TIM_Base_SetConfig+0x11c>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d007      	beq.n	800a030 <TIM_Base_SetConfig+0x40>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a3b      	ldr	r2, [pc, #236]	; (800a110 <TIM_Base_SetConfig+0x120>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d003      	beq.n	800a030 <TIM_Base_SetConfig+0x40>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a3a      	ldr	r2, [pc, #232]	; (800a114 <TIM_Base_SetConfig+0x124>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d108      	bne.n	800a042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	4313      	orrs	r3, r2
 800a040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a2f      	ldr	r2, [pc, #188]	; (800a104 <TIM_Base_SetConfig+0x114>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d02b      	beq.n	800a0a2 <TIM_Base_SetConfig+0xb2>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a050:	d027      	beq.n	800a0a2 <TIM_Base_SetConfig+0xb2>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a2c      	ldr	r2, [pc, #176]	; (800a108 <TIM_Base_SetConfig+0x118>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d023      	beq.n	800a0a2 <TIM_Base_SetConfig+0xb2>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a2b      	ldr	r2, [pc, #172]	; (800a10c <TIM_Base_SetConfig+0x11c>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d01f      	beq.n	800a0a2 <TIM_Base_SetConfig+0xb2>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a2a      	ldr	r2, [pc, #168]	; (800a110 <TIM_Base_SetConfig+0x120>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d01b      	beq.n	800a0a2 <TIM_Base_SetConfig+0xb2>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a29      	ldr	r2, [pc, #164]	; (800a114 <TIM_Base_SetConfig+0x124>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d017      	beq.n	800a0a2 <TIM_Base_SetConfig+0xb2>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a28      	ldr	r2, [pc, #160]	; (800a118 <TIM_Base_SetConfig+0x128>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d013      	beq.n	800a0a2 <TIM_Base_SetConfig+0xb2>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a27      	ldr	r2, [pc, #156]	; (800a11c <TIM_Base_SetConfig+0x12c>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d00f      	beq.n	800a0a2 <TIM_Base_SetConfig+0xb2>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a26      	ldr	r2, [pc, #152]	; (800a120 <TIM_Base_SetConfig+0x130>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d00b      	beq.n	800a0a2 <TIM_Base_SetConfig+0xb2>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a25      	ldr	r2, [pc, #148]	; (800a124 <TIM_Base_SetConfig+0x134>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d007      	beq.n	800a0a2 <TIM_Base_SetConfig+0xb2>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a24      	ldr	r2, [pc, #144]	; (800a128 <TIM_Base_SetConfig+0x138>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d003      	beq.n	800a0a2 <TIM_Base_SetConfig+0xb2>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a23      	ldr	r2, [pc, #140]	; (800a12c <TIM_Base_SetConfig+0x13c>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d108      	bne.n	800a0b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	695b      	ldr	r3, [r3, #20]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	689a      	ldr	r2, [r3, #8]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a0a      	ldr	r2, [pc, #40]	; (800a104 <TIM_Base_SetConfig+0x114>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d003      	beq.n	800a0e8 <TIM_Base_SetConfig+0xf8>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a0c      	ldr	r2, [pc, #48]	; (800a114 <TIM_Base_SetConfig+0x124>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d103      	bne.n	800a0f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	691a      	ldr	r2, [r3, #16]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	615a      	str	r2, [r3, #20]
}
 800a0f6:	bf00      	nop
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	40010000 	.word	0x40010000
 800a108:	40000400 	.word	0x40000400
 800a10c:	40000800 	.word	0x40000800
 800a110:	40000c00 	.word	0x40000c00
 800a114:	40010400 	.word	0x40010400
 800a118:	40014000 	.word	0x40014000
 800a11c:	40014400 	.word	0x40014400
 800a120:	40014800 	.word	0x40014800
 800a124:	40001800 	.word	0x40001800
 800a128:	40001c00 	.word	0x40001c00
 800a12c:	40002000 	.word	0x40002000

0800a130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a130:	b480      	push	{r7}
 800a132:	b087      	sub	sp, #28
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	f023 0201 	bic.w	r2, r3, #1
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	4b2b      	ldr	r3, [pc, #172]	; (800a208 <TIM_OC1_SetConfig+0xd8>)
 800a15c:	4013      	ands	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f023 0303 	bic.w	r3, r3, #3
 800a166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	4313      	orrs	r3, r2
 800a170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	f023 0302 	bic.w	r3, r3, #2
 800a178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	4313      	orrs	r3, r2
 800a182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a21      	ldr	r2, [pc, #132]	; (800a20c <TIM_OC1_SetConfig+0xdc>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d003      	beq.n	800a194 <TIM_OC1_SetConfig+0x64>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4a20      	ldr	r2, [pc, #128]	; (800a210 <TIM_OC1_SetConfig+0xe0>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d10c      	bne.n	800a1ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	f023 0308 	bic.w	r3, r3, #8
 800a19a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	f023 0304 	bic.w	r3, r3, #4
 800a1ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a16      	ldr	r2, [pc, #88]	; (800a20c <TIM_OC1_SetConfig+0xdc>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d003      	beq.n	800a1be <TIM_OC1_SetConfig+0x8e>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a15      	ldr	r2, [pc, #84]	; (800a210 <TIM_OC1_SetConfig+0xe0>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d111      	bne.n	800a1e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	695b      	ldr	r3, [r3, #20]
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	621a      	str	r2, [r3, #32]
}
 800a1fc:	bf00      	nop
 800a1fe:	371c      	adds	r7, #28
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	fffeff8f 	.word	0xfffeff8f
 800a20c:	40010000 	.word	0x40010000
 800a210:	40010400 	.word	0x40010400

0800a214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a214:	b480      	push	{r7}
 800a216:	b087      	sub	sp, #28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	f023 0210 	bic.w	r2, r3, #16
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	4b2e      	ldr	r3, [pc, #184]	; (800a2f8 <TIM_OC2_SetConfig+0xe4>)
 800a240:	4013      	ands	r3, r2
 800a242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a24a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	021b      	lsls	r3, r3, #8
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	4313      	orrs	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f023 0320 	bic.w	r3, r3, #32
 800a25e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	011b      	lsls	r3, r3, #4
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	4313      	orrs	r3, r2
 800a26a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a23      	ldr	r2, [pc, #140]	; (800a2fc <TIM_OC2_SetConfig+0xe8>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d003      	beq.n	800a27c <TIM_OC2_SetConfig+0x68>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a22      	ldr	r2, [pc, #136]	; (800a300 <TIM_OC2_SetConfig+0xec>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d10d      	bne.n	800a298 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	011b      	lsls	r3, r3, #4
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a296:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a18      	ldr	r2, [pc, #96]	; (800a2fc <TIM_OC2_SetConfig+0xe8>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d003      	beq.n	800a2a8 <TIM_OC2_SetConfig+0x94>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a17      	ldr	r2, [pc, #92]	; (800a300 <TIM_OC2_SetConfig+0xec>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d113      	bne.n	800a2d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	695b      	ldr	r3, [r3, #20]
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	699b      	ldr	r3, [r3, #24]
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	621a      	str	r2, [r3, #32]
}
 800a2ea:	bf00      	nop
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	feff8fff 	.word	0xfeff8fff
 800a2fc:	40010000 	.word	0x40010000
 800a300:	40010400 	.word	0x40010400

0800a304 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	4b2d      	ldr	r3, [pc, #180]	; (800a3e4 <TIM_OC3_SetConfig+0xe0>)
 800a330:	4013      	ands	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f023 0303 	bic.w	r3, r3, #3
 800a33a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	4313      	orrs	r3, r2
 800a344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a34c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	021b      	lsls	r3, r3, #8
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	4313      	orrs	r3, r2
 800a358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a22      	ldr	r2, [pc, #136]	; (800a3e8 <TIM_OC3_SetConfig+0xe4>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d003      	beq.n	800a36a <TIM_OC3_SetConfig+0x66>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4a21      	ldr	r2, [pc, #132]	; (800a3ec <TIM_OC3_SetConfig+0xe8>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d10d      	bne.n	800a386 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	021b      	lsls	r3, r3, #8
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a17      	ldr	r2, [pc, #92]	; (800a3e8 <TIM_OC3_SetConfig+0xe4>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d003      	beq.n	800a396 <TIM_OC3_SetConfig+0x92>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a16      	ldr	r2, [pc, #88]	; (800a3ec <TIM_OC3_SetConfig+0xe8>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d113      	bne.n	800a3be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a39c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	695b      	ldr	r3, [r3, #20]
 800a3aa:	011b      	lsls	r3, r3, #4
 800a3ac:	693a      	ldr	r2, [r7, #16]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	011b      	lsls	r3, r3, #4
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	685a      	ldr	r2, [r3, #4]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	621a      	str	r2, [r3, #32]
}
 800a3d8:	bf00      	nop
 800a3da:	371c      	adds	r7, #28
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	fffeff8f 	.word	0xfffeff8f
 800a3e8:	40010000 	.word	0x40010000
 800a3ec:	40010400 	.word	0x40010400

0800a3f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	69db      	ldr	r3, [r3, #28]
 800a416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	4b1e      	ldr	r3, [pc, #120]	; (800a494 <TIM_OC4_SetConfig+0xa4>)
 800a41c:	4013      	ands	r3, r2
 800a41e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	021b      	lsls	r3, r3, #8
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	4313      	orrs	r3, r2
 800a432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a43a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	031b      	lsls	r3, r3, #12
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	4313      	orrs	r3, r2
 800a446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4a13      	ldr	r2, [pc, #76]	; (800a498 <TIM_OC4_SetConfig+0xa8>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d003      	beq.n	800a458 <TIM_OC4_SetConfig+0x68>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4a12      	ldr	r2, [pc, #72]	; (800a49c <TIM_OC4_SetConfig+0xac>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d109      	bne.n	800a46c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a45e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	019b      	lsls	r3, r3, #6
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	4313      	orrs	r3, r2
 800a46a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	621a      	str	r2, [r3, #32]
}
 800a486:	bf00      	nop
 800a488:	371c      	adds	r7, #28
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	feff8fff 	.word	0xfeff8fff
 800a498:	40010000 	.word	0x40010000
 800a49c:	40010400 	.word	0x40010400

0800a4a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b087      	sub	sp, #28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a1b      	ldr	r3, [r3, #32]
 800a4ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a1b      	ldr	r3, [r3, #32]
 800a4ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	4b1b      	ldr	r3, [pc, #108]	; (800a538 <TIM_OC5_SetConfig+0x98>)
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a4e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	041b      	lsls	r3, r3, #16
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a12      	ldr	r2, [pc, #72]	; (800a53c <TIM_OC5_SetConfig+0x9c>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d003      	beq.n	800a4fe <TIM_OC5_SetConfig+0x5e>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a11      	ldr	r2, [pc, #68]	; (800a540 <TIM_OC5_SetConfig+0xa0>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d109      	bne.n	800a512 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a504:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	021b      	lsls	r3, r3, #8
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	4313      	orrs	r3, r2
 800a510:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	685a      	ldr	r2, [r3, #4]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	621a      	str	r2, [r3, #32]
}
 800a52c:	bf00      	nop
 800a52e:	371c      	adds	r7, #28
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	fffeff8f 	.word	0xfffeff8f
 800a53c:	40010000 	.word	0x40010000
 800a540:	40010400 	.word	0x40010400

0800a544 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a544:	b480      	push	{r7}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	4b1c      	ldr	r3, [pc, #112]	; (800a5e0 <TIM_OC6_SetConfig+0x9c>)
 800a570:	4013      	ands	r3, r2
 800a572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	021b      	lsls	r3, r3, #8
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	051b      	lsls	r3, r3, #20
 800a58e:	693a      	ldr	r2, [r7, #16]
 800a590:	4313      	orrs	r3, r2
 800a592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a13      	ldr	r2, [pc, #76]	; (800a5e4 <TIM_OC6_SetConfig+0xa0>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d003      	beq.n	800a5a4 <TIM_OC6_SetConfig+0x60>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a12      	ldr	r2, [pc, #72]	; (800a5e8 <TIM_OC6_SetConfig+0xa4>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d109      	bne.n	800a5b8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	029b      	lsls	r3, r3, #10
 800a5b2:	697a      	ldr	r2, [r7, #20]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	685a      	ldr	r2, [r3, #4]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	621a      	str	r2, [r3, #32]
}
 800a5d2:	bf00      	nop
 800a5d4:	371c      	adds	r7, #28
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	feff8fff 	.word	0xfeff8fff
 800a5e4:	40010000 	.word	0x40010000
 800a5e8:	40010400 	.word	0x40010400

0800a5ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b086      	sub	sp, #24
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a604:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	4b39      	ldr	r3, [pc, #228]	; (800a6f8 <TIM_SlaveTimer_SetConfig+0x10c>)
 800a614:	4013      	ands	r3, r2
 800a616:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	697a      	ldr	r2, [r7, #20]
 800a61e:	4313      	orrs	r3, r2
 800a620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	697a      	ldr	r2, [r7, #20]
 800a628:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	2b30      	cmp	r3, #48	; 0x30
 800a630:	d05c      	beq.n	800a6ec <TIM_SlaveTimer_SetConfig+0x100>
 800a632:	2b30      	cmp	r3, #48	; 0x30
 800a634:	d806      	bhi.n	800a644 <TIM_SlaveTimer_SetConfig+0x58>
 800a636:	2b10      	cmp	r3, #16
 800a638:	d058      	beq.n	800a6ec <TIM_SlaveTimer_SetConfig+0x100>
 800a63a:	2b20      	cmp	r3, #32
 800a63c:	d056      	beq.n	800a6ec <TIM_SlaveTimer_SetConfig+0x100>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d054      	beq.n	800a6ec <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800a642:	e054      	b.n	800a6ee <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800a644:	2b50      	cmp	r3, #80	; 0x50
 800a646:	d03d      	beq.n	800a6c4 <TIM_SlaveTimer_SetConfig+0xd8>
 800a648:	2b50      	cmp	r3, #80	; 0x50
 800a64a:	d802      	bhi.n	800a652 <TIM_SlaveTimer_SetConfig+0x66>
 800a64c:	2b40      	cmp	r3, #64	; 0x40
 800a64e:	d010      	beq.n	800a672 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800a650:	e04d      	b.n	800a6ee <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800a652:	2b60      	cmp	r3, #96	; 0x60
 800a654:	d040      	beq.n	800a6d8 <TIM_SlaveTimer_SetConfig+0xec>
 800a656:	2b70      	cmp	r3, #112	; 0x70
 800a658:	d000      	beq.n	800a65c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800a65a:	e048      	b.n	800a6ee <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6818      	ldr	r0, [r3, #0]
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	68d9      	ldr	r1, [r3, #12]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	689a      	ldr	r2, [r3, #8]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	f000 f8c0 	bl	800a7f0 <TIM_ETR_SetConfig>
      break;
 800a670:	e03d      	b.n	800a6ee <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2b05      	cmp	r3, #5
 800a678:	d101      	bne.n	800a67e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e038      	b.n	800a6f0 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	6a1b      	ldr	r3, [r3, #32]
 800a684:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6a1a      	ldr	r2, [r3, #32]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f022 0201 	bic.w	r2, r2, #1
 800a694:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6a4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	011b      	lsls	r3, r3, #4
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	693a      	ldr	r2, [r7, #16]
 800a6c0:	621a      	str	r2, [r3, #32]
      break;
 800a6c2:	e014      	b.n	800a6ee <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6818      	ldr	r0, [r3, #0]
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	6899      	ldr	r1, [r3, #8]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	f000 f813 	bl	800a6fc <TIM_TI1_ConfigInputStage>
      break;
 800a6d6:	e00a      	b.n	800a6ee <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	6899      	ldr	r1, [r3, #8]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	f000 f838 	bl	800a75a <TIM_TI2_ConfigInputStage>
      break;
 800a6ea:	e000      	b.n	800a6ee <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800a6ec:	bf00      	nop
  }
  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3718      	adds	r7, #24
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	fffefff8 	.word	0xfffefff8

0800a6fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	f023 0201 	bic.w	r2, r3, #1
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	4313      	orrs	r3, r2
 800a730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f023 030a 	bic.w	r3, r3, #10
 800a738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	4313      	orrs	r3, r2
 800a740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	621a      	str	r2, [r3, #32]
}
 800a74e:	bf00      	nop
 800a750:	371c      	adds	r7, #28
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a75a:	b480      	push	{r7}
 800a75c:	b087      	sub	sp, #28
 800a75e:	af00      	add	r7, sp, #0
 800a760:	60f8      	str	r0, [r7, #12]
 800a762:	60b9      	str	r1, [r7, #8]
 800a764:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6a1b      	ldr	r3, [r3, #32]
 800a76a:	f023 0210 	bic.w	r2, r3, #16
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6a1b      	ldr	r3, [r3, #32]
 800a77c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a784:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	031b      	lsls	r3, r3, #12
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a796:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	011b      	lsls	r3, r3, #4
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	697a      	ldr	r2, [r7, #20]
 800a7a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	621a      	str	r2, [r3, #32]
}
 800a7ae:	bf00      	nop
 800a7b0:	371c      	adds	r7, #28
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b085      	sub	sp, #20
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a7d2:	683a      	ldr	r2, [r7, #0]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	f043 0307 	orr.w	r3, r3, #7
 800a7dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	609a      	str	r2, [r3, #8]
}
 800a7e4:	bf00      	nop
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a80a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	021a      	lsls	r2, r3, #8
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	431a      	orrs	r2, r3
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	4313      	orrs	r3, r2
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	609a      	str	r2, [r3, #8]
}
 800a824:	bf00      	nop
 800a826:	371c      	adds	r7, #28
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a840:	2b01      	cmp	r3, #1
 800a842:	d101      	bne.n	800a848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a844:	2302      	movs	r3, #2
 800a846:	e06d      	b.n	800a924 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2202      	movs	r2, #2
 800a854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a30      	ldr	r2, [pc, #192]	; (800a930 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d004      	beq.n	800a87c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a2f      	ldr	r2, [pc, #188]	; (800a934 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d108      	bne.n	800a88e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a882:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a894:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a20      	ldr	r2, [pc, #128]	; (800a930 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d022      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ba:	d01d      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a1d      	ldr	r2, [pc, #116]	; (800a938 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d018      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a1c      	ldr	r2, [pc, #112]	; (800a93c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d013      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a1a      	ldr	r2, [pc, #104]	; (800a940 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d00e      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a15      	ldr	r2, [pc, #84]	; (800a934 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d009      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a16      	ldr	r2, [pc, #88]	; (800a944 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d004      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a15      	ldr	r2, [pc, #84]	; (800a948 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d10c      	bne.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	4313      	orrs	r3, r2
 800a908:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	40010000 	.word	0x40010000
 800a934:	40010400 	.word	0x40010400
 800a938:	40000400 	.word	0x40000400
 800a93c:	40000800 	.word	0x40000800
 800a940:	40000c00 	.word	0x40000c00
 800a944:	40014000 	.word	0x40014000
 800a948:	40001800 	.word	0x40001800

0800a94c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a956:	2300      	movs	r3, #0
 800a958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a960:	2b01      	cmp	r3, #1
 800a962:	d101      	bne.n	800a968 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a964:	2302      	movs	r3, #2
 800a966:	e065      	b.n	800aa34 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	4313      	orrs	r3, r2
 800a98a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	4313      	orrs	r3, r2
 800a998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	691b      	ldr	r3, [r3, #16]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	695b      	ldr	r3, [r3, #20]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	699b      	ldr	r3, [r3, #24]
 800a9dc:	041b      	lsls	r3, r3, #16
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a16      	ldr	r2, [pc, #88]	; (800aa40 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d004      	beq.n	800a9f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a14      	ldr	r2, [pc, #80]	; (800aa44 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d115      	bne.n	800aa22 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	051b      	lsls	r3, r3, #20
 800aa02:	4313      	orrs	r3, r2
 800aa04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3714      	adds	r7, #20
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	40010000 	.word	0x40010000
 800aa44:	40010400 	.word	0x40010400

0800aa48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa50:	bf00      	nop
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa78:	bf00      	nop
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d101      	bne.n	800aa96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e040      	b.n	800ab18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d106      	bne.n	800aaac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f7f9 ffbc 	bl	8004a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2224      	movs	r2, #36	; 0x24
 800aab0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f022 0201 	bic.w	r2, r2, #1
 800aac0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 f972 	bl	800adac <UART_SetConfig>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d101      	bne.n	800aad2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	e022      	b.n	800ab18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d002      	beq.n	800aae0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fc10 	bl	800b300 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aaee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	689a      	ldr	r2, [r3, #8]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aafe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f042 0201 	orr.w	r2, r2, #1
 800ab0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fc97 	bl	800b444 <UART_CheckIdleState>
 800ab16:	4603      	mov	r3, r0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b088      	sub	sp, #32
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	69db      	ldr	r3, [r3, #28]
 800ab2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ab40:	69fa      	ldr	r2, [r7, #28]
 800ab42:	f640 030f 	movw	r3, #2063	; 0x80f
 800ab46:	4013      	ands	r3, r2
 800ab48:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d113      	bne.n	800ab78 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	f003 0320 	and.w	r3, r3, #32
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00e      	beq.n	800ab78 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	f003 0320 	and.w	r3, r3, #32
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d009      	beq.n	800ab78 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f000 8100 	beq.w	800ad6e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	4798      	blx	r3
      }
      return;
 800ab76:	e0fa      	b.n	800ad6e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f000 80d5 	beq.w	800ad2a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	f003 0301 	and.w	r3, r3, #1
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d105      	bne.n	800ab96 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 80ca 	beq.w	800ad2a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	f003 0301 	and.w	r3, r3, #1
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00e      	beq.n	800abbe <HAL_UART_IRQHandler+0x9e>
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d009      	beq.n	800abbe <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2201      	movs	r2, #1
 800abb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abb6:	f043 0201 	orr.w	r2, r3, #1
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	f003 0302 	and.w	r3, r3, #2
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00e      	beq.n	800abe6 <HAL_UART_IRQHandler+0xc6>
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d009      	beq.n	800abe6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2202      	movs	r2, #2
 800abd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abde:	f043 0204 	orr.w	r2, r3, #4
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	f003 0304 	and.w	r3, r3, #4
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00e      	beq.n	800ac0e <HAL_UART_IRQHandler+0xee>
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d009      	beq.n	800ac0e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2204      	movs	r2, #4
 800ac00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac06:	f043 0202 	orr.w	r2, r3, #2
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	f003 0308 	and.w	r3, r3, #8
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d013      	beq.n	800ac40 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	f003 0320 	and.w	r3, r3, #32
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d104      	bne.n	800ac2c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d009      	beq.n	800ac40 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2208      	movs	r2, #8
 800ac32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac38:	f043 0208 	orr.w	r2, r3, #8
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00f      	beq.n	800ac6a <HAL_UART_IRQHandler+0x14a>
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00a      	beq.n	800ac6a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac62:	f043 0220 	orr.w	r2, r3, #32
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d07f      	beq.n	800ad72 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	f003 0320 	and.w	r3, r3, #32
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d00c      	beq.n	800ac96 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	f003 0320 	and.w	r3, r3, #32
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d007      	beq.n	800ac96 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d003      	beq.n	800ac96 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac9a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca6:	2b40      	cmp	r3, #64	; 0x40
 800aca8:	d004      	beq.n	800acb4 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d031      	beq.n	800ad18 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fc6f 	bl	800b598 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc4:	2b40      	cmp	r3, #64	; 0x40
 800acc6:	d123      	bne.n	800ad10 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	689a      	ldr	r2, [r3, #8]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acd6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d013      	beq.n	800ad08 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ace4:	4a26      	ldr	r2, [pc, #152]	; (800ad80 <HAL_UART_IRQHandler+0x260>)
 800ace6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acec:	4618      	mov	r0, r3
 800acee:	f7fa ffeb 	bl	8005cc8 <HAL_DMA_Abort_IT>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d016      	beq.n	800ad26 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ad02:	4610      	mov	r0, r2
 800ad04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad06:	e00e      	b.n	800ad26 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 f845 	bl	800ad98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad0e:	e00a      	b.n	800ad26 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f841 	bl	800ad98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad16:	e006      	b.n	800ad26 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f83d 	bl	800ad98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800ad24:	e025      	b.n	800ad72 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad26:	bf00      	nop
    return;
 800ad28:	e023      	b.n	800ad72 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00d      	beq.n	800ad50 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d008      	beq.n	800ad50 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d017      	beq.n	800ad76 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	4798      	blx	r3
    }
    return;
 800ad4e:	e012      	b.n	800ad76 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00e      	beq.n	800ad78 <HAL_UART_IRQHandler+0x258>
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d009      	beq.n	800ad78 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fc4d 	bl	800b604 <UART_EndTransmit_IT>
    return;
 800ad6a:	bf00      	nop
 800ad6c:	e004      	b.n	800ad78 <HAL_UART_IRQHandler+0x258>
      return;
 800ad6e:	bf00      	nop
 800ad70:	e002      	b.n	800ad78 <HAL_UART_IRQHandler+0x258>
    return;
 800ad72:	bf00      	nop
 800ad74:	e000      	b.n	800ad78 <HAL_UART_IRQHandler+0x258>
    return;
 800ad76:	bf00      	nop
  }

}
 800ad78:	3720      	adds	r7, #32
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	0800b5d9 	.word	0x0800b5d9

0800ad84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b088      	sub	sp, #32
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800adb4:	2300      	movs	r3, #0
 800adb6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	689a      	ldr	r2, [r3, #8]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	431a      	orrs	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	431a      	orrs	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	4313      	orrs	r3, r2
 800add2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	4bb1      	ldr	r3, [pc, #708]	; (800b0a0 <UART_SetConfig+0x2f4>)
 800addc:	4013      	ands	r3, r2
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	6812      	ldr	r2, [r2, #0]
 800ade2:	6939      	ldr	r1, [r7, #16]
 800ade4:	430b      	orrs	r3, r1
 800ade6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	68da      	ldr	r2, [r3, #12]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	430a      	orrs	r2, r1
 800adfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a1b      	ldr	r3, [r3, #32]
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	430a      	orrs	r2, r1
 800ae20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a9f      	ldr	r2, [pc, #636]	; (800b0a4 <UART_SetConfig+0x2f8>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d121      	bne.n	800ae70 <UART_SetConfig+0xc4>
 800ae2c:	4b9e      	ldr	r3, [pc, #632]	; (800b0a8 <UART_SetConfig+0x2fc>)
 800ae2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae32:	f003 0303 	and.w	r3, r3, #3
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	d816      	bhi.n	800ae68 <UART_SetConfig+0xbc>
 800ae3a:	a201      	add	r2, pc, #4	; (adr r2, 800ae40 <UART_SetConfig+0x94>)
 800ae3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae40:	0800ae51 	.word	0x0800ae51
 800ae44:	0800ae5d 	.word	0x0800ae5d
 800ae48:	0800ae57 	.word	0x0800ae57
 800ae4c:	0800ae63 	.word	0x0800ae63
 800ae50:	2301      	movs	r3, #1
 800ae52:	77fb      	strb	r3, [r7, #31]
 800ae54:	e151      	b.n	800b0fa <UART_SetConfig+0x34e>
 800ae56:	2302      	movs	r3, #2
 800ae58:	77fb      	strb	r3, [r7, #31]
 800ae5a:	e14e      	b.n	800b0fa <UART_SetConfig+0x34e>
 800ae5c:	2304      	movs	r3, #4
 800ae5e:	77fb      	strb	r3, [r7, #31]
 800ae60:	e14b      	b.n	800b0fa <UART_SetConfig+0x34e>
 800ae62:	2308      	movs	r3, #8
 800ae64:	77fb      	strb	r3, [r7, #31]
 800ae66:	e148      	b.n	800b0fa <UART_SetConfig+0x34e>
 800ae68:	2310      	movs	r3, #16
 800ae6a:	77fb      	strb	r3, [r7, #31]
 800ae6c:	bf00      	nop
 800ae6e:	e144      	b.n	800b0fa <UART_SetConfig+0x34e>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a8d      	ldr	r2, [pc, #564]	; (800b0ac <UART_SetConfig+0x300>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d134      	bne.n	800aee4 <UART_SetConfig+0x138>
 800ae7a:	4b8b      	ldr	r3, [pc, #556]	; (800b0a8 <UART_SetConfig+0x2fc>)
 800ae7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae80:	f003 030c 	and.w	r3, r3, #12
 800ae84:	2b0c      	cmp	r3, #12
 800ae86:	d829      	bhi.n	800aedc <UART_SetConfig+0x130>
 800ae88:	a201      	add	r2, pc, #4	; (adr r2, 800ae90 <UART_SetConfig+0xe4>)
 800ae8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8e:	bf00      	nop
 800ae90:	0800aec5 	.word	0x0800aec5
 800ae94:	0800aedd 	.word	0x0800aedd
 800ae98:	0800aedd 	.word	0x0800aedd
 800ae9c:	0800aedd 	.word	0x0800aedd
 800aea0:	0800aed1 	.word	0x0800aed1
 800aea4:	0800aedd 	.word	0x0800aedd
 800aea8:	0800aedd 	.word	0x0800aedd
 800aeac:	0800aedd 	.word	0x0800aedd
 800aeb0:	0800aecb 	.word	0x0800aecb
 800aeb4:	0800aedd 	.word	0x0800aedd
 800aeb8:	0800aedd 	.word	0x0800aedd
 800aebc:	0800aedd 	.word	0x0800aedd
 800aec0:	0800aed7 	.word	0x0800aed7
 800aec4:	2300      	movs	r3, #0
 800aec6:	77fb      	strb	r3, [r7, #31]
 800aec8:	e117      	b.n	800b0fa <UART_SetConfig+0x34e>
 800aeca:	2302      	movs	r3, #2
 800aecc:	77fb      	strb	r3, [r7, #31]
 800aece:	e114      	b.n	800b0fa <UART_SetConfig+0x34e>
 800aed0:	2304      	movs	r3, #4
 800aed2:	77fb      	strb	r3, [r7, #31]
 800aed4:	e111      	b.n	800b0fa <UART_SetConfig+0x34e>
 800aed6:	2308      	movs	r3, #8
 800aed8:	77fb      	strb	r3, [r7, #31]
 800aeda:	e10e      	b.n	800b0fa <UART_SetConfig+0x34e>
 800aedc:	2310      	movs	r3, #16
 800aede:	77fb      	strb	r3, [r7, #31]
 800aee0:	bf00      	nop
 800aee2:	e10a      	b.n	800b0fa <UART_SetConfig+0x34e>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a71      	ldr	r2, [pc, #452]	; (800b0b0 <UART_SetConfig+0x304>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d120      	bne.n	800af30 <UART_SetConfig+0x184>
 800aeee:	4b6e      	ldr	r3, [pc, #440]	; (800b0a8 <UART_SetConfig+0x2fc>)
 800aef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aef8:	2b10      	cmp	r3, #16
 800aefa:	d00f      	beq.n	800af1c <UART_SetConfig+0x170>
 800aefc:	2b10      	cmp	r3, #16
 800aefe:	d802      	bhi.n	800af06 <UART_SetConfig+0x15a>
 800af00:	2b00      	cmp	r3, #0
 800af02:	d005      	beq.n	800af10 <UART_SetConfig+0x164>
 800af04:	e010      	b.n	800af28 <UART_SetConfig+0x17c>
 800af06:	2b20      	cmp	r3, #32
 800af08:	d005      	beq.n	800af16 <UART_SetConfig+0x16a>
 800af0a:	2b30      	cmp	r3, #48	; 0x30
 800af0c:	d009      	beq.n	800af22 <UART_SetConfig+0x176>
 800af0e:	e00b      	b.n	800af28 <UART_SetConfig+0x17c>
 800af10:	2300      	movs	r3, #0
 800af12:	77fb      	strb	r3, [r7, #31]
 800af14:	e0f1      	b.n	800b0fa <UART_SetConfig+0x34e>
 800af16:	2302      	movs	r3, #2
 800af18:	77fb      	strb	r3, [r7, #31]
 800af1a:	e0ee      	b.n	800b0fa <UART_SetConfig+0x34e>
 800af1c:	2304      	movs	r3, #4
 800af1e:	77fb      	strb	r3, [r7, #31]
 800af20:	e0eb      	b.n	800b0fa <UART_SetConfig+0x34e>
 800af22:	2308      	movs	r3, #8
 800af24:	77fb      	strb	r3, [r7, #31]
 800af26:	e0e8      	b.n	800b0fa <UART_SetConfig+0x34e>
 800af28:	2310      	movs	r3, #16
 800af2a:	77fb      	strb	r3, [r7, #31]
 800af2c:	bf00      	nop
 800af2e:	e0e4      	b.n	800b0fa <UART_SetConfig+0x34e>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a5f      	ldr	r2, [pc, #380]	; (800b0b4 <UART_SetConfig+0x308>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d120      	bne.n	800af7c <UART_SetConfig+0x1d0>
 800af3a:	4b5b      	ldr	r3, [pc, #364]	; (800b0a8 <UART_SetConfig+0x2fc>)
 800af3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800af44:	2b40      	cmp	r3, #64	; 0x40
 800af46:	d00f      	beq.n	800af68 <UART_SetConfig+0x1bc>
 800af48:	2b40      	cmp	r3, #64	; 0x40
 800af4a:	d802      	bhi.n	800af52 <UART_SetConfig+0x1a6>
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d005      	beq.n	800af5c <UART_SetConfig+0x1b0>
 800af50:	e010      	b.n	800af74 <UART_SetConfig+0x1c8>
 800af52:	2b80      	cmp	r3, #128	; 0x80
 800af54:	d005      	beq.n	800af62 <UART_SetConfig+0x1b6>
 800af56:	2bc0      	cmp	r3, #192	; 0xc0
 800af58:	d009      	beq.n	800af6e <UART_SetConfig+0x1c2>
 800af5a:	e00b      	b.n	800af74 <UART_SetConfig+0x1c8>
 800af5c:	2300      	movs	r3, #0
 800af5e:	77fb      	strb	r3, [r7, #31]
 800af60:	e0cb      	b.n	800b0fa <UART_SetConfig+0x34e>
 800af62:	2302      	movs	r3, #2
 800af64:	77fb      	strb	r3, [r7, #31]
 800af66:	e0c8      	b.n	800b0fa <UART_SetConfig+0x34e>
 800af68:	2304      	movs	r3, #4
 800af6a:	77fb      	strb	r3, [r7, #31]
 800af6c:	e0c5      	b.n	800b0fa <UART_SetConfig+0x34e>
 800af6e:	2308      	movs	r3, #8
 800af70:	77fb      	strb	r3, [r7, #31]
 800af72:	e0c2      	b.n	800b0fa <UART_SetConfig+0x34e>
 800af74:	2310      	movs	r3, #16
 800af76:	77fb      	strb	r3, [r7, #31]
 800af78:	bf00      	nop
 800af7a:	e0be      	b.n	800b0fa <UART_SetConfig+0x34e>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a4d      	ldr	r2, [pc, #308]	; (800b0b8 <UART_SetConfig+0x30c>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d124      	bne.n	800afd0 <UART_SetConfig+0x224>
 800af86:	4b48      	ldr	r3, [pc, #288]	; (800b0a8 <UART_SetConfig+0x2fc>)
 800af88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af94:	d012      	beq.n	800afbc <UART_SetConfig+0x210>
 800af96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af9a:	d802      	bhi.n	800afa2 <UART_SetConfig+0x1f6>
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d007      	beq.n	800afb0 <UART_SetConfig+0x204>
 800afa0:	e012      	b.n	800afc8 <UART_SetConfig+0x21c>
 800afa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afa6:	d006      	beq.n	800afb6 <UART_SetConfig+0x20a>
 800afa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afac:	d009      	beq.n	800afc2 <UART_SetConfig+0x216>
 800afae:	e00b      	b.n	800afc8 <UART_SetConfig+0x21c>
 800afb0:	2300      	movs	r3, #0
 800afb2:	77fb      	strb	r3, [r7, #31]
 800afb4:	e0a1      	b.n	800b0fa <UART_SetConfig+0x34e>
 800afb6:	2302      	movs	r3, #2
 800afb8:	77fb      	strb	r3, [r7, #31]
 800afba:	e09e      	b.n	800b0fa <UART_SetConfig+0x34e>
 800afbc:	2304      	movs	r3, #4
 800afbe:	77fb      	strb	r3, [r7, #31]
 800afc0:	e09b      	b.n	800b0fa <UART_SetConfig+0x34e>
 800afc2:	2308      	movs	r3, #8
 800afc4:	77fb      	strb	r3, [r7, #31]
 800afc6:	e098      	b.n	800b0fa <UART_SetConfig+0x34e>
 800afc8:	2310      	movs	r3, #16
 800afca:	77fb      	strb	r3, [r7, #31]
 800afcc:	bf00      	nop
 800afce:	e094      	b.n	800b0fa <UART_SetConfig+0x34e>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a39      	ldr	r2, [pc, #228]	; (800b0bc <UART_SetConfig+0x310>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d124      	bne.n	800b024 <UART_SetConfig+0x278>
 800afda:	4b33      	ldr	r3, [pc, #204]	; (800b0a8 <UART_SetConfig+0x2fc>)
 800afdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afe0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800afe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afe8:	d012      	beq.n	800b010 <UART_SetConfig+0x264>
 800afea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afee:	d802      	bhi.n	800aff6 <UART_SetConfig+0x24a>
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d007      	beq.n	800b004 <UART_SetConfig+0x258>
 800aff4:	e012      	b.n	800b01c <UART_SetConfig+0x270>
 800aff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800affa:	d006      	beq.n	800b00a <UART_SetConfig+0x25e>
 800affc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b000:	d009      	beq.n	800b016 <UART_SetConfig+0x26a>
 800b002:	e00b      	b.n	800b01c <UART_SetConfig+0x270>
 800b004:	2301      	movs	r3, #1
 800b006:	77fb      	strb	r3, [r7, #31]
 800b008:	e077      	b.n	800b0fa <UART_SetConfig+0x34e>
 800b00a:	2302      	movs	r3, #2
 800b00c:	77fb      	strb	r3, [r7, #31]
 800b00e:	e074      	b.n	800b0fa <UART_SetConfig+0x34e>
 800b010:	2304      	movs	r3, #4
 800b012:	77fb      	strb	r3, [r7, #31]
 800b014:	e071      	b.n	800b0fa <UART_SetConfig+0x34e>
 800b016:	2308      	movs	r3, #8
 800b018:	77fb      	strb	r3, [r7, #31]
 800b01a:	e06e      	b.n	800b0fa <UART_SetConfig+0x34e>
 800b01c:	2310      	movs	r3, #16
 800b01e:	77fb      	strb	r3, [r7, #31]
 800b020:	bf00      	nop
 800b022:	e06a      	b.n	800b0fa <UART_SetConfig+0x34e>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a25      	ldr	r2, [pc, #148]	; (800b0c0 <UART_SetConfig+0x314>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d124      	bne.n	800b078 <UART_SetConfig+0x2cc>
 800b02e:	4b1e      	ldr	r3, [pc, #120]	; (800b0a8 <UART_SetConfig+0x2fc>)
 800b030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b034:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b03c:	d012      	beq.n	800b064 <UART_SetConfig+0x2b8>
 800b03e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b042:	d802      	bhi.n	800b04a <UART_SetConfig+0x29e>
 800b044:	2b00      	cmp	r3, #0
 800b046:	d007      	beq.n	800b058 <UART_SetConfig+0x2ac>
 800b048:	e012      	b.n	800b070 <UART_SetConfig+0x2c4>
 800b04a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b04e:	d006      	beq.n	800b05e <UART_SetConfig+0x2b2>
 800b050:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b054:	d009      	beq.n	800b06a <UART_SetConfig+0x2be>
 800b056:	e00b      	b.n	800b070 <UART_SetConfig+0x2c4>
 800b058:	2300      	movs	r3, #0
 800b05a:	77fb      	strb	r3, [r7, #31]
 800b05c:	e04d      	b.n	800b0fa <UART_SetConfig+0x34e>
 800b05e:	2302      	movs	r3, #2
 800b060:	77fb      	strb	r3, [r7, #31]
 800b062:	e04a      	b.n	800b0fa <UART_SetConfig+0x34e>
 800b064:	2304      	movs	r3, #4
 800b066:	77fb      	strb	r3, [r7, #31]
 800b068:	e047      	b.n	800b0fa <UART_SetConfig+0x34e>
 800b06a:	2308      	movs	r3, #8
 800b06c:	77fb      	strb	r3, [r7, #31]
 800b06e:	e044      	b.n	800b0fa <UART_SetConfig+0x34e>
 800b070:	2310      	movs	r3, #16
 800b072:	77fb      	strb	r3, [r7, #31]
 800b074:	bf00      	nop
 800b076:	e040      	b.n	800b0fa <UART_SetConfig+0x34e>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a11      	ldr	r2, [pc, #68]	; (800b0c4 <UART_SetConfig+0x318>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d139      	bne.n	800b0f6 <UART_SetConfig+0x34a>
 800b082:	4b09      	ldr	r3, [pc, #36]	; (800b0a8 <UART_SetConfig+0x2fc>)
 800b084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b08c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b090:	d027      	beq.n	800b0e2 <UART_SetConfig+0x336>
 800b092:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b096:	d817      	bhi.n	800b0c8 <UART_SetConfig+0x31c>
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d01c      	beq.n	800b0d6 <UART_SetConfig+0x32a>
 800b09c:	e027      	b.n	800b0ee <UART_SetConfig+0x342>
 800b09e:	bf00      	nop
 800b0a0:	efff69f3 	.word	0xefff69f3
 800b0a4:	40011000 	.word	0x40011000
 800b0a8:	40023800 	.word	0x40023800
 800b0ac:	40004400 	.word	0x40004400
 800b0b0:	40004800 	.word	0x40004800
 800b0b4:	40004c00 	.word	0x40004c00
 800b0b8:	40005000 	.word	0x40005000
 800b0bc:	40011400 	.word	0x40011400
 800b0c0:	40007800 	.word	0x40007800
 800b0c4:	40007c00 	.word	0x40007c00
 800b0c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0cc:	d006      	beq.n	800b0dc <UART_SetConfig+0x330>
 800b0ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b0d2:	d009      	beq.n	800b0e8 <UART_SetConfig+0x33c>
 800b0d4:	e00b      	b.n	800b0ee <UART_SetConfig+0x342>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	77fb      	strb	r3, [r7, #31]
 800b0da:	e00e      	b.n	800b0fa <UART_SetConfig+0x34e>
 800b0dc:	2302      	movs	r3, #2
 800b0de:	77fb      	strb	r3, [r7, #31]
 800b0e0:	e00b      	b.n	800b0fa <UART_SetConfig+0x34e>
 800b0e2:	2304      	movs	r3, #4
 800b0e4:	77fb      	strb	r3, [r7, #31]
 800b0e6:	e008      	b.n	800b0fa <UART_SetConfig+0x34e>
 800b0e8:	2308      	movs	r3, #8
 800b0ea:	77fb      	strb	r3, [r7, #31]
 800b0ec:	e005      	b.n	800b0fa <UART_SetConfig+0x34e>
 800b0ee:	2310      	movs	r3, #16
 800b0f0:	77fb      	strb	r3, [r7, #31]
 800b0f2:	bf00      	nop
 800b0f4:	e001      	b.n	800b0fa <UART_SetConfig+0x34e>
 800b0f6:	2310      	movs	r3, #16
 800b0f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	69db      	ldr	r3, [r3, #28]
 800b0fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b102:	d17f      	bne.n	800b204 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b104:	7ffb      	ldrb	r3, [r7, #31]
 800b106:	2b08      	cmp	r3, #8
 800b108:	d85c      	bhi.n	800b1c4 <UART_SetConfig+0x418>
 800b10a:	a201      	add	r2, pc, #4	; (adr r2, 800b110 <UART_SetConfig+0x364>)
 800b10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b110:	0800b135 	.word	0x0800b135
 800b114:	0800b155 	.word	0x0800b155
 800b118:	0800b175 	.word	0x0800b175
 800b11c:	0800b1c5 	.word	0x0800b1c5
 800b120:	0800b18d 	.word	0x0800b18d
 800b124:	0800b1c5 	.word	0x0800b1c5
 800b128:	0800b1c5 	.word	0x0800b1c5
 800b12c:	0800b1c5 	.word	0x0800b1c5
 800b130:	0800b1ad 	.word	0x0800b1ad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b134:	f7fd f9e2 	bl	80084fc <HAL_RCC_GetPCLK1Freq>
 800b138:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	005a      	lsls	r2, r3, #1
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	085b      	lsrs	r3, r3, #1
 800b144:	441a      	add	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b14e:	b29b      	uxth	r3, r3
 800b150:	61bb      	str	r3, [r7, #24]
        break;
 800b152:	e03a      	b.n	800b1ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b154:	f7fd f9e6 	bl	8008524 <HAL_RCC_GetPCLK2Freq>
 800b158:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	005a      	lsls	r2, r3, #1
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	085b      	lsrs	r3, r3, #1
 800b164:	441a      	add	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b16e:	b29b      	uxth	r3, r3
 800b170:	61bb      	str	r3, [r7, #24]
        break;
 800b172:	e02a      	b.n	800b1ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	085a      	lsrs	r2, r3, #1
 800b17a:	4b5f      	ldr	r3, [pc, #380]	; (800b2f8 <UART_SetConfig+0x54c>)
 800b17c:	4413      	add	r3, r2
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	6852      	ldr	r2, [r2, #4]
 800b182:	fbb3 f3f2 	udiv	r3, r3, r2
 800b186:	b29b      	uxth	r3, r3
 800b188:	61bb      	str	r3, [r7, #24]
        break;
 800b18a:	e01e      	b.n	800b1ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b18c:	f7fd f8f8 	bl	8008380 <HAL_RCC_GetSysClockFreq>
 800b190:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	005a      	lsls	r2, r3, #1
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	085b      	lsrs	r3, r3, #1
 800b19c:	441a      	add	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	61bb      	str	r3, [r7, #24]
        break;
 800b1aa:	e00e      	b.n	800b1ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	085b      	lsrs	r3, r3, #1
 800b1b2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	61bb      	str	r3, [r7, #24]
        break;
 800b1c2:	e002      	b.n	800b1ca <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	75fb      	strb	r3, [r7, #23]
        break;
 800b1c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	2b0f      	cmp	r3, #15
 800b1ce:	d916      	bls.n	800b1fe <UART_SetConfig+0x452>
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1d6:	d212      	bcs.n	800b1fe <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	f023 030f 	bic.w	r3, r3, #15
 800b1e0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	085b      	lsrs	r3, r3, #1
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	f003 0307 	and.w	r3, r3, #7
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	897b      	ldrh	r3, [r7, #10]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	897a      	ldrh	r2, [r7, #10]
 800b1fa:	60da      	str	r2, [r3, #12]
 800b1fc:	e070      	b.n	800b2e0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	75fb      	strb	r3, [r7, #23]
 800b202:	e06d      	b.n	800b2e0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b204:	7ffb      	ldrb	r3, [r7, #31]
 800b206:	2b08      	cmp	r3, #8
 800b208:	d859      	bhi.n	800b2be <UART_SetConfig+0x512>
 800b20a:	a201      	add	r2, pc, #4	; (adr r2, 800b210 <UART_SetConfig+0x464>)
 800b20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b210:	0800b235 	.word	0x0800b235
 800b214:	0800b253 	.word	0x0800b253
 800b218:	0800b271 	.word	0x0800b271
 800b21c:	0800b2bf 	.word	0x0800b2bf
 800b220:	0800b289 	.word	0x0800b289
 800b224:	0800b2bf 	.word	0x0800b2bf
 800b228:	0800b2bf 	.word	0x0800b2bf
 800b22c:	0800b2bf 	.word	0x0800b2bf
 800b230:	0800b2a7 	.word	0x0800b2a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b234:	f7fd f962 	bl	80084fc <HAL_RCC_GetPCLK1Freq>
 800b238:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	085a      	lsrs	r2, r3, #1
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	441a      	add	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	fbb2 f3f3 	udiv	r3, r2, r3
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	61bb      	str	r3, [r7, #24]
        break;
 800b250:	e038      	b.n	800b2c4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b252:	f7fd f967 	bl	8008524 <HAL_RCC_GetPCLK2Freq>
 800b256:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	085a      	lsrs	r2, r3, #1
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	441a      	add	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	fbb2 f3f3 	udiv	r3, r2, r3
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	61bb      	str	r3, [r7, #24]
        break;
 800b26e:	e029      	b.n	800b2c4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	085a      	lsrs	r2, r3, #1
 800b276:	4b21      	ldr	r3, [pc, #132]	; (800b2fc <UART_SetConfig+0x550>)
 800b278:	4413      	add	r3, r2
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	6852      	ldr	r2, [r2, #4]
 800b27e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b282:	b29b      	uxth	r3, r3
 800b284:	61bb      	str	r3, [r7, #24]
        break;
 800b286:	e01d      	b.n	800b2c4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b288:	f7fd f87a 	bl	8008380 <HAL_RCC_GetSysClockFreq>
 800b28c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	085a      	lsrs	r2, r3, #1
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	441a      	add	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	61bb      	str	r3, [r7, #24]
        break;
 800b2a4:	e00e      	b.n	800b2c4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	085b      	lsrs	r3, r3, #1
 800b2ac:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	61bb      	str	r3, [r7, #24]
        break;
 800b2bc:	e002      	b.n	800b2c4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	75fb      	strb	r3, [r7, #23]
        break;
 800b2c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	2b0f      	cmp	r3, #15
 800b2c8:	d908      	bls.n	800b2dc <UART_SetConfig+0x530>
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2d0:	d204      	bcs.n	800b2dc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	69ba      	ldr	r2, [r7, #24]
 800b2d8:	60da      	str	r2, [r3, #12]
 800b2da:	e001      	b.n	800b2e0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3720      	adds	r7, #32
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	01e84800 	.word	0x01e84800
 800b2fc:	00f42400 	.word	0x00f42400

0800b300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30c:	f003 0301 	and.w	r3, r3, #1
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00a      	beq.n	800b32a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	430a      	orrs	r2, r1
 800b328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32e:	f003 0302 	and.w	r3, r3, #2
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00a      	beq.n	800b34c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	430a      	orrs	r2, r1
 800b34a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b350:	f003 0304 	and.w	r3, r3, #4
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00a      	beq.n	800b36e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	430a      	orrs	r2, r1
 800b36c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b372:	f003 0308 	and.w	r3, r3, #8
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00a      	beq.n	800b390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	430a      	orrs	r2, r1
 800b38e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b394:	f003 0310 	and.w	r3, r3, #16
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00a      	beq.n	800b3b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b6:	f003 0320 	and.w	r3, r3, #32
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00a      	beq.n	800b3d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	430a      	orrs	r2, r1
 800b3d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d01a      	beq.n	800b416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3fe:	d10a      	bne.n	800b416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	430a      	orrs	r2, r1
 800b414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00a      	beq.n	800b438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	430a      	orrs	r2, r1
 800b436:	605a      	str	r2, [r3, #4]
  }
}
 800b438:	bf00      	nop
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af02      	add	r7, sp, #8
 800b44a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b452:	f7f9 fd75 	bl	8004f40 <HAL_GetTick>
 800b456:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f003 0308 	and.w	r3, r3, #8
 800b462:	2b08      	cmp	r3, #8
 800b464:	d10e      	bne.n	800b484 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b466:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2200      	movs	r2, #0
 800b470:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f814 	bl	800b4a2 <UART_WaitOnFlagUntilTimeout>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b480:	2303      	movs	r3, #3
 800b482:	e00a      	b.n	800b49a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2220      	movs	r2, #32
 800b488:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2220      	movs	r2, #32
 800b48e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b084      	sub	sp, #16
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	603b      	str	r3, [r7, #0]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4b2:	e05d      	b.n	800b570 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ba:	d059      	beq.n	800b570 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4bc:	f7f9 fd40 	bl	8004f40 <HAL_GetTick>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	1ad3      	subs	r3, r2, r3
 800b4c6:	69ba      	ldr	r2, [r7, #24]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d302      	bcc.n	800b4d2 <UART_WaitOnFlagUntilTimeout+0x30>
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d11b      	bne.n	800b50a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b4e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	689a      	ldr	r2, [r3, #8]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f022 0201 	bic.w	r2, r2, #1
 800b4f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2220      	movs	r2, #32
 800b4f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2220      	movs	r2, #32
 800b4fc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b506:	2303      	movs	r3, #3
 800b508:	e042      	b.n	800b590 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 0304 	and.w	r3, r3, #4
 800b514:	2b00      	cmp	r3, #0
 800b516:	d02b      	beq.n	800b570 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b526:	d123      	bne.n	800b570 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b530:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b540:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	689a      	ldr	r2, [r3, #8]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f022 0201 	bic.w	r2, r2, #1
 800b550:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2220      	movs	r2, #32
 800b556:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2220      	movs	r2, #32
 800b55c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2220      	movs	r2, #32
 800b562:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2200      	movs	r2, #0
 800b568:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b56c:	2303      	movs	r3, #3
 800b56e:	e00f      	b.n	800b590 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	69da      	ldr	r2, [r3, #28]
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	4013      	ands	r3, r2
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	bf0c      	ite	eq
 800b580:	2301      	moveq	r3, #1
 800b582:	2300      	movne	r3, #0
 800b584:	b2db      	uxtb	r3, r3
 800b586:	461a      	mov	r2, r3
 800b588:	79fb      	ldrb	r3, [r7, #7]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d092      	beq.n	800b4b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b5ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689a      	ldr	r2, [r3, #8]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f022 0201 	bic.w	r2, r2, #1
 800b5be:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2220      	movs	r2, #32
 800b5c4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b5cc:	bf00      	nop
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f7ff fbce 	bl	800ad98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5fc:	bf00      	nop
 800b5fe:	3710      	adds	r7, #16
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b61a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2220      	movs	r2, #32
 800b620:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f7ff fbab 	bl	800ad84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b62e:	bf00      	nop
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
	...

0800b638 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b642:	2300      	movs	r3, #0
 800b644:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b646:	2300      	movs	r3, #0
 800b648:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d027      	beq.n	800b6a2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	4b2f      	ldr	r3, [pc, #188]	; (800b718 <FMC_SDRAM_Init+0xe0>)
 800b65c:	4013      	ands	r3, r2
 800b65e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b668:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b66e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b674:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b67a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b680:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b686:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b68c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b692:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	4313      	orrs	r3, r2
 800b698:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	601a      	str	r2, [r3, #0]
 800b6a0:	e032      	b.n	800b708 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b6ae:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b6b8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b6be:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	4b12      	ldr	r3, [pc, #72]	; (800b718 <FMC_SDRAM_Init+0xe0>)
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b6dc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b6e2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b6e8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b6ee:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b6f4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b708:	2300      	movs	r3, #0
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3714      	adds	r7, #20
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	ffff8000 	.word	0xffff8000

0800b71c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b087      	sub	sp, #28
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b728:	2300      	movs	r3, #0
 800b72a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b72c:	2300      	movs	r3, #0
 800b72e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2b01      	cmp	r3, #1
 800b734:	d02e      	beq.n	800b794 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b742:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	3b01      	subs	r3, #1
 800b750:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b752:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	3b01      	subs	r3, #1
 800b75a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b75c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	3b01      	subs	r3, #1
 800b764:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b766:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b770:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	695b      	ldr	r3, [r3, #20]
 800b776:	3b01      	subs	r3, #1
 800b778:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b77a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	3b01      	subs	r3, #1
 800b782:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b784:	4313      	orrs	r3, r2
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	4313      	orrs	r3, r2
 800b78a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	697a      	ldr	r2, [r7, #20]
 800b790:	609a      	str	r2, [r3, #8]
 800b792:	e039      	b.n	800b808 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	4b1e      	ldr	r3, [pc, #120]	; (800b818 <FMC_SDRAM_Timing_Init+0xfc>)
 800b79e:	4013      	ands	r3, r2
 800b7a0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	695b      	ldr	r3, [r3, #20]
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b7c6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b7d6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b7e0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b7ea:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	699b      	ldr	r3, [r3, #24]
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	693a      	ldr	r2, [r7, #16]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	697a      	ldr	r2, [r7, #20]
 800b800:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	371c      	adds	r7, #28
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop
 800b818:	ff0f0fff 	.word	0xff0f0fff

0800b81c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b087      	sub	sp, #28
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b828:	2300      	movs	r3, #0
 800b82a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b834:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	3b01      	subs	r3, #1
 800b83c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b83e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b846:	4313      	orrs	r3, r2
 800b848:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	371c      	adds	r7, #28
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr

0800b85e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b85e:	b480      	push	{r7}
 800b860:	b083      	sub	sp, #12
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	695a      	ldr	r2, [r3, #20]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	005b      	lsls	r3, r3, #1
 800b870:	431a      	orrs	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b876:	2300      	movs	r3, #0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	4603      	mov	r3, r0
 800b88c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b88e:	2300      	movs	r3, #0
 800b890:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b896:	2b84      	cmp	r3, #132	; 0x84
 800b898:	d005      	beq.n	800b8a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b89a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	3303      	adds	r3, #3
 800b8a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3714      	adds	r7, #20
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b8b8:	f001 f840 	bl	800c93c <vTaskStartScheduler>
  
  return osOK;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b8c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8c4:	b089      	sub	sp, #36	; 0x24
 800b8c6:	af04      	add	r7, sp, #16
 800b8c8:	6078      	str	r0, [r7, #4]
 800b8ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	695b      	ldr	r3, [r3, #20]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d020      	beq.n	800b916 <osThreadCreate+0x54>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	699b      	ldr	r3, [r3, #24]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d01c      	beq.n	800b916 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	685c      	ldr	r4, [r3, #4]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681d      	ldr	r5, [r3, #0]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	691e      	ldr	r6, [r3, #16]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7ff ffc8 	bl	800b884 <makeFreeRtosPriority>
 800b8f4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	695b      	ldr	r3, [r3, #20]
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b8fe:	9202      	str	r2, [sp, #8]
 800b900:	9301      	str	r3, [sp, #4]
 800b902:	9100      	str	r1, [sp, #0]
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	4632      	mov	r2, r6
 800b908:	4629      	mov	r1, r5
 800b90a:	4620      	mov	r0, r4
 800b90c:	f000 fdae 	bl	800c46c <xTaskCreateStatic>
 800b910:	4603      	mov	r3, r0
 800b912:	60fb      	str	r3, [r7, #12]
 800b914:	e01c      	b.n	800b950 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	685c      	ldr	r4, [r3, #4]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b922:	b29e      	uxth	r6, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7ff ffaa 	bl	800b884 <makeFreeRtosPriority>
 800b930:	4602      	mov	r2, r0
 800b932:	f107 030c 	add.w	r3, r7, #12
 800b936:	9301      	str	r3, [sp, #4]
 800b938:	9200      	str	r2, [sp, #0]
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	4632      	mov	r2, r6
 800b93e:	4629      	mov	r1, r5
 800b940:	4620      	mov	r0, r4
 800b942:	f000 fdf3 	bl	800c52c <xTaskCreate>
 800b946:	4603      	mov	r3, r0
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d001      	beq.n	800b950 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b94c:	2300      	movs	r3, #0
 800b94e:	e000      	b.n	800b952 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b950:	68fb      	ldr	r3, [r7, #12]
}
 800b952:	4618      	mov	r0, r3
 800b954:	3714      	adds	r7, #20
 800b956:	46bd      	mov	sp, r7
 800b958:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b95a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b084      	sub	sp, #16
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d001      	beq.n	800b970 <osDelay+0x16>
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	e000      	b.n	800b972 <osDelay+0x18>
 800b970:	2301      	movs	r3, #1
 800b972:	4618      	mov	r0, r3
 800b974:	f000 ff1c 	bl	800c7b0 <vTaskDelay>
  
  return osOK;
 800b978:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b082      	sub	sp, #8
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d007      	beq.n	800b9a2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	4619      	mov	r1, r3
 800b998:	2001      	movs	r0, #1
 800b99a:	f000 fa38 	bl	800be0e <xQueueCreateMutexStatic>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	e003      	b.n	800b9aa <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b9a2:	2001      	movs	r0, #1
 800b9a4:	f000 fa1b 	bl	800bdde <xQueueCreateMutex>
 800b9a8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b9b2:	b480      	push	{r7}
 800b9b4:	b083      	sub	sp, #12
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f103 0208 	add.w	r2, r3, #8
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f103 0208 	add.w	r2, r3, #8
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f103 0208 	add.w	r2, r3, #8
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b9e6:	bf00      	nop
 800b9e8:	370c      	adds	r7, #12
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b083      	sub	sp, #12
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba00:	bf00      	nop
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	689a      	ldr	r2, [r3, #8]
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	683a      	ldr	r2, [r7, #0]
 800ba36:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	1c5a      	adds	r2, r3, #1
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	601a      	str	r2, [r3, #0]
}
 800ba48:	bf00      	nop
 800ba4a:	3714      	adds	r7, #20
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6a:	d103      	bne.n	800ba74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	691b      	ldr	r3, [r3, #16]
 800ba70:	60fb      	str	r3, [r7, #12]
 800ba72:	e00c      	b.n	800ba8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	3308      	adds	r3, #8
 800ba78:	60fb      	str	r3, [r7, #12]
 800ba7a:	e002      	b.n	800ba82 <vListInsert+0x2e>
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	60fb      	str	r3, [r7, #12]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d2f6      	bcs.n	800ba7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	685a      	ldr	r2, [r3, #4]
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	683a      	ldr	r2, [r7, #0]
 800ba9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	683a      	ldr	r2, [r7, #0]
 800baa8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	1c5a      	adds	r2, r3, #1
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	601a      	str	r2, [r3, #0]
}
 800baba:	bf00      	nop
 800babc:	3714      	adds	r7, #20
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr

0800bac6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bac6:	b480      	push	{r7}
 800bac8:	b085      	sub	sp, #20
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	6892      	ldr	r2, [r2, #8]
 800badc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	6852      	ldr	r2, [r2, #4]
 800bae6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d103      	bne.n	800bafa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	689a      	ldr	r2, [r3, #8]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	1e5a      	subs	r2, r3, #1
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
	...

0800bb1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10b      	bne.n	800bb48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	b672      	cpsid	i
 800bb36:	f383 8811 	msr	BASEPRI, r3
 800bb3a:	f3bf 8f6f 	isb	sy
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	b662      	cpsie	i
 800bb44:	60bb      	str	r3, [r7, #8]
 800bb46:	e7fe      	b.n	800bb46 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800bb48:	f001 fe6e 	bl	800d828 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb54:	68f9      	ldr	r1, [r7, #12]
 800bb56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bb58:	fb01 f303 	mul.w	r3, r1, r3
 800bb5c:	441a      	add	r2, r3
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	68f9      	ldr	r1, [r7, #12]
 800bb7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bb7e:	fb01 f303 	mul.w	r3, r1, r3
 800bb82:	441a      	add	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	22ff      	movs	r2, #255	; 0xff
 800bb8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	22ff      	movs	r2, #255	; 0xff
 800bb94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d114      	bne.n	800bbc8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d01a      	beq.n	800bbdc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	3310      	adds	r3, #16
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f001 f936 	bl	800ce1c <xTaskRemoveFromEventList>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d012      	beq.n	800bbdc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bbb6:	4b0d      	ldr	r3, [pc, #52]	; (800bbec <xQueueGenericReset+0xd0>)
 800bbb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	e009      	b.n	800bbdc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	3310      	adds	r3, #16
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7ff fef0 	bl	800b9b2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	3324      	adds	r3, #36	; 0x24
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7ff feeb 	bl	800b9b2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bbdc:	f001 fe56 	bl	800d88c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bbe0:	2301      	movs	r3, #1
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	e000ed04 	.word	0xe000ed04

0800bbf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b08e      	sub	sp, #56	; 0x38
 800bbf4:	af02      	add	r7, sp, #8
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
 800bbfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10b      	bne.n	800bc1c <xQueueGenericCreateStatic+0x2c>
 800bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc08:	b672      	cpsid	i
 800bc0a:	f383 8811 	msr	BASEPRI, r3
 800bc0e:	f3bf 8f6f 	isb	sy
 800bc12:	f3bf 8f4f 	dsb	sy
 800bc16:	b662      	cpsie	i
 800bc18:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc1a:	e7fe      	b.n	800bc1a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10b      	bne.n	800bc3a <xQueueGenericCreateStatic+0x4a>
 800bc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc26:	b672      	cpsid	i
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	b662      	cpsie	i
 800bc36:	627b      	str	r3, [r7, #36]	; 0x24
 800bc38:	e7fe      	b.n	800bc38 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d002      	beq.n	800bc46 <xQueueGenericCreateStatic+0x56>
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d001      	beq.n	800bc4a <xQueueGenericCreateStatic+0x5a>
 800bc46:	2301      	movs	r3, #1
 800bc48:	e000      	b.n	800bc4c <xQueueGenericCreateStatic+0x5c>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d10b      	bne.n	800bc68 <xQueueGenericCreateStatic+0x78>
 800bc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc54:	b672      	cpsid	i
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	b662      	cpsie	i
 800bc64:	623b      	str	r3, [r7, #32]
 800bc66:	e7fe      	b.n	800bc66 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d102      	bne.n	800bc74 <xQueueGenericCreateStatic+0x84>
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d101      	bne.n	800bc78 <xQueueGenericCreateStatic+0x88>
 800bc74:	2301      	movs	r3, #1
 800bc76:	e000      	b.n	800bc7a <xQueueGenericCreateStatic+0x8a>
 800bc78:	2300      	movs	r3, #0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10b      	bne.n	800bc96 <xQueueGenericCreateStatic+0xa6>
 800bc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc82:	b672      	cpsid	i
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	b662      	cpsie	i
 800bc92:	61fb      	str	r3, [r7, #28]
 800bc94:	e7fe      	b.n	800bc94 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc96:	2348      	movs	r3, #72	; 0x48
 800bc98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	2b48      	cmp	r3, #72	; 0x48
 800bc9e:	d00b      	beq.n	800bcb8 <xQueueGenericCreateStatic+0xc8>
 800bca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca4:	b672      	cpsid	i
 800bca6:	f383 8811 	msr	BASEPRI, r3
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	b662      	cpsie	i
 800bcb4:	61bb      	str	r3, [r7, #24]
 800bcb6:	e7fe      	b.n	800bcb6 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bcb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00d      	beq.n	800bce0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bccc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	68b9      	ldr	r1, [r7, #8]
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f000 f846 	bl	800bd6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3730      	adds	r7, #48	; 0x30
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b08a      	sub	sp, #40	; 0x28
 800bcee:	af02      	add	r7, sp, #8
 800bcf0:	60f8      	str	r0, [r7, #12]
 800bcf2:	60b9      	str	r1, [r7, #8]
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d10b      	bne.n	800bd16 <xQueueGenericCreate+0x2c>
 800bcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd02:	b672      	cpsid	i
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	b662      	cpsie	i
 800bd12:	613b      	str	r3, [r7, #16]
 800bd14:	e7fe      	b.n	800bd14 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d102      	bne.n	800bd22 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	61fb      	str	r3, [r7, #28]
 800bd20:	e004      	b.n	800bd2c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	68ba      	ldr	r2, [r7, #8]
 800bd26:	fb02 f303 	mul.w	r3, r2, r3
 800bd2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	3348      	adds	r3, #72	; 0x48
 800bd30:	4618      	mov	r0, r3
 800bd32:	f001 fe59 	bl	800d9e8 <pvPortMalloc>
 800bd36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d011      	beq.n	800bd62 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	3348      	adds	r3, #72	; 0x48
 800bd46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd50:	79fa      	ldrb	r2, [r7, #7]
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	4613      	mov	r3, r2
 800bd58:	697a      	ldr	r2, [r7, #20]
 800bd5a:	68b9      	ldr	r1, [r7, #8]
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f000 f805 	bl	800bd6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd62:	69bb      	ldr	r3, [r7, #24]
	}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3720      	adds	r7, #32
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
 800bd78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d103      	bne.n	800bd88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	69ba      	ldr	r2, [r7, #24]
 800bd84:	601a      	str	r2, [r3, #0]
 800bd86:	e002      	b.n	800bd8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bd8e:	69bb      	ldr	r3, [r7, #24]
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd9a:	2101      	movs	r1, #1
 800bd9c:	69b8      	ldr	r0, [r7, #24]
 800bd9e:	f7ff febd 	bl	800bb1c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bda2:	bf00      	nop
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b082      	sub	sp, #8
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00e      	beq.n	800bdd6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bdca:	2300      	movs	r3, #0
 800bdcc:	2200      	movs	r2, #0
 800bdce:	2100      	movs	r1, #0
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 f837 	bl	800be44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bdd6:	bf00      	nop
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b086      	sub	sp, #24
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	4603      	mov	r3, r0
 800bde6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bde8:	2301      	movs	r3, #1
 800bdea:	617b      	str	r3, [r7, #20]
 800bdec:	2300      	movs	r3, #0
 800bdee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bdf0:	79fb      	ldrb	r3, [r7, #7]
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	6939      	ldr	r1, [r7, #16]
 800bdf6:	6978      	ldr	r0, [r7, #20]
 800bdf8:	f7ff ff77 	bl	800bcea <xQueueGenericCreate>
 800bdfc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	f7ff ffd3 	bl	800bdaa <prvInitialiseMutex>

		return xNewQueue;
 800be04:	68fb      	ldr	r3, [r7, #12]
	}
 800be06:	4618      	mov	r0, r3
 800be08:	3718      	adds	r7, #24
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b088      	sub	sp, #32
 800be12:	af02      	add	r7, sp, #8
 800be14:	4603      	mov	r3, r0
 800be16:	6039      	str	r1, [r7, #0]
 800be18:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800be1a:	2301      	movs	r3, #1
 800be1c:	617b      	str	r3, [r7, #20]
 800be1e:	2300      	movs	r3, #0
 800be20:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800be22:	79fb      	ldrb	r3, [r7, #7]
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	2200      	movs	r2, #0
 800be2a:	6939      	ldr	r1, [r7, #16]
 800be2c:	6978      	ldr	r0, [r7, #20]
 800be2e:	f7ff fedf 	bl	800bbf0 <xQueueGenericCreateStatic>
 800be32:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f7ff ffb8 	bl	800bdaa <prvInitialiseMutex>

		return xNewQueue;
 800be3a:	68fb      	ldr	r3, [r7, #12]
	}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3718      	adds	r7, #24
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b08e      	sub	sp, #56	; 0x38
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	607a      	str	r2, [r7, #4]
 800be50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be52:	2300      	movs	r3, #0
 800be54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d10b      	bne.n	800be78 <xQueueGenericSend+0x34>
 800be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be64:	b672      	cpsid	i
 800be66:	f383 8811 	msr	BASEPRI, r3
 800be6a:	f3bf 8f6f 	isb	sy
 800be6e:	f3bf 8f4f 	dsb	sy
 800be72:	b662      	cpsie	i
 800be74:	62bb      	str	r3, [r7, #40]	; 0x28
 800be76:	e7fe      	b.n	800be76 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d103      	bne.n	800be86 <xQueueGenericSend+0x42>
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be82:	2b00      	cmp	r3, #0
 800be84:	d101      	bne.n	800be8a <xQueueGenericSend+0x46>
 800be86:	2301      	movs	r3, #1
 800be88:	e000      	b.n	800be8c <xQueueGenericSend+0x48>
 800be8a:	2300      	movs	r3, #0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10b      	bne.n	800bea8 <xQueueGenericSend+0x64>
 800be90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be94:	b672      	cpsid	i
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	b662      	cpsie	i
 800bea4:	627b      	str	r3, [r7, #36]	; 0x24
 800bea6:	e7fe      	b.n	800bea6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d103      	bne.n	800beb6 <xQueueGenericSend+0x72>
 800beae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d101      	bne.n	800beba <xQueueGenericSend+0x76>
 800beb6:	2301      	movs	r3, #1
 800beb8:	e000      	b.n	800bebc <xQueueGenericSend+0x78>
 800beba:	2300      	movs	r3, #0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d10b      	bne.n	800bed8 <xQueueGenericSend+0x94>
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	b672      	cpsid	i
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	b662      	cpsie	i
 800bed4:	623b      	str	r3, [r7, #32]
 800bed6:	e7fe      	b.n	800bed6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bed8:	f001 f960 	bl	800d19c <xTaskGetSchedulerState>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d102      	bne.n	800bee8 <xQueueGenericSend+0xa4>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d101      	bne.n	800beec <xQueueGenericSend+0xa8>
 800bee8:	2301      	movs	r3, #1
 800beea:	e000      	b.n	800beee <xQueueGenericSend+0xaa>
 800beec:	2300      	movs	r3, #0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d10b      	bne.n	800bf0a <xQueueGenericSend+0xc6>
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	b672      	cpsid	i
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	b662      	cpsie	i
 800bf06:	61fb      	str	r3, [r7, #28]
 800bf08:	e7fe      	b.n	800bf08 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf0a:	f001 fc8d 	bl	800d828 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d302      	bcc.n	800bf20 <xQueueGenericSend+0xdc>
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d129      	bne.n	800bf74 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	68b9      	ldr	r1, [r7, #8]
 800bf24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf26:	f000 f9b7 	bl	800c298 <prvCopyDataToQueue>
 800bf2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d010      	beq.n	800bf56 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf36:	3324      	adds	r3, #36	; 0x24
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 ff6f 	bl	800ce1c <xTaskRemoveFromEventList>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d013      	beq.n	800bf6c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf44:	4b3f      	ldr	r3, [pc, #252]	; (800c044 <xQueueGenericSend+0x200>)
 800bf46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf4a:	601a      	str	r2, [r3, #0]
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	f3bf 8f6f 	isb	sy
 800bf54:	e00a      	b.n	800bf6c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d007      	beq.n	800bf6c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf5c:	4b39      	ldr	r3, [pc, #228]	; (800c044 <xQueueGenericSend+0x200>)
 800bf5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf62:	601a      	str	r2, [r3, #0]
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf6c:	f001 fc8e 	bl	800d88c <vPortExitCritical>
				return pdPASS;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e063      	b.n	800c03c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d103      	bne.n	800bf82 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf7a:	f001 fc87 	bl	800d88c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	e05c      	b.n	800c03c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d106      	bne.n	800bf96 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf88:	f107 0314 	add.w	r3, r7, #20
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 ffa9 	bl	800cee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf92:	2301      	movs	r3, #1
 800bf94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf96:	f001 fc79 	bl	800d88c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf9a:	f000 fd31 	bl	800ca00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf9e:	f001 fc43 	bl	800d828 <vPortEnterCritical>
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfa8:	b25b      	sxtb	r3, r3
 800bfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfae:	d103      	bne.n	800bfb8 <xQueueGenericSend+0x174>
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfbe:	b25b      	sxtb	r3, r3
 800bfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc4:	d103      	bne.n	800bfce <xQueueGenericSend+0x18a>
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfce:	f001 fc5d 	bl	800d88c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfd2:	1d3a      	adds	r2, r7, #4
 800bfd4:	f107 0314 	add.w	r3, r7, #20
 800bfd8:	4611      	mov	r1, r2
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 ff98 	bl	800cf10 <xTaskCheckForTimeOut>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d124      	bne.n	800c030 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bfe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfe8:	f000 fa28 	bl	800c43c <prvIsQueueFull>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d018      	beq.n	800c024 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff4:	3310      	adds	r3, #16
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	4611      	mov	r1, r2
 800bffa:	4618      	mov	r0, r3
 800bffc:	f000 fee8 	bl	800cdd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c002:	f000 f9b3 	bl	800c36c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c006:	f000 fd09 	bl	800ca1c <xTaskResumeAll>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f47f af7c 	bne.w	800bf0a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c012:	4b0c      	ldr	r3, [pc, #48]	; (800c044 <xQueueGenericSend+0x200>)
 800c014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c018:	601a      	str	r2, [r3, #0]
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	e772      	b.n	800bf0a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c026:	f000 f9a1 	bl	800c36c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c02a:	f000 fcf7 	bl	800ca1c <xTaskResumeAll>
 800c02e:	e76c      	b.n	800bf0a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c032:	f000 f99b 	bl	800c36c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c036:	f000 fcf1 	bl	800ca1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c03a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3738      	adds	r7, #56	; 0x38
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	e000ed04 	.word	0xe000ed04

0800c048 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b08e      	sub	sp, #56	; 0x38
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c052:	2300      	movs	r3, #0
 800c054:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c05a:	2300      	movs	r3, #0
 800c05c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10b      	bne.n	800c07c <xQueueSemaphoreTake+0x34>
 800c064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c068:	b672      	cpsid	i
 800c06a:	f383 8811 	msr	BASEPRI, r3
 800c06e:	f3bf 8f6f 	isb	sy
 800c072:	f3bf 8f4f 	dsb	sy
 800c076:	b662      	cpsie	i
 800c078:	623b      	str	r3, [r7, #32]
 800c07a:	e7fe      	b.n	800c07a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c080:	2b00      	cmp	r3, #0
 800c082:	d00b      	beq.n	800c09c <xQueueSemaphoreTake+0x54>
 800c084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c088:	b672      	cpsid	i
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	b662      	cpsie	i
 800c098:	61fb      	str	r3, [r7, #28]
 800c09a:	e7fe      	b.n	800c09a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c09c:	f001 f87e 	bl	800d19c <xTaskGetSchedulerState>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d102      	bne.n	800c0ac <xQueueSemaphoreTake+0x64>
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d101      	bne.n	800c0b0 <xQueueSemaphoreTake+0x68>
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e000      	b.n	800c0b2 <xQueueSemaphoreTake+0x6a>
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d10b      	bne.n	800c0ce <xQueueSemaphoreTake+0x86>
 800c0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ba:	b672      	cpsid	i
 800c0bc:	f383 8811 	msr	BASEPRI, r3
 800c0c0:	f3bf 8f6f 	isb	sy
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	b662      	cpsie	i
 800c0ca:	61bb      	str	r3, [r7, #24]
 800c0cc:	e7fe      	b.n	800c0cc <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0ce:	f001 fbab 	bl	800d828 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d024      	beq.n	800c128 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e0:	1e5a      	subs	r2, r3, #1
 800c0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d104      	bne.n	800c0f8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c0ee:	f001 fa17 	bl	800d520 <pvTaskIncrementMutexHeldCount>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fa:	691b      	ldr	r3, [r3, #16]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00f      	beq.n	800c120 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c102:	3310      	adds	r3, #16
 800c104:	4618      	mov	r0, r3
 800c106:	f000 fe89 	bl	800ce1c <xTaskRemoveFromEventList>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d007      	beq.n	800c120 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c110:	4b54      	ldr	r3, [pc, #336]	; (800c264 <xQueueSemaphoreTake+0x21c>)
 800c112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c116:	601a      	str	r2, [r3, #0]
 800c118:	f3bf 8f4f 	dsb	sy
 800c11c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c120:	f001 fbb4 	bl	800d88c <vPortExitCritical>
				return pdPASS;
 800c124:	2301      	movs	r3, #1
 800c126:	e098      	b.n	800c25a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d112      	bne.n	800c154 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00b      	beq.n	800c14c <xQueueSemaphoreTake+0x104>
 800c134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c138:	b672      	cpsid	i
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	b662      	cpsie	i
 800c148:	617b      	str	r3, [r7, #20]
 800c14a:	e7fe      	b.n	800c14a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c14c:	f001 fb9e 	bl	800d88c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c150:	2300      	movs	r3, #0
 800c152:	e082      	b.n	800c25a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c156:	2b00      	cmp	r3, #0
 800c158:	d106      	bne.n	800c168 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c15a:	f107 030c 	add.w	r3, r7, #12
 800c15e:	4618      	mov	r0, r3
 800c160:	f000 fec0 	bl	800cee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c164:	2301      	movs	r3, #1
 800c166:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c168:	f001 fb90 	bl	800d88c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c16c:	f000 fc48 	bl	800ca00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c170:	f001 fb5a 	bl	800d828 <vPortEnterCritical>
 800c174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c176:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c17a:	b25b      	sxtb	r3, r3
 800c17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c180:	d103      	bne.n	800c18a <xQueueSemaphoreTake+0x142>
 800c182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c190:	b25b      	sxtb	r3, r3
 800c192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c196:	d103      	bne.n	800c1a0 <xQueueSemaphoreTake+0x158>
 800c198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1a0:	f001 fb74 	bl	800d88c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1a4:	463a      	mov	r2, r7
 800c1a6:	f107 030c 	add.w	r3, r7, #12
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f000 feaf 	bl	800cf10 <xTaskCheckForTimeOut>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d132      	bne.n	800c21e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1ba:	f000 f929 	bl	800c410 <prvIsQueueEmpty>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d026      	beq.n	800c212 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d109      	bne.n	800c1e0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c1cc:	f001 fb2c 	bl	800d828 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f000 ffff 	bl	800d1d8 <xTaskPriorityInherit>
 800c1da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c1dc:	f001 fb56 	bl	800d88c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e2:	3324      	adds	r3, #36	; 0x24
 800c1e4:	683a      	ldr	r2, [r7, #0]
 800c1e6:	4611      	mov	r1, r2
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f000 fdf1 	bl	800cdd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c1ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1f0:	f000 f8bc 	bl	800c36c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c1f4:	f000 fc12 	bl	800ca1c <xTaskResumeAll>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	f47f af67 	bne.w	800c0ce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c200:	4b18      	ldr	r3, [pc, #96]	; (800c264 <xQueueSemaphoreTake+0x21c>)
 800c202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c206:	601a      	str	r2, [r3, #0]
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	f3bf 8f6f 	isb	sy
 800c210:	e75d      	b.n	800c0ce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c212:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c214:	f000 f8aa 	bl	800c36c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c218:	f000 fc00 	bl	800ca1c <xTaskResumeAll>
 800c21c:	e757      	b.n	800c0ce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c21e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c220:	f000 f8a4 	bl	800c36c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c224:	f000 fbfa 	bl	800ca1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c228:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c22a:	f000 f8f1 	bl	800c410 <prvIsQueueEmpty>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b00      	cmp	r3, #0
 800c232:	f43f af4c 	beq.w	800c0ce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00d      	beq.n	800c258 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c23c:	f001 faf4 	bl	800d828 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c240:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c242:	f000 f811 	bl	800c268 <prvGetDisinheritPriorityAfterTimeout>
 800c246:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24a:	689b      	ldr	r3, [r3, #8]
 800c24c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c24e:	4618      	mov	r0, r3
 800c250:	f001 f8ca 	bl	800d3e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c254:	f001 fb1a 	bl	800d88c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c258:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3738      	adds	r7, #56	; 0x38
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	e000ed04 	.word	0xe000ed04

0800c268 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c274:	2b00      	cmp	r3, #0
 800c276:	d006      	beq.n	800c286 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f1c3 0307 	rsb	r3, r3, #7
 800c282:	60fb      	str	r3, [r7, #12]
 800c284:	e001      	b.n	800c28a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c286:	2300      	movs	r3, #0
 800c288:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c28a:	68fb      	ldr	r3, [r7, #12]
	}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3714      	adds	r7, #20
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d10d      	bne.n	800c2d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d14d      	bne.n	800c35a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f001 f808 	bl	800d2d8 <xTaskPriorityDisinherit>
 800c2c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	609a      	str	r2, [r3, #8]
 800c2d0:	e043      	b.n	800c35a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d119      	bne.n	800c30c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6858      	ldr	r0, [r3, #4]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	68b9      	ldr	r1, [r7, #8]
 800c2e4:	f001 fd8e 	bl	800de04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	685a      	ldr	r2, [r3, #4]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f0:	441a      	add	r2, r3
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	685a      	ldr	r2, [r3, #4]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d32b      	bcc.n	800c35a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	605a      	str	r2, [r3, #4]
 800c30a:	e026      	b.n	800c35a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	68d8      	ldr	r0, [r3, #12]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c314:	461a      	mov	r2, r3
 800c316:	68b9      	ldr	r1, [r7, #8]
 800c318:	f001 fd74 	bl	800de04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	68da      	ldr	r2, [r3, #12]
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c324:	425b      	negs	r3, r3
 800c326:	441a      	add	r2, r3
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	68da      	ldr	r2, [r3, #12]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	429a      	cmp	r2, r3
 800c336:	d207      	bcs.n	800c348 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	689a      	ldr	r2, [r3, #8]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c340:	425b      	negs	r3, r3
 800c342:	441a      	add	r2, r3
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b02      	cmp	r3, #2
 800c34c:	d105      	bne.n	800c35a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d002      	beq.n	800c35a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	3b01      	subs	r3, #1
 800c358:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	1c5a      	adds	r2, r3, #1
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c362:	697b      	ldr	r3, [r7, #20]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3718      	adds	r7, #24
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c374:	f001 fa58 	bl	800d828 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c37e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c380:	e011      	b.n	800c3a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c386:	2b00      	cmp	r3, #0
 800c388:	d012      	beq.n	800c3b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	3324      	adds	r3, #36	; 0x24
 800c38e:	4618      	mov	r0, r3
 800c390:	f000 fd44 	bl	800ce1c <xTaskRemoveFromEventList>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d001      	beq.n	800c39e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c39a:	f000 fe1d 	bl	800cfd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c39e:	7bfb      	ldrb	r3, [r7, #15]
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	dce9      	bgt.n	800c382 <prvUnlockQueue+0x16>
 800c3ae:	e000      	b.n	800c3b2 <prvUnlockQueue+0x46>
					break;
 800c3b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	22ff      	movs	r2, #255	; 0xff
 800c3b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c3ba:	f001 fa67 	bl	800d88c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c3be:	f001 fa33 	bl	800d828 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c3ca:	e011      	b.n	800c3f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d012      	beq.n	800c3fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	3310      	adds	r3, #16
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f000 fd1f 	bl	800ce1c <xTaskRemoveFromEventList>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d001      	beq.n	800c3e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c3e4:	f000 fdf8 	bl	800cfd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c3e8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c3f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	dce9      	bgt.n	800c3cc <prvUnlockQueue+0x60>
 800c3f8:	e000      	b.n	800c3fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c3fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	22ff      	movs	r2, #255	; 0xff
 800c400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c404:	f001 fa42 	bl	800d88c <vPortExitCritical>
}
 800c408:	bf00      	nop
 800c40a:	3710      	adds	r7, #16
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c418:	f001 fa06 	bl	800d828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c420:	2b00      	cmp	r3, #0
 800c422:	d102      	bne.n	800c42a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c424:	2301      	movs	r3, #1
 800c426:	60fb      	str	r3, [r7, #12]
 800c428:	e001      	b.n	800c42e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c42a:	2300      	movs	r3, #0
 800c42c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c42e:	f001 fa2d 	bl	800d88c <vPortExitCritical>

	return xReturn;
 800c432:	68fb      	ldr	r3, [r7, #12]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c444:	f001 f9f0 	bl	800d828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c450:	429a      	cmp	r2, r3
 800c452:	d102      	bne.n	800c45a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c454:	2301      	movs	r3, #1
 800c456:	60fb      	str	r3, [r7, #12]
 800c458:	e001      	b.n	800c45e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c45a:	2300      	movs	r3, #0
 800c45c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c45e:	f001 fa15 	bl	800d88c <vPortExitCritical>

	return xReturn;
 800c462:	68fb      	ldr	r3, [r7, #12]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3710      	adds	r7, #16
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b08e      	sub	sp, #56	; 0x38
 800c470:	af04      	add	r7, sp, #16
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
 800c478:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10b      	bne.n	800c498 <xTaskCreateStatic+0x2c>
 800c480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c484:	b672      	cpsid	i
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	b662      	cpsie	i
 800c494:	623b      	str	r3, [r7, #32]
 800c496:	e7fe      	b.n	800c496 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800c498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d10b      	bne.n	800c4b6 <xTaskCreateStatic+0x4a>
 800c49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a2:	b672      	cpsid	i
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	b662      	cpsie	i
 800c4b2:	61fb      	str	r3, [r7, #28]
 800c4b4:	e7fe      	b.n	800c4b4 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c4b6:	2358      	movs	r3, #88	; 0x58
 800c4b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	2b58      	cmp	r3, #88	; 0x58
 800c4be:	d00b      	beq.n	800c4d8 <xTaskCreateStatic+0x6c>
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	b672      	cpsid	i
 800c4c6:	f383 8811 	msr	BASEPRI, r3
 800c4ca:	f3bf 8f6f 	isb	sy
 800c4ce:	f3bf 8f4f 	dsb	sy
 800c4d2:	b662      	cpsie	i
 800c4d4:	61bb      	str	r3, [r7, #24]
 800c4d6:	e7fe      	b.n	800c4d6 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c4d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d01e      	beq.n	800c51e <xTaskCreateStatic+0xb2>
 800c4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d01b      	beq.n	800c51e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f2:	2202      	movs	r2, #2
 800c4f4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	9303      	str	r3, [sp, #12]
 800c4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fe:	9302      	str	r3, [sp, #8]
 800c500:	f107 0314 	add.w	r3, r7, #20
 800c504:	9301      	str	r3, [sp, #4]
 800c506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	68b9      	ldr	r1, [r7, #8]
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f000 f850 	bl	800c5b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c518:	f000 f8e0 	bl	800c6dc <prvAddNewTaskToReadyList>
 800c51c:	e001      	b.n	800c522 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c51e:	2300      	movs	r3, #0
 800c520:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c522:	697b      	ldr	r3, [r7, #20]
	}
 800c524:	4618      	mov	r0, r3
 800c526:	3728      	adds	r7, #40	; 0x28
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b08c      	sub	sp, #48	; 0x30
 800c530:	af04      	add	r7, sp, #16
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	603b      	str	r3, [r7, #0]
 800c538:	4613      	mov	r3, r2
 800c53a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c53c:	88fb      	ldrh	r3, [r7, #6]
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4618      	mov	r0, r3
 800c542:	f001 fa51 	bl	800d9e8 <pvPortMalloc>
 800c546:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00e      	beq.n	800c56c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c54e:	2058      	movs	r0, #88	; 0x58
 800c550:	f001 fa4a 	bl	800d9e8 <pvPortMalloc>
 800c554:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c556:	69fb      	ldr	r3, [r7, #28]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d003      	beq.n	800c564 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	697a      	ldr	r2, [r7, #20]
 800c560:	631a      	str	r2, [r3, #48]	; 0x30
 800c562:	e005      	b.n	800c570 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c564:	6978      	ldr	r0, [r7, #20]
 800c566:	f001 fb0b 	bl	800db80 <vPortFree>
 800c56a:	e001      	b.n	800c570 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c56c:	2300      	movs	r3, #0
 800c56e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d017      	beq.n	800c5a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c57e:	88fa      	ldrh	r2, [r7, #6]
 800c580:	2300      	movs	r3, #0
 800c582:	9303      	str	r3, [sp, #12]
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	9302      	str	r3, [sp, #8]
 800c588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58a:	9301      	str	r3, [sp, #4]
 800c58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	68b9      	ldr	r1, [r7, #8]
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f000 f80e 	bl	800c5b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c59a:	69f8      	ldr	r0, [r7, #28]
 800c59c:	f000 f89e 	bl	800c6dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	61bb      	str	r3, [r7, #24]
 800c5a4:	e002      	b.n	800c5ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c5a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c5ac:	69bb      	ldr	r3, [r7, #24]
	}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3720      	adds	r7, #32
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b088      	sub	sp, #32
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	60f8      	str	r0, [r7, #12]
 800c5be:	60b9      	str	r1, [r7, #8]
 800c5c0:	607a      	str	r2, [r7, #4]
 800c5c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	21a5      	movs	r1, #165	; 0xa5
 800c5d0:	f001 fc23 	bl	800de1a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5d8:	6879      	ldr	r1, [r7, #4]
 800c5da:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c5de:	440b      	add	r3, r1
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	4413      	add	r3, r2
 800c5e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	f023 0307 	bic.w	r3, r3, #7
 800c5ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c5ee:	69bb      	ldr	r3, [r7, #24]
 800c5f0:	f003 0307 	and.w	r3, r3, #7
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00b      	beq.n	800c610 <prvInitialiseNewTask+0x5a>
 800c5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fc:	b672      	cpsid	i
 800c5fe:	f383 8811 	msr	BASEPRI, r3
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	b662      	cpsie	i
 800c60c:	617b      	str	r3, [r7, #20]
 800c60e:	e7fe      	b.n	800c60e <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d01f      	beq.n	800c656 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c616:	2300      	movs	r3, #0
 800c618:	61fb      	str	r3, [r7, #28]
 800c61a:	e012      	b.n	800c642 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	4413      	add	r3, r2
 800c622:	7819      	ldrb	r1, [r3, #0]
 800c624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c626:	69fb      	ldr	r3, [r7, #28]
 800c628:	4413      	add	r3, r2
 800c62a:	3334      	adds	r3, #52	; 0x34
 800c62c:	460a      	mov	r2, r1
 800c62e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	4413      	add	r3, r2
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d006      	beq.n	800c64a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	3301      	adds	r3, #1
 800c640:	61fb      	str	r3, [r7, #28]
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	2b0f      	cmp	r3, #15
 800c646:	d9e9      	bls.n	800c61c <prvInitialiseNewTask+0x66>
 800c648:	e000      	b.n	800c64c <prvInitialiseNewTask+0x96>
			{
				break;
 800c64a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64e:	2200      	movs	r2, #0
 800c650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c654:	e003      	b.n	800c65e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	2200      	movs	r2, #0
 800c65a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c660:	2b06      	cmp	r3, #6
 800c662:	d901      	bls.n	800c668 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c664:	2306      	movs	r3, #6
 800c666:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c66c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c672:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c676:	2200      	movs	r2, #0
 800c678:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	3304      	adds	r3, #4
 800c67e:	4618      	mov	r0, r3
 800c680:	f7ff f9b7 	bl	800b9f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c686:	3318      	adds	r3, #24
 800c688:	4618      	mov	r0, r3
 800c68a:	f7ff f9b2 	bl	800b9f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c692:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c696:	f1c3 0207 	rsb	r2, r3, #7
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c6b8:	683a      	ldr	r2, [r7, #0]
 800c6ba:	68f9      	ldr	r1, [r7, #12]
 800c6bc:	69b8      	ldr	r0, [r7, #24]
 800c6be:	f000 ffa9 	bl	800d614 <pxPortInitialiseStack>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d002      	beq.n	800c6d4 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6d4:	bf00      	nop
 800c6d6:	3720      	adds	r7, #32
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c6e4:	f001 f8a0 	bl	800d828 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c6e8:	4b2a      	ldr	r3, [pc, #168]	; (800c794 <prvAddNewTaskToReadyList+0xb8>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	4a29      	ldr	r2, [pc, #164]	; (800c794 <prvAddNewTaskToReadyList+0xb8>)
 800c6f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c6f2:	4b29      	ldr	r3, [pc, #164]	; (800c798 <prvAddNewTaskToReadyList+0xbc>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d109      	bne.n	800c70e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c6fa:	4a27      	ldr	r2, [pc, #156]	; (800c798 <prvAddNewTaskToReadyList+0xbc>)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c700:	4b24      	ldr	r3, [pc, #144]	; (800c794 <prvAddNewTaskToReadyList+0xb8>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d110      	bne.n	800c72a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c708:	f000 fc8c 	bl	800d024 <prvInitialiseTaskLists>
 800c70c:	e00d      	b.n	800c72a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c70e:	4b23      	ldr	r3, [pc, #140]	; (800c79c <prvAddNewTaskToReadyList+0xc0>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d109      	bne.n	800c72a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c716:	4b20      	ldr	r3, [pc, #128]	; (800c798 <prvAddNewTaskToReadyList+0xbc>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c720:	429a      	cmp	r2, r3
 800c722:	d802      	bhi.n	800c72a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c724:	4a1c      	ldr	r2, [pc, #112]	; (800c798 <prvAddNewTaskToReadyList+0xbc>)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c72a:	4b1d      	ldr	r3, [pc, #116]	; (800c7a0 <prvAddNewTaskToReadyList+0xc4>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	3301      	adds	r3, #1
 800c730:	4a1b      	ldr	r2, [pc, #108]	; (800c7a0 <prvAddNewTaskToReadyList+0xc4>)
 800c732:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c738:	2201      	movs	r2, #1
 800c73a:	409a      	lsls	r2, r3
 800c73c:	4b19      	ldr	r3, [pc, #100]	; (800c7a4 <prvAddNewTaskToReadyList+0xc8>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4313      	orrs	r3, r2
 800c742:	4a18      	ldr	r2, [pc, #96]	; (800c7a4 <prvAddNewTaskToReadyList+0xc8>)
 800c744:	6013      	str	r3, [r2, #0]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c74a:	4613      	mov	r3, r2
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	4413      	add	r3, r2
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	4a15      	ldr	r2, [pc, #84]	; (800c7a8 <prvAddNewTaskToReadyList+0xcc>)
 800c754:	441a      	add	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	3304      	adds	r3, #4
 800c75a:	4619      	mov	r1, r3
 800c75c:	4610      	mov	r0, r2
 800c75e:	f7ff f955 	bl	800ba0c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c762:	f001 f893 	bl	800d88c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c766:	4b0d      	ldr	r3, [pc, #52]	; (800c79c <prvAddNewTaskToReadyList+0xc0>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00e      	beq.n	800c78c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c76e:	4b0a      	ldr	r3, [pc, #40]	; (800c798 <prvAddNewTaskToReadyList+0xbc>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c778:	429a      	cmp	r2, r3
 800c77a:	d207      	bcs.n	800c78c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c77c:	4b0b      	ldr	r3, [pc, #44]	; (800c7ac <prvAddNewTaskToReadyList+0xd0>)
 800c77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c782:	601a      	str	r2, [r3, #0]
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c78c:	bf00      	nop
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	2000064c 	.word	0x2000064c
 800c798:	2000054c 	.word	0x2000054c
 800c79c:	20000658 	.word	0x20000658
 800c7a0:	20000668 	.word	0x20000668
 800c7a4:	20000654 	.word	0x20000654
 800c7a8:	20000550 	.word	0x20000550
 800c7ac:	e000ed04 	.word	0xe000ed04

0800c7b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d018      	beq.n	800c7f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c7c2:	4b14      	ldr	r3, [pc, #80]	; (800c814 <vTaskDelay+0x64>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00b      	beq.n	800c7e2 <vTaskDelay+0x32>
 800c7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ce:	b672      	cpsid	i
 800c7d0:	f383 8811 	msr	BASEPRI, r3
 800c7d4:	f3bf 8f6f 	isb	sy
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	b662      	cpsie	i
 800c7de:	60bb      	str	r3, [r7, #8]
 800c7e0:	e7fe      	b.n	800c7e0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800c7e2:	f000 f90d 	bl	800ca00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 fead 	bl	800d548 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c7ee:	f000 f915 	bl	800ca1c <xTaskResumeAll>
 800c7f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d107      	bne.n	800c80a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c7fa:	4b07      	ldr	r3, [pc, #28]	; (800c818 <vTaskDelay+0x68>)
 800c7fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c800:	601a      	str	r2, [r3, #0]
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c80a:	bf00      	nop
 800c80c:	3710      	adds	r7, #16
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	20000674 	.word	0x20000674
 800c818:	e000ed04 	.word	0xe000ed04

0800c81c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c81c:	b480      	push	{r7}
 800c81e:	b087      	sub	sp, #28
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c824:	2300      	movs	r3, #0
 800c826:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10b      	bne.n	800c84a <prvTaskIsTaskSuspended+0x2e>
 800c832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c836:	b672      	cpsid	i
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	b662      	cpsie	i
 800c846:	60fb      	str	r3, [r7, #12]
 800c848:	e7fe      	b.n	800c848 <prvTaskIsTaskSuspended+0x2c>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	695b      	ldr	r3, [r3, #20]
 800c84e:	4a0a      	ldr	r2, [pc, #40]	; (800c878 <prvTaskIsTaskSuspended+0x5c>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d10a      	bne.n	800c86a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c858:	4a08      	ldr	r2, [pc, #32]	; (800c87c <prvTaskIsTaskSuspended+0x60>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d005      	beq.n	800c86a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c862:	2b00      	cmp	r3, #0
 800c864:	d101      	bne.n	800c86a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800c866:	2301      	movs	r3, #1
 800c868:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c86a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c86c:	4618      	mov	r0, r3
 800c86e:	371c      	adds	r7, #28
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	20000638 	.word	0x20000638
 800c87c:	2000060c 	.word	0x2000060c

0800c880 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d10b      	bne.n	800c8aa <vTaskResume+0x2a>
 800c892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c896:	b672      	cpsid	i
 800c898:	f383 8811 	msr	BASEPRI, r3
 800c89c:	f3bf 8f6f 	isb	sy
 800c8a0:	f3bf 8f4f 	dsb	sy
 800c8a4:	b662      	cpsie	i
 800c8a6:	60bb      	str	r3, [r7, #8]
 800c8a8:	e7fe      	b.n	800c8a8 <vTaskResume+0x28>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800c8aa:	4b20      	ldr	r3, [pc, #128]	; (800c92c <vTaskResume+0xac>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d037      	beq.n	800c924 <vTaskResume+0xa4>
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d034      	beq.n	800c924 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800c8ba:	f000 ffb5 	bl	800d828 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f7ff ffac 	bl	800c81c <prvTaskIsTaskSuspended>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d02a      	beq.n	800c920 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7ff f8f9 	bl	800bac6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d8:	2201      	movs	r2, #1
 800c8da:	409a      	lsls	r2, r3
 800c8dc:	4b14      	ldr	r3, [pc, #80]	; (800c930 <vTaskResume+0xb0>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	4a13      	ldr	r2, [pc, #76]	; (800c930 <vTaskResume+0xb0>)
 800c8e4:	6013      	str	r3, [r2, #0]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	4413      	add	r3, r2
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	4a10      	ldr	r2, [pc, #64]	; (800c934 <vTaskResume+0xb4>)
 800c8f4:	441a      	add	r2, r3
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	3304      	adds	r3, #4
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	f7ff f885 	bl	800ba0c <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c906:	4b09      	ldr	r3, [pc, #36]	; (800c92c <vTaskResume+0xac>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d307      	bcc.n	800c920 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800c910:	4b09      	ldr	r3, [pc, #36]	; (800c938 <vTaskResume+0xb8>)
 800c912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c916:	601a      	str	r2, [r3, #0]
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800c920:	f000 ffb4 	bl	800d88c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c924:	bf00      	nop
 800c926:	3710      	adds	r7, #16
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	2000054c 	.word	0x2000054c
 800c930:	20000654 	.word	0x20000654
 800c934:	20000550 	.word	0x20000550
 800c938:	e000ed04 	.word	0xe000ed04

0800c93c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b08a      	sub	sp, #40	; 0x28
 800c940:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c942:	2300      	movs	r3, #0
 800c944:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c946:	2300      	movs	r3, #0
 800c948:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c94a:	463a      	mov	r2, r7
 800c94c:	1d39      	adds	r1, r7, #4
 800c94e:	f107 0308 	add.w	r3, r7, #8
 800c952:	4618      	mov	r0, r3
 800c954:	f7f3 fe46 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c958:	6839      	ldr	r1, [r7, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	9202      	str	r2, [sp, #8]
 800c960:	9301      	str	r3, [sp, #4]
 800c962:	2300      	movs	r3, #0
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	2300      	movs	r3, #0
 800c968:	460a      	mov	r2, r1
 800c96a:	491f      	ldr	r1, [pc, #124]	; (800c9e8 <vTaskStartScheduler+0xac>)
 800c96c:	481f      	ldr	r0, [pc, #124]	; (800c9ec <vTaskStartScheduler+0xb0>)
 800c96e:	f7ff fd7d 	bl	800c46c <xTaskCreateStatic>
 800c972:	4602      	mov	r2, r0
 800c974:	4b1e      	ldr	r3, [pc, #120]	; (800c9f0 <vTaskStartScheduler+0xb4>)
 800c976:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c978:	4b1d      	ldr	r3, [pc, #116]	; (800c9f0 <vTaskStartScheduler+0xb4>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d002      	beq.n	800c986 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c980:	2301      	movs	r3, #1
 800c982:	617b      	str	r3, [r7, #20]
 800c984:	e001      	b.n	800c98a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c986:	2300      	movs	r3, #0
 800c988:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d117      	bne.n	800c9c0 <vTaskStartScheduler+0x84>
 800c990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c994:	b672      	cpsid	i
 800c996:	f383 8811 	msr	BASEPRI, r3
 800c99a:	f3bf 8f6f 	isb	sy
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	b662      	cpsie	i
 800c9a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c9a6:	4b13      	ldr	r3, [pc, #76]	; (800c9f4 <vTaskStartScheduler+0xb8>)
 800c9a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c9ae:	4b12      	ldr	r3, [pc, #72]	; (800c9f8 <vTaskStartScheduler+0xbc>)
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c9b4:	4b11      	ldr	r3, [pc, #68]	; (800c9fc <vTaskStartScheduler+0xc0>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9ba:	f000 feb9 	bl	800d730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c9be:	e00f      	b.n	800c9e0 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c6:	d10b      	bne.n	800c9e0 <vTaskStartScheduler+0xa4>
 800c9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9cc:	b672      	cpsid	i
 800c9ce:	f383 8811 	msr	BASEPRI, r3
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	f3bf 8f4f 	dsb	sy
 800c9da:	b662      	cpsie	i
 800c9dc:	60fb      	str	r3, [r7, #12]
 800c9de:	e7fe      	b.n	800c9de <vTaskStartScheduler+0xa2>
}
 800c9e0:	bf00      	nop
 800c9e2:	3718      	adds	r7, #24
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	0800e778 	.word	0x0800e778
 800c9ec:	0800cff1 	.word	0x0800cff1
 800c9f0:	20000670 	.word	0x20000670
 800c9f4:	2000066c 	.word	0x2000066c
 800c9f8:	20000658 	.word	0x20000658
 800c9fc:	20000650 	.word	0x20000650

0800ca00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca00:	b480      	push	{r7}
 800ca02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ca04:	4b04      	ldr	r3, [pc, #16]	; (800ca18 <vTaskSuspendAll+0x18>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	4a03      	ldr	r2, [pc, #12]	; (800ca18 <vTaskSuspendAll+0x18>)
 800ca0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ca0e:	bf00      	nop
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr
 800ca18:	20000674 	.word	0x20000674

0800ca1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca22:	2300      	movs	r3, #0
 800ca24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca26:	2300      	movs	r3, #0
 800ca28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca2a:	4b42      	ldr	r3, [pc, #264]	; (800cb34 <xTaskResumeAll+0x118>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d10b      	bne.n	800ca4a <xTaskResumeAll+0x2e>
 800ca32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca36:	b672      	cpsid	i
 800ca38:	f383 8811 	msr	BASEPRI, r3
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f3bf 8f4f 	dsb	sy
 800ca44:	b662      	cpsie	i
 800ca46:	603b      	str	r3, [r7, #0]
 800ca48:	e7fe      	b.n	800ca48 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca4a:	f000 feed 	bl	800d828 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca4e:	4b39      	ldr	r3, [pc, #228]	; (800cb34 <xTaskResumeAll+0x118>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	3b01      	subs	r3, #1
 800ca54:	4a37      	ldr	r2, [pc, #220]	; (800cb34 <xTaskResumeAll+0x118>)
 800ca56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca58:	4b36      	ldr	r3, [pc, #216]	; (800cb34 <xTaskResumeAll+0x118>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d161      	bne.n	800cb24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca60:	4b35      	ldr	r3, [pc, #212]	; (800cb38 <xTaskResumeAll+0x11c>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d05d      	beq.n	800cb24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca68:	e02e      	b.n	800cac8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca6a:	4b34      	ldr	r3, [pc, #208]	; (800cb3c <xTaskResumeAll+0x120>)
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	3318      	adds	r3, #24
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7ff f825 	bl	800bac6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	3304      	adds	r3, #4
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7ff f820 	bl	800bac6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	409a      	lsls	r2, r3
 800ca8e:	4b2c      	ldr	r3, [pc, #176]	; (800cb40 <xTaskResumeAll+0x124>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	4a2a      	ldr	r2, [pc, #168]	; (800cb40 <xTaskResumeAll+0x124>)
 800ca96:	6013      	str	r3, [r2, #0]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca9c:	4613      	mov	r3, r2
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	4413      	add	r3, r2
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	4a27      	ldr	r2, [pc, #156]	; (800cb44 <xTaskResumeAll+0x128>)
 800caa6:	441a      	add	r2, r3
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	3304      	adds	r3, #4
 800caac:	4619      	mov	r1, r3
 800caae:	4610      	mov	r0, r2
 800cab0:	f7fe ffac 	bl	800ba0c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cab8:	4b23      	ldr	r3, [pc, #140]	; (800cb48 <xTaskResumeAll+0x12c>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d302      	bcc.n	800cac8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cac2:	4b22      	ldr	r3, [pc, #136]	; (800cb4c <xTaskResumeAll+0x130>)
 800cac4:	2201      	movs	r2, #1
 800cac6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cac8:	4b1c      	ldr	r3, [pc, #112]	; (800cb3c <xTaskResumeAll+0x120>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d1cc      	bne.n	800ca6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d001      	beq.n	800cada <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cad6:	f000 fb41 	bl	800d15c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cada:	4b1d      	ldr	r3, [pc, #116]	; (800cb50 <xTaskResumeAll+0x134>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d010      	beq.n	800cb08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cae6:	f000 f837 	bl	800cb58 <xTaskIncrementTick>
 800caea:	4603      	mov	r3, r0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d002      	beq.n	800caf6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800caf0:	4b16      	ldr	r3, [pc, #88]	; (800cb4c <xTaskResumeAll+0x130>)
 800caf2:	2201      	movs	r2, #1
 800caf4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	3b01      	subs	r3, #1
 800cafa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d1f1      	bne.n	800cae6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800cb02:	4b13      	ldr	r3, [pc, #76]	; (800cb50 <xTaskResumeAll+0x134>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb08:	4b10      	ldr	r3, [pc, #64]	; (800cb4c <xTaskResumeAll+0x130>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d009      	beq.n	800cb24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb10:	2301      	movs	r3, #1
 800cb12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb14:	4b0f      	ldr	r3, [pc, #60]	; (800cb54 <xTaskResumeAll+0x138>)
 800cb16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb1a:	601a      	str	r2, [r3, #0]
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb24:	f000 feb2 	bl	800d88c <vPortExitCritical>

	return xAlreadyYielded;
 800cb28:	68bb      	ldr	r3, [r7, #8]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	20000674 	.word	0x20000674
 800cb38:	2000064c 	.word	0x2000064c
 800cb3c:	2000060c 	.word	0x2000060c
 800cb40:	20000654 	.word	0x20000654
 800cb44:	20000550 	.word	0x20000550
 800cb48:	2000054c 	.word	0x2000054c
 800cb4c:	20000660 	.word	0x20000660
 800cb50:	2000065c 	.word	0x2000065c
 800cb54:	e000ed04 	.word	0xe000ed04

0800cb58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b086      	sub	sp, #24
 800cb5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb62:	4b4f      	ldr	r3, [pc, #316]	; (800cca0 <xTaskIncrementTick+0x148>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f040 8089 	bne.w	800cc7e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb6c:	4b4d      	ldr	r3, [pc, #308]	; (800cca4 <xTaskIncrementTick+0x14c>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	3301      	adds	r3, #1
 800cb72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb74:	4a4b      	ldr	r2, [pc, #300]	; (800cca4 <xTaskIncrementTick+0x14c>)
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d121      	bne.n	800cbc4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb80:	4b49      	ldr	r3, [pc, #292]	; (800cca8 <xTaskIncrementTick+0x150>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00b      	beq.n	800cba2 <xTaskIncrementTick+0x4a>
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	b672      	cpsid	i
 800cb90:	f383 8811 	msr	BASEPRI, r3
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	f3bf 8f4f 	dsb	sy
 800cb9c:	b662      	cpsie	i
 800cb9e:	603b      	str	r3, [r7, #0]
 800cba0:	e7fe      	b.n	800cba0 <xTaskIncrementTick+0x48>
 800cba2:	4b41      	ldr	r3, [pc, #260]	; (800cca8 <xTaskIncrementTick+0x150>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	60fb      	str	r3, [r7, #12]
 800cba8:	4b40      	ldr	r3, [pc, #256]	; (800ccac <xTaskIncrementTick+0x154>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a3e      	ldr	r2, [pc, #248]	; (800cca8 <xTaskIncrementTick+0x150>)
 800cbae:	6013      	str	r3, [r2, #0]
 800cbb0:	4a3e      	ldr	r2, [pc, #248]	; (800ccac <xTaskIncrementTick+0x154>)
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	6013      	str	r3, [r2, #0]
 800cbb6:	4b3e      	ldr	r3, [pc, #248]	; (800ccb0 <xTaskIncrementTick+0x158>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	4a3c      	ldr	r2, [pc, #240]	; (800ccb0 <xTaskIncrementTick+0x158>)
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	f000 facc 	bl	800d15c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cbc4:	4b3b      	ldr	r3, [pc, #236]	; (800ccb4 <xTaskIncrementTick+0x15c>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	693a      	ldr	r2, [r7, #16]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d348      	bcc.n	800cc60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbce:	4b36      	ldr	r3, [pc, #216]	; (800cca8 <xTaskIncrementTick+0x150>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d104      	bne.n	800cbe2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbd8:	4b36      	ldr	r3, [pc, #216]	; (800ccb4 <xTaskIncrementTick+0x15c>)
 800cbda:	f04f 32ff 	mov.w	r2, #4294967295
 800cbde:	601a      	str	r2, [r3, #0]
					break;
 800cbe0:	e03e      	b.n	800cc60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbe2:	4b31      	ldr	r3, [pc, #196]	; (800cca8 <xTaskIncrementTick+0x150>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cbf2:	693a      	ldr	r2, [r7, #16]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d203      	bcs.n	800cc02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cbfa:	4a2e      	ldr	r2, [pc, #184]	; (800ccb4 <xTaskIncrementTick+0x15c>)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc00:	e02e      	b.n	800cc60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	3304      	adds	r3, #4
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7fe ff5d 	bl	800bac6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d004      	beq.n	800cc1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	3318      	adds	r3, #24
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7fe ff54 	bl	800bac6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc22:	2201      	movs	r2, #1
 800cc24:	409a      	lsls	r2, r3
 800cc26:	4b24      	ldr	r3, [pc, #144]	; (800ccb8 <xTaskIncrementTick+0x160>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	4a22      	ldr	r2, [pc, #136]	; (800ccb8 <xTaskIncrementTick+0x160>)
 800cc2e:	6013      	str	r3, [r2, #0]
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc34:	4613      	mov	r3, r2
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	4413      	add	r3, r2
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	4a1f      	ldr	r2, [pc, #124]	; (800ccbc <xTaskIncrementTick+0x164>)
 800cc3e:	441a      	add	r2, r3
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	3304      	adds	r3, #4
 800cc44:	4619      	mov	r1, r3
 800cc46:	4610      	mov	r0, r2
 800cc48:	f7fe fee0 	bl	800ba0c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc50:	4b1b      	ldr	r3, [pc, #108]	; (800ccc0 <xTaskIncrementTick+0x168>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d3b9      	bcc.n	800cbce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc5e:	e7b6      	b.n	800cbce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc60:	4b17      	ldr	r3, [pc, #92]	; (800ccc0 <xTaskIncrementTick+0x168>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc66:	4915      	ldr	r1, [pc, #84]	; (800ccbc <xTaskIncrementTick+0x164>)
 800cc68:	4613      	mov	r3, r2
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4413      	add	r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	440b      	add	r3, r1
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d907      	bls.n	800cc88 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	617b      	str	r3, [r7, #20]
 800cc7c:	e004      	b.n	800cc88 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cc7e:	4b11      	ldr	r3, [pc, #68]	; (800ccc4 <xTaskIncrementTick+0x16c>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	3301      	adds	r3, #1
 800cc84:	4a0f      	ldr	r2, [pc, #60]	; (800ccc4 <xTaskIncrementTick+0x16c>)
 800cc86:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cc88:	4b0f      	ldr	r3, [pc, #60]	; (800ccc8 <xTaskIncrementTick+0x170>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d001      	beq.n	800cc94 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800cc90:	2301      	movs	r3, #1
 800cc92:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cc94:	697b      	ldr	r3, [r7, #20]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3718      	adds	r7, #24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	20000674 	.word	0x20000674
 800cca4:	20000650 	.word	0x20000650
 800cca8:	20000604 	.word	0x20000604
 800ccac:	20000608 	.word	0x20000608
 800ccb0:	20000664 	.word	0x20000664
 800ccb4:	2000066c 	.word	0x2000066c
 800ccb8:	20000654 	.word	0x20000654
 800ccbc:	20000550 	.word	0x20000550
 800ccc0:	2000054c 	.word	0x2000054c
 800ccc4:	2000065c 	.word	0x2000065c
 800ccc8:	20000660 	.word	0x20000660

0800cccc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b088      	sub	sp, #32
 800ccd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccd2:	4b3a      	ldr	r3, [pc, #232]	; (800cdbc <vTaskSwitchContext+0xf0>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d003      	beq.n	800cce2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ccda:	4b39      	ldr	r3, [pc, #228]	; (800cdc0 <vTaskSwitchContext+0xf4>)
 800ccdc:	2201      	movs	r2, #1
 800ccde:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cce0:	e067      	b.n	800cdb2 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800cce2:	4b37      	ldr	r3, [pc, #220]	; (800cdc0 <vTaskSwitchContext+0xf4>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cce8:	4b36      	ldr	r3, [pc, #216]	; (800cdc4 <vTaskSwitchContext+0xf8>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccee:	61fb      	str	r3, [r7, #28]
 800ccf0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ccf4:	61bb      	str	r3, [r7, #24]
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	69ba      	ldr	r2, [r7, #24]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d111      	bne.n	800cd24 <vTaskSwitchContext+0x58>
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	3304      	adds	r3, #4
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	69ba      	ldr	r2, [r7, #24]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d10b      	bne.n	800cd24 <vTaskSwitchContext+0x58>
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	3308      	adds	r3, #8
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	69ba      	ldr	r2, [r7, #24]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d105      	bne.n	800cd24 <vTaskSwitchContext+0x58>
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	330c      	adds	r3, #12
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	69ba      	ldr	r2, [r7, #24]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d008      	beq.n	800cd36 <vTaskSwitchContext+0x6a>
 800cd24:	4b27      	ldr	r3, [pc, #156]	; (800cdc4 <vTaskSwitchContext+0xf8>)
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	4b26      	ldr	r3, [pc, #152]	; (800cdc4 <vTaskSwitchContext+0xf8>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	3334      	adds	r3, #52	; 0x34
 800cd2e:	4619      	mov	r1, r3
 800cd30:	4610      	mov	r0, r2
 800cd32:	f7f3 fc44 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd36:	4b24      	ldr	r3, [pc, #144]	; (800cdc8 <vTaskSwitchContext+0xfc>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	fab3 f383 	clz	r3, r3
 800cd42:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cd44:	7afb      	ldrb	r3, [r7, #11]
 800cd46:	f1c3 031f 	rsb	r3, r3, #31
 800cd4a:	617b      	str	r3, [r7, #20]
 800cd4c:	491f      	ldr	r1, [pc, #124]	; (800cdcc <vTaskSwitchContext+0x100>)
 800cd4e:	697a      	ldr	r2, [r7, #20]
 800cd50:	4613      	mov	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	4413      	add	r3, r2
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	440b      	add	r3, r1
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d10b      	bne.n	800cd78 <vTaskSwitchContext+0xac>
	__asm volatile
 800cd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd64:	b672      	cpsid	i
 800cd66:	f383 8811 	msr	BASEPRI, r3
 800cd6a:	f3bf 8f6f 	isb	sy
 800cd6e:	f3bf 8f4f 	dsb	sy
 800cd72:	b662      	cpsie	i
 800cd74:	607b      	str	r3, [r7, #4]
 800cd76:	e7fe      	b.n	800cd76 <vTaskSwitchContext+0xaa>
 800cd78:	697a      	ldr	r2, [r7, #20]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	4413      	add	r3, r2
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4a12      	ldr	r2, [pc, #72]	; (800cdcc <vTaskSwitchContext+0x100>)
 800cd84:	4413      	add	r3, r2
 800cd86:	613b      	str	r3, [r7, #16]
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	685a      	ldr	r2, [r3, #4]
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	605a      	str	r2, [r3, #4]
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	685a      	ldr	r2, [r3, #4]
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	3308      	adds	r3, #8
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d104      	bne.n	800cda8 <vTaskSwitchContext+0xdc>
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	685a      	ldr	r2, [r3, #4]
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	605a      	str	r2, [r3, #4]
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	4a05      	ldr	r2, [pc, #20]	; (800cdc4 <vTaskSwitchContext+0xf8>)
 800cdb0:	6013      	str	r3, [r2, #0]
}
 800cdb2:	bf00      	nop
 800cdb4:	3720      	adds	r7, #32
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	20000674 	.word	0x20000674
 800cdc0:	20000660 	.word	0x20000660
 800cdc4:	2000054c 	.word	0x2000054c
 800cdc8:	20000654 	.word	0x20000654
 800cdcc:	20000550 	.word	0x20000550

0800cdd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10b      	bne.n	800cdf8 <vTaskPlaceOnEventList+0x28>
 800cde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde4:	b672      	cpsid	i
 800cde6:	f383 8811 	msr	BASEPRI, r3
 800cdea:	f3bf 8f6f 	isb	sy
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	b662      	cpsie	i
 800cdf4:	60fb      	str	r3, [r7, #12]
 800cdf6:	e7fe      	b.n	800cdf6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdf8:	4b07      	ldr	r3, [pc, #28]	; (800ce18 <vTaskPlaceOnEventList+0x48>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	3318      	adds	r3, #24
 800cdfe:	4619      	mov	r1, r3
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7fe fe27 	bl	800ba54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce06:	2101      	movs	r1, #1
 800ce08:	6838      	ldr	r0, [r7, #0]
 800ce0a:	f000 fb9d 	bl	800d548 <prvAddCurrentTaskToDelayedList>
}
 800ce0e:	bf00      	nop
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	2000054c 	.word	0x2000054c

0800ce1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b086      	sub	sp, #24
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d10b      	bne.n	800ce4a <xTaskRemoveFromEventList+0x2e>
 800ce32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce36:	b672      	cpsid	i
 800ce38:	f383 8811 	msr	BASEPRI, r3
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	b662      	cpsie	i
 800ce46:	60fb      	str	r3, [r7, #12]
 800ce48:	e7fe      	b.n	800ce48 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	3318      	adds	r3, #24
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7fe fe39 	bl	800bac6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce54:	4b1d      	ldr	r3, [pc, #116]	; (800cecc <xTaskRemoveFromEventList+0xb0>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d11c      	bne.n	800ce96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	3304      	adds	r3, #4
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7fe fe30 	bl	800bac6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	409a      	lsls	r2, r3
 800ce6e:	4b18      	ldr	r3, [pc, #96]	; (800ced0 <xTaskRemoveFromEventList+0xb4>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4313      	orrs	r3, r2
 800ce74:	4a16      	ldr	r2, [pc, #88]	; (800ced0 <xTaskRemoveFromEventList+0xb4>)
 800ce76:	6013      	str	r3, [r2, #0]
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	4413      	add	r3, r2
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	4a13      	ldr	r2, [pc, #76]	; (800ced4 <xTaskRemoveFromEventList+0xb8>)
 800ce86:	441a      	add	r2, r3
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	3304      	adds	r3, #4
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	4610      	mov	r0, r2
 800ce90:	f7fe fdbc 	bl	800ba0c <vListInsertEnd>
 800ce94:	e005      	b.n	800cea2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	3318      	adds	r3, #24
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	480e      	ldr	r0, [pc, #56]	; (800ced8 <xTaskRemoveFromEventList+0xbc>)
 800ce9e:	f7fe fdb5 	bl	800ba0c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea6:	4b0d      	ldr	r3, [pc, #52]	; (800cedc <xTaskRemoveFromEventList+0xc0>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d905      	bls.n	800cebc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ceb4:	4b0a      	ldr	r3, [pc, #40]	; (800cee0 <xTaskRemoveFromEventList+0xc4>)
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	601a      	str	r2, [r3, #0]
 800ceba:	e001      	b.n	800cec0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cebc:	2300      	movs	r3, #0
 800cebe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cec0:	697b      	ldr	r3, [r7, #20]
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3718      	adds	r7, #24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	20000674 	.word	0x20000674
 800ced0:	20000654 	.word	0x20000654
 800ced4:	20000550 	.word	0x20000550
 800ced8:	2000060c 	.word	0x2000060c
 800cedc:	2000054c 	.word	0x2000054c
 800cee0:	20000660 	.word	0x20000660

0800cee4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ceec:	4b06      	ldr	r3, [pc, #24]	; (800cf08 <vTaskInternalSetTimeOutState+0x24>)
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cef4:	4b05      	ldr	r3, [pc, #20]	; (800cf0c <vTaskInternalSetTimeOutState+0x28>)
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	605a      	str	r2, [r3, #4]
}
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr
 800cf08:	20000664 	.word	0x20000664
 800cf0c:	20000650 	.word	0x20000650

0800cf10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b088      	sub	sp, #32
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10b      	bne.n	800cf38 <xTaskCheckForTimeOut+0x28>
 800cf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf24:	b672      	cpsid	i
 800cf26:	f383 8811 	msr	BASEPRI, r3
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	b662      	cpsie	i
 800cf34:	613b      	str	r3, [r7, #16]
 800cf36:	e7fe      	b.n	800cf36 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d10b      	bne.n	800cf56 <xTaskCheckForTimeOut+0x46>
 800cf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf42:	b672      	cpsid	i
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	b662      	cpsie	i
 800cf52:	60fb      	str	r3, [r7, #12]
 800cf54:	e7fe      	b.n	800cf54 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800cf56:	f000 fc67 	bl	800d828 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf5a:	4b1d      	ldr	r3, [pc, #116]	; (800cfd0 <xTaskCheckForTimeOut+0xc0>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	69ba      	ldr	r2, [r7, #24]
 800cf66:	1ad3      	subs	r3, r2, r3
 800cf68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf72:	d102      	bne.n	800cf7a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cf74:	2300      	movs	r3, #0
 800cf76:	61fb      	str	r3, [r7, #28]
 800cf78:	e023      	b.n	800cfc2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	4b15      	ldr	r3, [pc, #84]	; (800cfd4 <xTaskCheckForTimeOut+0xc4>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d007      	beq.n	800cf96 <xTaskCheckForTimeOut+0x86>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	685b      	ldr	r3, [r3, #4]
 800cf8a:	69ba      	ldr	r2, [r7, #24]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d302      	bcc.n	800cf96 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cf90:	2301      	movs	r3, #1
 800cf92:	61fb      	str	r3, [r7, #28]
 800cf94:	e015      	b.n	800cfc2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	697a      	ldr	r2, [r7, #20]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d20b      	bcs.n	800cfb8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	1ad2      	subs	r2, r2, r3
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f7ff ff99 	bl	800cee4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	61fb      	str	r3, [r7, #28]
 800cfb6:	e004      	b.n	800cfc2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cfc2:	f000 fc63 	bl	800d88c <vPortExitCritical>

	return xReturn;
 800cfc6:	69fb      	ldr	r3, [r7, #28]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3720      	adds	r7, #32
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	20000650 	.word	0x20000650
 800cfd4:	20000664 	.word	0x20000664

0800cfd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cfd8:	b480      	push	{r7}
 800cfda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cfdc:	4b03      	ldr	r3, [pc, #12]	; (800cfec <vTaskMissedYield+0x14>)
 800cfde:	2201      	movs	r2, #1
 800cfe0:	601a      	str	r2, [r3, #0]
}
 800cfe2:	bf00      	nop
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr
 800cfec:	20000660 	.word	0x20000660

0800cff0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cff8:	f000 f854 	bl	800d0a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cffc:	4b07      	ldr	r3, [pc, #28]	; (800d01c <prvIdleTask+0x2c>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d907      	bls.n	800d014 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d004:	4b06      	ldr	r3, [pc, #24]	; (800d020 <prvIdleTask+0x30>)
 800d006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d00a:	601a      	str	r2, [r3, #0]
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d014:	f7f3 facc 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d018:	e7ee      	b.n	800cff8 <prvIdleTask+0x8>
 800d01a:	bf00      	nop
 800d01c:	20000550 	.word	0x20000550
 800d020:	e000ed04 	.word	0xe000ed04

0800d024 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d02a:	2300      	movs	r3, #0
 800d02c:	607b      	str	r3, [r7, #4]
 800d02e:	e00c      	b.n	800d04a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	4613      	mov	r3, r2
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	4413      	add	r3, r2
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	4a12      	ldr	r2, [pc, #72]	; (800d084 <prvInitialiseTaskLists+0x60>)
 800d03c:	4413      	add	r3, r2
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fe fcb7 	bl	800b9b2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	3301      	adds	r3, #1
 800d048:	607b      	str	r3, [r7, #4]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2b06      	cmp	r3, #6
 800d04e:	d9ef      	bls.n	800d030 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d050:	480d      	ldr	r0, [pc, #52]	; (800d088 <prvInitialiseTaskLists+0x64>)
 800d052:	f7fe fcae 	bl	800b9b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d056:	480d      	ldr	r0, [pc, #52]	; (800d08c <prvInitialiseTaskLists+0x68>)
 800d058:	f7fe fcab 	bl	800b9b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d05c:	480c      	ldr	r0, [pc, #48]	; (800d090 <prvInitialiseTaskLists+0x6c>)
 800d05e:	f7fe fca8 	bl	800b9b2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d062:	480c      	ldr	r0, [pc, #48]	; (800d094 <prvInitialiseTaskLists+0x70>)
 800d064:	f7fe fca5 	bl	800b9b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d068:	480b      	ldr	r0, [pc, #44]	; (800d098 <prvInitialiseTaskLists+0x74>)
 800d06a:	f7fe fca2 	bl	800b9b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d06e:	4b0b      	ldr	r3, [pc, #44]	; (800d09c <prvInitialiseTaskLists+0x78>)
 800d070:	4a05      	ldr	r2, [pc, #20]	; (800d088 <prvInitialiseTaskLists+0x64>)
 800d072:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d074:	4b0a      	ldr	r3, [pc, #40]	; (800d0a0 <prvInitialiseTaskLists+0x7c>)
 800d076:	4a05      	ldr	r2, [pc, #20]	; (800d08c <prvInitialiseTaskLists+0x68>)
 800d078:	601a      	str	r2, [r3, #0]
}
 800d07a:	bf00      	nop
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	20000550 	.word	0x20000550
 800d088:	200005dc 	.word	0x200005dc
 800d08c:	200005f0 	.word	0x200005f0
 800d090:	2000060c 	.word	0x2000060c
 800d094:	20000620 	.word	0x20000620
 800d098:	20000638 	.word	0x20000638
 800d09c:	20000604 	.word	0x20000604
 800d0a0:	20000608 	.word	0x20000608

0800d0a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0aa:	e019      	b.n	800d0e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d0ac:	f000 fbbc 	bl	800d828 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0b0:	4b0f      	ldr	r3, [pc, #60]	; (800d0f0 <prvCheckTasksWaitingTermination+0x4c>)
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	3304      	adds	r3, #4
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fe fd02 	bl	800bac6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d0c2:	4b0c      	ldr	r3, [pc, #48]	; (800d0f4 <prvCheckTasksWaitingTermination+0x50>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	4a0a      	ldr	r2, [pc, #40]	; (800d0f4 <prvCheckTasksWaitingTermination+0x50>)
 800d0ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d0cc:	4b0a      	ldr	r3, [pc, #40]	; (800d0f8 <prvCheckTasksWaitingTermination+0x54>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	4a09      	ldr	r2, [pc, #36]	; (800d0f8 <prvCheckTasksWaitingTermination+0x54>)
 800d0d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d0d6:	f000 fbd9 	bl	800d88c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 f80e 	bl	800d0fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0e0:	4b05      	ldr	r3, [pc, #20]	; (800d0f8 <prvCheckTasksWaitingTermination+0x54>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d1e1      	bne.n	800d0ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d0e8:	bf00      	nop
 800d0ea:	3708      	adds	r7, #8
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	20000620 	.word	0x20000620
 800d0f4:	2000064c 	.word	0x2000064c
 800d0f8:	20000634 	.word	0x20000634

0800d0fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d108      	bne.n	800d120 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d112:	4618      	mov	r0, r3
 800d114:	f000 fd34 	bl	800db80 <vPortFree>
				vPortFree( pxTCB );
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 fd31 	bl	800db80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d11e:	e019      	b.n	800d154 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d126:	2b01      	cmp	r3, #1
 800d128:	d103      	bne.n	800d132 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 fd28 	bl	800db80 <vPortFree>
	}
 800d130:	e010      	b.n	800d154 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d138:	2b02      	cmp	r3, #2
 800d13a:	d00b      	beq.n	800d154 <prvDeleteTCB+0x58>
 800d13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d140:	b672      	cpsid	i
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	b662      	cpsie	i
 800d150:	60fb      	str	r3, [r7, #12]
 800d152:	e7fe      	b.n	800d152 <prvDeleteTCB+0x56>
	}
 800d154:	bf00      	nop
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d162:	4b0c      	ldr	r3, [pc, #48]	; (800d194 <prvResetNextTaskUnblockTime+0x38>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d104      	bne.n	800d176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d16c:	4b0a      	ldr	r3, [pc, #40]	; (800d198 <prvResetNextTaskUnblockTime+0x3c>)
 800d16e:	f04f 32ff 	mov.w	r2, #4294967295
 800d172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d174:	e008      	b.n	800d188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d176:	4b07      	ldr	r3, [pc, #28]	; (800d194 <prvResetNextTaskUnblockTime+0x38>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	68db      	ldr	r3, [r3, #12]
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	4a04      	ldr	r2, [pc, #16]	; (800d198 <prvResetNextTaskUnblockTime+0x3c>)
 800d186:	6013      	str	r3, [r2, #0]
}
 800d188:	bf00      	nop
 800d18a:	370c      	adds	r7, #12
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr
 800d194:	20000604 	.word	0x20000604
 800d198:	2000066c 	.word	0x2000066c

0800d19c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d1a2:	4b0b      	ldr	r3, [pc, #44]	; (800d1d0 <xTaskGetSchedulerState+0x34>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d102      	bne.n	800d1b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	607b      	str	r3, [r7, #4]
 800d1ae:	e008      	b.n	800d1c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1b0:	4b08      	ldr	r3, [pc, #32]	; (800d1d4 <xTaskGetSchedulerState+0x38>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d102      	bne.n	800d1be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d1b8:	2302      	movs	r3, #2
 800d1ba:	607b      	str	r3, [r7, #4]
 800d1bc:	e001      	b.n	800d1c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d1c2:	687b      	ldr	r3, [r7, #4]
	}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr
 800d1d0:	20000658 	.word	0x20000658
 800d1d4:	20000674 	.word	0x20000674

0800d1d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d069      	beq.n	800d2c2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f2:	4b36      	ldr	r3, [pc, #216]	; (800d2cc <xTaskPriorityInherit+0xf4>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d259      	bcs.n	800d2b0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	699b      	ldr	r3, [r3, #24]
 800d200:	2b00      	cmp	r3, #0
 800d202:	db06      	blt.n	800d212 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d204:	4b31      	ldr	r3, [pc, #196]	; (800d2cc <xTaskPriorityInherit+0xf4>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20a:	f1c3 0207 	rsb	r2, r3, #7
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	6959      	ldr	r1, [r3, #20]
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d21a:	4613      	mov	r3, r2
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	4413      	add	r3, r2
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	4a2b      	ldr	r2, [pc, #172]	; (800d2d0 <xTaskPriorityInherit+0xf8>)
 800d224:	4413      	add	r3, r2
 800d226:	4299      	cmp	r1, r3
 800d228:	d13a      	bne.n	800d2a0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	3304      	adds	r3, #4
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fe fc49 	bl	800bac6 <uxListRemove>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d115      	bne.n	800d266 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d23e:	4924      	ldr	r1, [pc, #144]	; (800d2d0 <xTaskPriorityInherit+0xf8>)
 800d240:	4613      	mov	r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4413      	add	r3, r2
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	440b      	add	r3, r1
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d10a      	bne.n	800d266 <xTaskPriorityInherit+0x8e>
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d254:	2201      	movs	r2, #1
 800d256:	fa02 f303 	lsl.w	r3, r2, r3
 800d25a:	43da      	mvns	r2, r3
 800d25c:	4b1d      	ldr	r3, [pc, #116]	; (800d2d4 <xTaskPriorityInherit+0xfc>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4013      	ands	r3, r2
 800d262:	4a1c      	ldr	r2, [pc, #112]	; (800d2d4 <xTaskPriorityInherit+0xfc>)
 800d264:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d266:	4b19      	ldr	r3, [pc, #100]	; (800d2cc <xTaskPriorityInherit+0xf4>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d274:	2201      	movs	r2, #1
 800d276:	409a      	lsls	r2, r3
 800d278:	4b16      	ldr	r3, [pc, #88]	; (800d2d4 <xTaskPriorityInherit+0xfc>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4313      	orrs	r3, r2
 800d27e:	4a15      	ldr	r2, [pc, #84]	; (800d2d4 <xTaskPriorityInherit+0xfc>)
 800d280:	6013      	str	r3, [r2, #0]
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d286:	4613      	mov	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	4413      	add	r3, r2
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	4a10      	ldr	r2, [pc, #64]	; (800d2d0 <xTaskPriorityInherit+0xf8>)
 800d290:	441a      	add	r2, r3
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	3304      	adds	r3, #4
 800d296:	4619      	mov	r1, r3
 800d298:	4610      	mov	r0, r2
 800d29a:	f7fe fbb7 	bl	800ba0c <vListInsertEnd>
 800d29e:	e004      	b.n	800d2aa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2a0:	4b0a      	ldr	r3, [pc, #40]	; (800d2cc <xTaskPriorityInherit+0xf4>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	60fb      	str	r3, [r7, #12]
 800d2ae:	e008      	b.n	800d2c2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2b4:	4b05      	ldr	r3, [pc, #20]	; (800d2cc <xTaskPriorityInherit+0xf4>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d201      	bcs.n	800d2c2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
	}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3710      	adds	r7, #16
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	2000054c 	.word	0x2000054c
 800d2d0:	20000550 	.word	0x20000550
 800d2d4:	20000654 	.word	0x20000654

0800d2d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b086      	sub	sp, #24
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d070      	beq.n	800d3d0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d2ee:	4b3b      	ldr	r3, [pc, #236]	; (800d3dc <xTaskPriorityDisinherit+0x104>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	693a      	ldr	r2, [r7, #16]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d00b      	beq.n	800d310 <xTaskPriorityDisinherit+0x38>
 800d2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fc:	b672      	cpsid	i
 800d2fe:	f383 8811 	msr	BASEPRI, r3
 800d302:	f3bf 8f6f 	isb	sy
 800d306:	f3bf 8f4f 	dsb	sy
 800d30a:	b662      	cpsie	i
 800d30c:	60fb      	str	r3, [r7, #12]
 800d30e:	e7fe      	b.n	800d30e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10b      	bne.n	800d330 <xTaskPriorityDisinherit+0x58>
 800d318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31c:	b672      	cpsid	i
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	b662      	cpsie	i
 800d32c:	60bb      	str	r3, [r7, #8]
 800d32e:	e7fe      	b.n	800d32e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d334:	1e5a      	subs	r2, r3, #1
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d342:	429a      	cmp	r2, r3
 800d344:	d044      	beq.n	800d3d0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d140      	bne.n	800d3d0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	3304      	adds	r3, #4
 800d352:	4618      	mov	r0, r3
 800d354:	f7fe fbb7 	bl	800bac6 <uxListRemove>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d115      	bne.n	800d38a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d362:	491f      	ldr	r1, [pc, #124]	; (800d3e0 <xTaskPriorityDisinherit+0x108>)
 800d364:	4613      	mov	r3, r2
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	4413      	add	r3, r2
 800d36a:	009b      	lsls	r3, r3, #2
 800d36c:	440b      	add	r3, r1
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d10a      	bne.n	800d38a <xTaskPriorityDisinherit+0xb2>
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d378:	2201      	movs	r2, #1
 800d37a:	fa02 f303 	lsl.w	r3, r2, r3
 800d37e:	43da      	mvns	r2, r3
 800d380:	4b18      	ldr	r3, [pc, #96]	; (800d3e4 <xTaskPriorityDisinherit+0x10c>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4013      	ands	r3, r2
 800d386:	4a17      	ldr	r2, [pc, #92]	; (800d3e4 <xTaskPriorityDisinherit+0x10c>)
 800d388:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d396:	f1c3 0207 	rsb	r2, r3, #7
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	409a      	lsls	r2, r3
 800d3a6:	4b0f      	ldr	r3, [pc, #60]	; (800d3e4 <xTaskPriorityDisinherit+0x10c>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	4a0d      	ldr	r2, [pc, #52]	; (800d3e4 <xTaskPriorityDisinherit+0x10c>)
 800d3ae:	6013      	str	r3, [r2, #0]
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3b4:	4613      	mov	r3, r2
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	4413      	add	r3, r2
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	4a08      	ldr	r2, [pc, #32]	; (800d3e0 <xTaskPriorityDisinherit+0x108>)
 800d3be:	441a      	add	r2, r3
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	3304      	adds	r3, #4
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	4610      	mov	r0, r2
 800d3c8:	f7fe fb20 	bl	800ba0c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3d0:	697b      	ldr	r3, [r7, #20]
	}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3718      	adds	r7, #24
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	2000054c 	.word	0x2000054c
 800d3e0:	20000550 	.word	0x20000550
 800d3e4:	20000654 	.word	0x20000654

0800d3e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b088      	sub	sp, #32
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f000 8085 	beq.w	800d50c <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d406:	2b00      	cmp	r3, #0
 800d408:	d10b      	bne.n	800d422 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800d40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d40e:	b672      	cpsid	i
 800d410:	f383 8811 	msr	BASEPRI, r3
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	b662      	cpsie	i
 800d41e:	60fb      	str	r3, [r7, #12]
 800d420:	e7fe      	b.n	800d420 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d902      	bls.n	800d432 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	61fb      	str	r3, [r7, #28]
 800d430:	e002      	b.n	800d438 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d436:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d438:	69bb      	ldr	r3, [r7, #24]
 800d43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d43c:	69fa      	ldr	r2, [r7, #28]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d064      	beq.n	800d50c <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d442:	69bb      	ldr	r3, [r7, #24]
 800d444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d446:	697a      	ldr	r2, [r7, #20]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d15f      	bne.n	800d50c <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d44c:	4b31      	ldr	r3, [pc, #196]	; (800d514 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	69ba      	ldr	r2, [r7, #24]
 800d452:	429a      	cmp	r2, r3
 800d454:	d10b      	bne.n	800d46e <vTaskPriorityDisinheritAfterTimeout+0x86>
 800d456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45a:	b672      	cpsid	i
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	b662      	cpsie	i
 800d46a:	60bb      	str	r3, [r7, #8]
 800d46c:	e7fe      	b.n	800d46c <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d46e:	69bb      	ldr	r3, [r7, #24]
 800d470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d472:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	69fa      	ldr	r2, [r7, #28]
 800d478:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	699b      	ldr	r3, [r3, #24]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	db04      	blt.n	800d48c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d482:	69fb      	ldr	r3, [r7, #28]
 800d484:	f1c3 0207 	rsb	r2, r3, #7
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	6959      	ldr	r1, [r3, #20]
 800d490:	693a      	ldr	r2, [r7, #16]
 800d492:	4613      	mov	r3, r2
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	4413      	add	r3, r2
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	4a1f      	ldr	r2, [pc, #124]	; (800d518 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d49c:	4413      	add	r3, r2
 800d49e:	4299      	cmp	r1, r3
 800d4a0:	d134      	bne.n	800d50c <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4a2:	69bb      	ldr	r3, [r7, #24]
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7fe fb0d 	bl	800bac6 <uxListRemove>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d115      	bne.n	800d4de <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b6:	4918      	ldr	r1, [pc, #96]	; (800d518 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	4413      	add	r3, r2
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	440b      	add	r3, r1
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d10a      	bne.n	800d4de <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800d4c8:	69bb      	ldr	r3, [r7, #24]
 800d4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d4d2:	43da      	mvns	r2, r3
 800d4d4:	4b11      	ldr	r3, [pc, #68]	; (800d51c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4013      	ands	r3, r2
 800d4da:	4a10      	ldr	r2, [pc, #64]	; (800d51c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d4dc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	409a      	lsls	r2, r3
 800d4e6:	4b0d      	ldr	r3, [pc, #52]	; (800d51c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	4a0b      	ldr	r2, [pc, #44]	; (800d51c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d4ee:	6013      	str	r3, [r2, #0]
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	4413      	add	r3, r2
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	4a06      	ldr	r2, [pc, #24]	; (800d518 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d4fe:	441a      	add	r2, r3
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	3304      	adds	r3, #4
 800d504:	4619      	mov	r1, r3
 800d506:	4610      	mov	r0, r2
 800d508:	f7fe fa80 	bl	800ba0c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d50c:	bf00      	nop
 800d50e:	3720      	adds	r7, #32
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	2000054c 	.word	0x2000054c
 800d518:	20000550 	.word	0x20000550
 800d51c:	20000654 	.word	0x20000654

0800d520 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d520:	b480      	push	{r7}
 800d522:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d524:	4b07      	ldr	r3, [pc, #28]	; (800d544 <pvTaskIncrementMutexHeldCount+0x24>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d004      	beq.n	800d536 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d52c:	4b05      	ldr	r3, [pc, #20]	; (800d544 <pvTaskIncrementMutexHeldCount+0x24>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d532:	3201      	adds	r2, #1
 800d534:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d536:	4b03      	ldr	r3, [pc, #12]	; (800d544 <pvTaskIncrementMutexHeldCount+0x24>)
 800d538:	681b      	ldr	r3, [r3, #0]
	}
 800d53a:	4618      	mov	r0, r3
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr
 800d544:	2000054c 	.word	0x2000054c

0800d548 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d552:	4b29      	ldr	r3, [pc, #164]	; (800d5f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d558:	4b28      	ldr	r3, [pc, #160]	; (800d5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	3304      	adds	r3, #4
 800d55e:	4618      	mov	r0, r3
 800d560:	f7fe fab1 	bl	800bac6 <uxListRemove>
 800d564:	4603      	mov	r3, r0
 800d566:	2b00      	cmp	r3, #0
 800d568:	d10b      	bne.n	800d582 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d56a:	4b24      	ldr	r3, [pc, #144]	; (800d5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d570:	2201      	movs	r2, #1
 800d572:	fa02 f303 	lsl.w	r3, r2, r3
 800d576:	43da      	mvns	r2, r3
 800d578:	4b21      	ldr	r3, [pc, #132]	; (800d600 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4013      	ands	r3, r2
 800d57e:	4a20      	ldr	r2, [pc, #128]	; (800d600 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d580:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d588:	d10a      	bne.n	800d5a0 <prvAddCurrentTaskToDelayedList+0x58>
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d007      	beq.n	800d5a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d590:	4b1a      	ldr	r3, [pc, #104]	; (800d5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	3304      	adds	r3, #4
 800d596:	4619      	mov	r1, r3
 800d598:	481a      	ldr	r0, [pc, #104]	; (800d604 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d59a:	f7fe fa37 	bl	800ba0c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d59e:	e026      	b.n	800d5ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5a0:	68fa      	ldr	r2, [r7, #12]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5a8:	4b14      	ldr	r3, [pc, #80]	; (800d5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	68ba      	ldr	r2, [r7, #8]
 800d5ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5b0:	68ba      	ldr	r2, [r7, #8]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d209      	bcs.n	800d5cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5b8:	4b13      	ldr	r3, [pc, #76]	; (800d608 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	4b0f      	ldr	r3, [pc, #60]	; (800d5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	3304      	adds	r3, #4
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	4610      	mov	r0, r2
 800d5c6:	f7fe fa45 	bl	800ba54 <vListInsert>
}
 800d5ca:	e010      	b.n	800d5ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5cc:	4b0f      	ldr	r3, [pc, #60]	; (800d60c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	4b0a      	ldr	r3, [pc, #40]	; (800d5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	3304      	adds	r3, #4
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	4610      	mov	r0, r2
 800d5da:	f7fe fa3b 	bl	800ba54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d5de:	4b0c      	ldr	r3, [pc, #48]	; (800d610 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	68ba      	ldr	r2, [r7, #8]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d202      	bcs.n	800d5ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d5e8:	4a09      	ldr	r2, [pc, #36]	; (800d610 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	6013      	str	r3, [r2, #0]
}
 800d5ee:	bf00      	nop
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	20000650 	.word	0x20000650
 800d5fc:	2000054c 	.word	0x2000054c
 800d600:	20000654 	.word	0x20000654
 800d604:	20000638 	.word	0x20000638
 800d608:	20000608 	.word	0x20000608
 800d60c:	20000604 	.word	0x20000604
 800d610:	2000066c 	.word	0x2000066c

0800d614 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d614:	b480      	push	{r7}
 800d616:	b085      	sub	sp, #20
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	3b04      	subs	r3, #4
 800d624:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d62c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	3b04      	subs	r3, #4
 800d632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f023 0201 	bic.w	r2, r3, #1
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	3b04      	subs	r3, #4
 800d642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d644:	4a0c      	ldr	r2, [pc, #48]	; (800d678 <pxPortInitialiseStack+0x64>)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	3b14      	subs	r3, #20
 800d64e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	3b04      	subs	r3, #4
 800d65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f06f 0202 	mvn.w	r2, #2
 800d662:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	3b20      	subs	r3, #32
 800d668:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d66a:	68fb      	ldr	r3, [r7, #12]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3714      	adds	r7, #20
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr
 800d678:	0800d67d 	.word	0x0800d67d

0800d67c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d686:	4b13      	ldr	r3, [pc, #76]	; (800d6d4 <prvTaskExitError+0x58>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d68e:	d00b      	beq.n	800d6a8 <prvTaskExitError+0x2c>
 800d690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d694:	b672      	cpsid	i
 800d696:	f383 8811 	msr	BASEPRI, r3
 800d69a:	f3bf 8f6f 	isb	sy
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	b662      	cpsie	i
 800d6a4:	60fb      	str	r3, [r7, #12]
 800d6a6:	e7fe      	b.n	800d6a6 <prvTaskExitError+0x2a>
 800d6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ac:	b672      	cpsid	i
 800d6ae:	f383 8811 	msr	BASEPRI, r3
 800d6b2:	f3bf 8f6f 	isb	sy
 800d6b6:	f3bf 8f4f 	dsb	sy
 800d6ba:	b662      	cpsie	i
 800d6bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d6be:	bf00      	nop
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d0fc      	beq.n	800d6c0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d6c6:	bf00      	nop
 800d6c8:	3714      	adds	r7, #20
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr
 800d6d2:	bf00      	nop
 800d6d4:	20000048 	.word	0x20000048
	...

0800d6e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d6e0:	4b07      	ldr	r3, [pc, #28]	; (800d700 <pxCurrentTCBConst2>)
 800d6e2:	6819      	ldr	r1, [r3, #0]
 800d6e4:	6808      	ldr	r0, [r1, #0]
 800d6e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ea:	f380 8809 	msr	PSP, r0
 800d6ee:	f3bf 8f6f 	isb	sy
 800d6f2:	f04f 0000 	mov.w	r0, #0
 800d6f6:	f380 8811 	msr	BASEPRI, r0
 800d6fa:	4770      	bx	lr
 800d6fc:	f3af 8000 	nop.w

0800d700 <pxCurrentTCBConst2>:
 800d700:	2000054c 	.word	0x2000054c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d704:	bf00      	nop
 800d706:	bf00      	nop

0800d708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d708:	4808      	ldr	r0, [pc, #32]	; (800d72c <prvPortStartFirstTask+0x24>)
 800d70a:	6800      	ldr	r0, [r0, #0]
 800d70c:	6800      	ldr	r0, [r0, #0]
 800d70e:	f380 8808 	msr	MSP, r0
 800d712:	f04f 0000 	mov.w	r0, #0
 800d716:	f380 8814 	msr	CONTROL, r0
 800d71a:	b662      	cpsie	i
 800d71c:	b661      	cpsie	f
 800d71e:	f3bf 8f4f 	dsb	sy
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	df00      	svc	0
 800d728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d72a:	bf00      	nop
 800d72c:	e000ed08 	.word	0xe000ed08

0800d730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d736:	4b36      	ldr	r3, [pc, #216]	; (800d810 <xPortStartScheduler+0xe0>)
 800d738:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	22ff      	movs	r2, #255	; 0xff
 800d746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d750:	78fb      	ldrb	r3, [r7, #3]
 800d752:	b2db      	uxtb	r3, r3
 800d754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	4b2e      	ldr	r3, [pc, #184]	; (800d814 <xPortStartScheduler+0xe4>)
 800d75c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d75e:	4b2e      	ldr	r3, [pc, #184]	; (800d818 <xPortStartScheduler+0xe8>)
 800d760:	2207      	movs	r2, #7
 800d762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d764:	e009      	b.n	800d77a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d766:	4b2c      	ldr	r3, [pc, #176]	; (800d818 <xPortStartScheduler+0xe8>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	3b01      	subs	r3, #1
 800d76c:	4a2a      	ldr	r2, [pc, #168]	; (800d818 <xPortStartScheduler+0xe8>)
 800d76e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d770:	78fb      	ldrb	r3, [r7, #3]
 800d772:	b2db      	uxtb	r3, r3
 800d774:	005b      	lsls	r3, r3, #1
 800d776:	b2db      	uxtb	r3, r3
 800d778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d77a:	78fb      	ldrb	r3, [r7, #3]
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d782:	2b80      	cmp	r3, #128	; 0x80
 800d784:	d0ef      	beq.n	800d766 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d786:	4b24      	ldr	r3, [pc, #144]	; (800d818 <xPortStartScheduler+0xe8>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f1c3 0307 	rsb	r3, r3, #7
 800d78e:	2b04      	cmp	r3, #4
 800d790:	d00b      	beq.n	800d7aa <xPortStartScheduler+0x7a>
 800d792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d796:	b672      	cpsid	i
 800d798:	f383 8811 	msr	BASEPRI, r3
 800d79c:	f3bf 8f6f 	isb	sy
 800d7a0:	f3bf 8f4f 	dsb	sy
 800d7a4:	b662      	cpsie	i
 800d7a6:	60bb      	str	r3, [r7, #8]
 800d7a8:	e7fe      	b.n	800d7a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d7aa:	4b1b      	ldr	r3, [pc, #108]	; (800d818 <xPortStartScheduler+0xe8>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	021b      	lsls	r3, r3, #8
 800d7b0:	4a19      	ldr	r2, [pc, #100]	; (800d818 <xPortStartScheduler+0xe8>)
 800d7b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d7b4:	4b18      	ldr	r3, [pc, #96]	; (800d818 <xPortStartScheduler+0xe8>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d7bc:	4a16      	ldr	r2, [pc, #88]	; (800d818 <xPortStartScheduler+0xe8>)
 800d7be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	b2da      	uxtb	r2, r3
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d7c8:	4b14      	ldr	r3, [pc, #80]	; (800d81c <xPortStartScheduler+0xec>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4a13      	ldr	r2, [pc, #76]	; (800d81c <xPortStartScheduler+0xec>)
 800d7ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d7d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d7d4:	4b11      	ldr	r3, [pc, #68]	; (800d81c <xPortStartScheduler+0xec>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4a10      	ldr	r2, [pc, #64]	; (800d81c <xPortStartScheduler+0xec>)
 800d7da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d7de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d7e0:	f000 f8d4 	bl	800d98c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d7e4:	4b0e      	ldr	r3, [pc, #56]	; (800d820 <xPortStartScheduler+0xf0>)
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d7ea:	f000 f8f3 	bl	800d9d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d7ee:	4b0d      	ldr	r3, [pc, #52]	; (800d824 <xPortStartScheduler+0xf4>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a0c      	ldr	r2, [pc, #48]	; (800d824 <xPortStartScheduler+0xf4>)
 800d7f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d7f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d7fa:	f7ff ff85 	bl	800d708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d7fe:	f7ff fa65 	bl	800cccc <vTaskSwitchContext>
	prvTaskExitError();
 800d802:	f7ff ff3b 	bl	800d67c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d806:	2300      	movs	r3, #0
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	e000e400 	.word	0xe000e400
 800d814:	20000678 	.word	0x20000678
 800d818:	2000067c 	.word	0x2000067c
 800d81c:	e000ed20 	.word	0xe000ed20
 800d820:	20000048 	.word	0x20000048
 800d824:	e000ef34 	.word	0xe000ef34

0800d828 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d832:	b672      	cpsid	i
 800d834:	f383 8811 	msr	BASEPRI, r3
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	b662      	cpsie	i
 800d842:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d844:	4b0f      	ldr	r3, [pc, #60]	; (800d884 <vPortEnterCritical+0x5c>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	3301      	adds	r3, #1
 800d84a:	4a0e      	ldr	r2, [pc, #56]	; (800d884 <vPortEnterCritical+0x5c>)
 800d84c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d84e:	4b0d      	ldr	r3, [pc, #52]	; (800d884 <vPortEnterCritical+0x5c>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2b01      	cmp	r3, #1
 800d854:	d110      	bne.n	800d878 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d856:	4b0c      	ldr	r3, [pc, #48]	; (800d888 <vPortEnterCritical+0x60>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00b      	beq.n	800d878 <vPortEnterCritical+0x50>
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	b672      	cpsid	i
 800d866:	f383 8811 	msr	BASEPRI, r3
 800d86a:	f3bf 8f6f 	isb	sy
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	b662      	cpsie	i
 800d874:	603b      	str	r3, [r7, #0]
 800d876:	e7fe      	b.n	800d876 <vPortEnterCritical+0x4e>
	}
}
 800d878:	bf00      	nop
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr
 800d884:	20000048 	.word	0x20000048
 800d888:	e000ed04 	.word	0xe000ed04

0800d88c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d892:	4b12      	ldr	r3, [pc, #72]	; (800d8dc <vPortExitCritical+0x50>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d10b      	bne.n	800d8b2 <vPortExitCritical+0x26>
 800d89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d89e:	b672      	cpsid	i
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	b662      	cpsie	i
 800d8ae:	607b      	str	r3, [r7, #4]
 800d8b0:	e7fe      	b.n	800d8b0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800d8b2:	4b0a      	ldr	r3, [pc, #40]	; (800d8dc <vPortExitCritical+0x50>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	4a08      	ldr	r2, [pc, #32]	; (800d8dc <vPortExitCritical+0x50>)
 800d8ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d8bc:	4b07      	ldr	r3, [pc, #28]	; (800d8dc <vPortExitCritical+0x50>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d104      	bne.n	800d8ce <vPortExitCritical+0x42>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d8ce:	bf00      	nop
 800d8d0:	370c      	adds	r7, #12
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr
 800d8da:	bf00      	nop
 800d8dc:	20000048 	.word	0x20000048

0800d8e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d8e0:	f3ef 8009 	mrs	r0, PSP
 800d8e4:	f3bf 8f6f 	isb	sy
 800d8e8:	4b15      	ldr	r3, [pc, #84]	; (800d940 <pxCurrentTCBConst>)
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	f01e 0f10 	tst.w	lr, #16
 800d8f0:	bf08      	it	eq
 800d8f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d8f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8fa:	6010      	str	r0, [r2, #0]
 800d8fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d900:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d904:	b672      	cpsid	i
 800d906:	f380 8811 	msr	BASEPRI, r0
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	f3bf 8f6f 	isb	sy
 800d912:	b662      	cpsie	i
 800d914:	f7ff f9da 	bl	800cccc <vTaskSwitchContext>
 800d918:	f04f 0000 	mov.w	r0, #0
 800d91c:	f380 8811 	msr	BASEPRI, r0
 800d920:	bc09      	pop	{r0, r3}
 800d922:	6819      	ldr	r1, [r3, #0]
 800d924:	6808      	ldr	r0, [r1, #0]
 800d926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d92a:	f01e 0f10 	tst.w	lr, #16
 800d92e:	bf08      	it	eq
 800d930:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d934:	f380 8809 	msr	PSP, r0
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop

0800d940 <pxCurrentTCBConst>:
 800d940:	2000054c 	.word	0x2000054c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d944:	bf00      	nop
 800d946:	bf00      	nop

0800d948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
	__asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d952:	b672      	cpsid	i
 800d954:	f383 8811 	msr	BASEPRI, r3
 800d958:	f3bf 8f6f 	isb	sy
 800d95c:	f3bf 8f4f 	dsb	sy
 800d960:	b662      	cpsie	i
 800d962:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d964:	f7ff f8f8 	bl	800cb58 <xTaskIncrementTick>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d003      	beq.n	800d976 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d96e:	4b06      	ldr	r3, [pc, #24]	; (800d988 <SysTick_Handler+0x40>)
 800d970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	2300      	movs	r3, #0
 800d978:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d980:	bf00      	nop
 800d982:	3708      	adds	r7, #8
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	e000ed04 	.word	0xe000ed04

0800d98c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d98c:	b480      	push	{r7}
 800d98e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d990:	4b0b      	ldr	r3, [pc, #44]	; (800d9c0 <vPortSetupTimerInterrupt+0x34>)
 800d992:	2200      	movs	r2, #0
 800d994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d996:	4b0b      	ldr	r3, [pc, #44]	; (800d9c4 <vPortSetupTimerInterrupt+0x38>)
 800d998:	2200      	movs	r2, #0
 800d99a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d99c:	4b0a      	ldr	r3, [pc, #40]	; (800d9c8 <vPortSetupTimerInterrupt+0x3c>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4a0a      	ldr	r2, [pc, #40]	; (800d9cc <vPortSetupTimerInterrupt+0x40>)
 800d9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d9a6:	099b      	lsrs	r3, r3, #6
 800d9a8:	4a09      	ldr	r2, [pc, #36]	; (800d9d0 <vPortSetupTimerInterrupt+0x44>)
 800d9aa:	3b01      	subs	r3, #1
 800d9ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d9ae:	4b04      	ldr	r3, [pc, #16]	; (800d9c0 <vPortSetupTimerInterrupt+0x34>)
 800d9b0:	2207      	movs	r2, #7
 800d9b2:	601a      	str	r2, [r3, #0]
}
 800d9b4:	bf00      	nop
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop
 800d9c0:	e000e010 	.word	0xe000e010
 800d9c4:	e000e018 	.word	0xe000e018
 800d9c8:	2000003c 	.word	0x2000003c
 800d9cc:	10624dd3 	.word	0x10624dd3
 800d9d0:	e000e014 	.word	0xe000e014

0800d9d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d9d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d9e4 <vPortEnableVFP+0x10>
 800d9d8:	6801      	ldr	r1, [r0, #0]
 800d9da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d9de:	6001      	str	r1, [r0, #0]
 800d9e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d9e2:	bf00      	nop
 800d9e4:	e000ed88 	.word	0xe000ed88

0800d9e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b08a      	sub	sp, #40	; 0x28
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d9f4:	f7ff f804 	bl	800ca00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d9f8:	4b5c      	ldr	r3, [pc, #368]	; (800db6c <pvPortMalloc+0x184>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d101      	bne.n	800da04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800da00:	f000 f91a 	bl	800dc38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800da04:	4b5a      	ldr	r3, [pc, #360]	; (800db70 <pvPortMalloc+0x188>)
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4013      	ands	r3, r2
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	f040 8090 	bne.w	800db32 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d01e      	beq.n	800da56 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800da18:	2208      	movs	r2, #8
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	4413      	add	r3, r2
 800da1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f003 0307 	and.w	r3, r3, #7
 800da26:	2b00      	cmp	r3, #0
 800da28:	d015      	beq.n	800da56 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f023 0307 	bic.w	r3, r3, #7
 800da30:	3308      	adds	r3, #8
 800da32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f003 0307 	and.w	r3, r3, #7
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00b      	beq.n	800da56 <pvPortMalloc+0x6e>
	__asm volatile
 800da3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da42:	b672      	cpsid	i
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	f3bf 8f6f 	isb	sy
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	b662      	cpsie	i
 800da52:	617b      	str	r3, [r7, #20]
 800da54:	e7fe      	b.n	800da54 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d06a      	beq.n	800db32 <pvPortMalloc+0x14a>
 800da5c:	4b45      	ldr	r3, [pc, #276]	; (800db74 <pvPortMalloc+0x18c>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	429a      	cmp	r2, r3
 800da64:	d865      	bhi.n	800db32 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800da66:	4b44      	ldr	r3, [pc, #272]	; (800db78 <pvPortMalloc+0x190>)
 800da68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800da6a:	4b43      	ldr	r3, [pc, #268]	; (800db78 <pvPortMalloc+0x190>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da70:	e004      	b.n	800da7c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800da72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800da76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	687a      	ldr	r2, [r7, #4]
 800da82:	429a      	cmp	r2, r3
 800da84:	d903      	bls.n	800da8e <pvPortMalloc+0xa6>
 800da86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d1f1      	bne.n	800da72 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800da8e:	4b37      	ldr	r3, [pc, #220]	; (800db6c <pvPortMalloc+0x184>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da94:	429a      	cmp	r2, r3
 800da96:	d04c      	beq.n	800db32 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da98:	6a3b      	ldr	r3, [r7, #32]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2208      	movs	r2, #8
 800da9e:	4413      	add	r3, r2
 800daa0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800daa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	6a3b      	ldr	r3, [r7, #32]
 800daa8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800daaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daac:	685a      	ldr	r2, [r3, #4]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	1ad2      	subs	r2, r2, r3
 800dab2:	2308      	movs	r3, #8
 800dab4:	005b      	lsls	r3, r3, #1
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d920      	bls.n	800dafc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800daba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	4413      	add	r3, r2
 800dac0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	f003 0307 	and.w	r3, r3, #7
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00b      	beq.n	800dae4 <pvPortMalloc+0xfc>
 800dacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad0:	b672      	cpsid	i
 800dad2:	f383 8811 	msr	BASEPRI, r3
 800dad6:	f3bf 8f6f 	isb	sy
 800dada:	f3bf 8f4f 	dsb	sy
 800dade:	b662      	cpsie	i
 800dae0:	613b      	str	r3, [r7, #16]
 800dae2:	e7fe      	b.n	800dae2 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae6:	685a      	ldr	r2, [r3, #4]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	1ad2      	subs	r2, r2, r3
 800daec:	69bb      	ldr	r3, [r7, #24]
 800daee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800daf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800daf6:	69b8      	ldr	r0, [r7, #24]
 800daf8:	f000 f900 	bl	800dcfc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dafc:	4b1d      	ldr	r3, [pc, #116]	; (800db74 <pvPortMalloc+0x18c>)
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	1ad3      	subs	r3, r2, r3
 800db06:	4a1b      	ldr	r2, [pc, #108]	; (800db74 <pvPortMalloc+0x18c>)
 800db08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db0a:	4b1a      	ldr	r3, [pc, #104]	; (800db74 <pvPortMalloc+0x18c>)
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	4b1b      	ldr	r3, [pc, #108]	; (800db7c <pvPortMalloc+0x194>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	429a      	cmp	r2, r3
 800db14:	d203      	bcs.n	800db1e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db16:	4b17      	ldr	r3, [pc, #92]	; (800db74 <pvPortMalloc+0x18c>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a18      	ldr	r2, [pc, #96]	; (800db7c <pvPortMalloc+0x194>)
 800db1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db20:	685a      	ldr	r2, [r3, #4]
 800db22:	4b13      	ldr	r3, [pc, #76]	; (800db70 <pvPortMalloc+0x188>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	431a      	orrs	r2, r3
 800db28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800db2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2e:	2200      	movs	r2, #0
 800db30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800db32:	f7fe ff73 	bl	800ca1c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d101      	bne.n	800db40 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800db3c:	f7f2 fd4a 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800db40:	69fb      	ldr	r3, [r7, #28]
 800db42:	f003 0307 	and.w	r3, r3, #7
 800db46:	2b00      	cmp	r3, #0
 800db48:	d00b      	beq.n	800db62 <pvPortMalloc+0x17a>
 800db4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4e:	b672      	cpsid	i
 800db50:	f383 8811 	msr	BASEPRI, r3
 800db54:	f3bf 8f6f 	isb	sy
 800db58:	f3bf 8f4f 	dsb	sy
 800db5c:	b662      	cpsie	i
 800db5e:	60fb      	str	r3, [r7, #12]
 800db60:	e7fe      	b.n	800db60 <pvPortMalloc+0x178>
	return pvReturn;
 800db62:	69fb      	ldr	r3, [r7, #28]
}
 800db64:	4618      	mov	r0, r3
 800db66:	3728      	adds	r7, #40	; 0x28
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	20008688 	.word	0x20008688
 800db70:	20008694 	.word	0x20008694
 800db74:	2000868c 	.word	0x2000868c
 800db78:	20008680 	.word	0x20008680
 800db7c:	20008690 	.word	0x20008690

0800db80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b086      	sub	sp, #24
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d04a      	beq.n	800dc28 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800db92:	2308      	movs	r3, #8
 800db94:	425b      	negs	r3, r3
 800db96:	697a      	ldr	r2, [r7, #20]
 800db98:	4413      	add	r3, r2
 800db9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	685a      	ldr	r2, [r3, #4]
 800dba4:	4b22      	ldr	r3, [pc, #136]	; (800dc30 <vPortFree+0xb0>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4013      	ands	r3, r2
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d10b      	bne.n	800dbc6 <vPortFree+0x46>
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	b672      	cpsid	i
 800dbb4:	f383 8811 	msr	BASEPRI, r3
 800dbb8:	f3bf 8f6f 	isb	sy
 800dbbc:	f3bf 8f4f 	dsb	sy
 800dbc0:	b662      	cpsie	i
 800dbc2:	60fb      	str	r3, [r7, #12]
 800dbc4:	e7fe      	b.n	800dbc4 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00b      	beq.n	800dbe6 <vPortFree+0x66>
 800dbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd2:	b672      	cpsid	i
 800dbd4:	f383 8811 	msr	BASEPRI, r3
 800dbd8:	f3bf 8f6f 	isb	sy
 800dbdc:	f3bf 8f4f 	dsb	sy
 800dbe0:	b662      	cpsie	i
 800dbe2:	60bb      	str	r3, [r7, #8]
 800dbe4:	e7fe      	b.n	800dbe4 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	685a      	ldr	r2, [r3, #4]
 800dbea:	4b11      	ldr	r3, [pc, #68]	; (800dc30 <vPortFree+0xb0>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	4013      	ands	r3, r2
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d019      	beq.n	800dc28 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d115      	bne.n	800dc28 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	685a      	ldr	r2, [r3, #4]
 800dc00:	4b0b      	ldr	r3, [pc, #44]	; (800dc30 <vPortFree+0xb0>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	43db      	mvns	r3, r3
 800dc06:	401a      	ands	r2, r3
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dc0c:	f7fe fef8 	bl	800ca00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	685a      	ldr	r2, [r3, #4]
 800dc14:	4b07      	ldr	r3, [pc, #28]	; (800dc34 <vPortFree+0xb4>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	4413      	add	r3, r2
 800dc1a:	4a06      	ldr	r2, [pc, #24]	; (800dc34 <vPortFree+0xb4>)
 800dc1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc1e:	6938      	ldr	r0, [r7, #16]
 800dc20:	f000 f86c 	bl	800dcfc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dc24:	f7fe fefa 	bl	800ca1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dc28:	bf00      	nop
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	20008694 	.word	0x20008694
 800dc34:	2000868c 	.word	0x2000868c

0800dc38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dc44:	4b27      	ldr	r3, [pc, #156]	; (800dce4 <prvHeapInit+0xac>)
 800dc46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f003 0307 	and.w	r3, r3, #7
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00c      	beq.n	800dc6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	3307      	adds	r3, #7
 800dc56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f023 0307 	bic.w	r3, r3, #7
 800dc5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dc60:	68ba      	ldr	r2, [r7, #8]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	1ad3      	subs	r3, r2, r3
 800dc66:	4a1f      	ldr	r2, [pc, #124]	; (800dce4 <prvHeapInit+0xac>)
 800dc68:	4413      	add	r3, r2
 800dc6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc70:	4a1d      	ldr	r2, [pc, #116]	; (800dce8 <prvHeapInit+0xb0>)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dc76:	4b1c      	ldr	r3, [pc, #112]	; (800dce8 <prvHeapInit+0xb0>)
 800dc78:	2200      	movs	r2, #0
 800dc7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	68ba      	ldr	r2, [r7, #8]
 800dc80:	4413      	add	r3, r2
 800dc82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dc84:	2208      	movs	r2, #8
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	1a9b      	subs	r3, r3, r2
 800dc8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f023 0307 	bic.w	r3, r3, #7
 800dc92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	4a15      	ldr	r2, [pc, #84]	; (800dcec <prvHeapInit+0xb4>)
 800dc98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dc9a:	4b14      	ldr	r3, [pc, #80]	; (800dcec <prvHeapInit+0xb4>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dca2:	4b12      	ldr	r3, [pc, #72]	; (800dcec <prvHeapInit+0xb4>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2200      	movs	r2, #0
 800dca8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	68fa      	ldr	r2, [r7, #12]
 800dcb2:	1ad2      	subs	r2, r2, r3
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dcb8:	4b0c      	ldr	r3, [pc, #48]	; (800dcec <prvHeapInit+0xb4>)
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	4a0a      	ldr	r2, [pc, #40]	; (800dcf0 <prvHeapInit+0xb8>)
 800dcc6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	4a09      	ldr	r2, [pc, #36]	; (800dcf4 <prvHeapInit+0xbc>)
 800dcce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dcd0:	4b09      	ldr	r3, [pc, #36]	; (800dcf8 <prvHeapInit+0xc0>)
 800dcd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dcd6:	601a      	str	r2, [r3, #0]
}
 800dcd8:	bf00      	nop
 800dcda:	3714      	adds	r7, #20
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr
 800dce4:	20000680 	.word	0x20000680
 800dce8:	20008680 	.word	0x20008680
 800dcec:	20008688 	.word	0x20008688
 800dcf0:	20008690 	.word	0x20008690
 800dcf4:	2000868c 	.word	0x2000868c
 800dcf8:	20008694 	.word	0x20008694

0800dcfc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b085      	sub	sp, #20
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dd04:	4b28      	ldr	r3, [pc, #160]	; (800dda8 <prvInsertBlockIntoFreeList+0xac>)
 800dd06:	60fb      	str	r3, [r7, #12]
 800dd08:	e002      	b.n	800dd10 <prvInsertBlockIntoFreeList+0x14>
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	60fb      	str	r3, [r7, #12]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d8f7      	bhi.n	800dd0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	68ba      	ldr	r2, [r7, #8]
 800dd24:	4413      	add	r3, r2
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d108      	bne.n	800dd3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	685a      	ldr	r2, [r3, #4]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	441a      	add	r2, r3
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	68ba      	ldr	r2, [r7, #8]
 800dd48:	441a      	add	r2, r3
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d118      	bne.n	800dd84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	4b15      	ldr	r3, [pc, #84]	; (800ddac <prvInsertBlockIntoFreeList+0xb0>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d00d      	beq.n	800dd7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	685a      	ldr	r2, [r3, #4]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	441a      	add	r2, r3
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	601a      	str	r2, [r3, #0]
 800dd78:	e008      	b.n	800dd8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dd7a:	4b0c      	ldr	r3, [pc, #48]	; (800ddac <prvInsertBlockIntoFreeList+0xb0>)
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	601a      	str	r2, [r3, #0]
 800dd82:	e003      	b.n	800dd8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d002      	beq.n	800dd9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd9a:	bf00      	nop
 800dd9c:	3714      	adds	r7, #20
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr
 800dda6:	bf00      	nop
 800dda8:	20008680 	.word	0x20008680
 800ddac:	20008688 	.word	0x20008688

0800ddb0 <__errno>:
 800ddb0:	4b01      	ldr	r3, [pc, #4]	; (800ddb8 <__errno+0x8>)
 800ddb2:	6818      	ldr	r0, [r3, #0]
 800ddb4:	4770      	bx	lr
 800ddb6:	bf00      	nop
 800ddb8:	2000004c 	.word	0x2000004c

0800ddbc <__libc_init_array>:
 800ddbc:	b570      	push	{r4, r5, r6, lr}
 800ddbe:	4e0d      	ldr	r6, [pc, #52]	; (800ddf4 <__libc_init_array+0x38>)
 800ddc0:	4c0d      	ldr	r4, [pc, #52]	; (800ddf8 <__libc_init_array+0x3c>)
 800ddc2:	1ba4      	subs	r4, r4, r6
 800ddc4:	10a4      	asrs	r4, r4, #2
 800ddc6:	2500      	movs	r5, #0
 800ddc8:	42a5      	cmp	r5, r4
 800ddca:	d109      	bne.n	800dde0 <__libc_init_array+0x24>
 800ddcc:	4e0b      	ldr	r6, [pc, #44]	; (800ddfc <__libc_init_array+0x40>)
 800ddce:	4c0c      	ldr	r4, [pc, #48]	; (800de00 <__libc_init_array+0x44>)
 800ddd0:	f000 fc28 	bl	800e624 <_init>
 800ddd4:	1ba4      	subs	r4, r4, r6
 800ddd6:	10a4      	asrs	r4, r4, #2
 800ddd8:	2500      	movs	r5, #0
 800ddda:	42a5      	cmp	r5, r4
 800dddc:	d105      	bne.n	800ddea <__libc_init_array+0x2e>
 800ddde:	bd70      	pop	{r4, r5, r6, pc}
 800dde0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dde4:	4798      	blx	r3
 800dde6:	3501      	adds	r5, #1
 800dde8:	e7ee      	b.n	800ddc8 <__libc_init_array+0xc>
 800ddea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ddee:	4798      	blx	r3
 800ddf0:	3501      	adds	r5, #1
 800ddf2:	e7f2      	b.n	800ddda <__libc_init_array+0x1e>
 800ddf4:	08010708 	.word	0x08010708
 800ddf8:	08010708 	.word	0x08010708
 800ddfc:	08010708 	.word	0x08010708
 800de00:	0801070c 	.word	0x0801070c

0800de04 <memcpy>:
 800de04:	b510      	push	{r4, lr}
 800de06:	1e43      	subs	r3, r0, #1
 800de08:	440a      	add	r2, r1
 800de0a:	4291      	cmp	r1, r2
 800de0c:	d100      	bne.n	800de10 <memcpy+0xc>
 800de0e:	bd10      	pop	{r4, pc}
 800de10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de18:	e7f7      	b.n	800de0a <memcpy+0x6>

0800de1a <memset>:
 800de1a:	4402      	add	r2, r0
 800de1c:	4603      	mov	r3, r0
 800de1e:	4293      	cmp	r3, r2
 800de20:	d100      	bne.n	800de24 <memset+0xa>
 800de22:	4770      	bx	lr
 800de24:	f803 1b01 	strb.w	r1, [r3], #1
 800de28:	e7f9      	b.n	800de1e <memset+0x4>
	...

0800de2c <siprintf>:
 800de2c:	b40e      	push	{r1, r2, r3}
 800de2e:	b500      	push	{lr}
 800de30:	b09c      	sub	sp, #112	; 0x70
 800de32:	ab1d      	add	r3, sp, #116	; 0x74
 800de34:	9002      	str	r0, [sp, #8]
 800de36:	9006      	str	r0, [sp, #24]
 800de38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800de3c:	4809      	ldr	r0, [pc, #36]	; (800de64 <siprintf+0x38>)
 800de3e:	9107      	str	r1, [sp, #28]
 800de40:	9104      	str	r1, [sp, #16]
 800de42:	4909      	ldr	r1, [pc, #36]	; (800de68 <siprintf+0x3c>)
 800de44:	f853 2b04 	ldr.w	r2, [r3], #4
 800de48:	9105      	str	r1, [sp, #20]
 800de4a:	6800      	ldr	r0, [r0, #0]
 800de4c:	9301      	str	r3, [sp, #4]
 800de4e:	a902      	add	r1, sp, #8
 800de50:	f000 f866 	bl	800df20 <_svfiprintf_r>
 800de54:	9b02      	ldr	r3, [sp, #8]
 800de56:	2200      	movs	r2, #0
 800de58:	701a      	strb	r2, [r3, #0]
 800de5a:	b01c      	add	sp, #112	; 0x70
 800de5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de60:	b003      	add	sp, #12
 800de62:	4770      	bx	lr
 800de64:	2000004c 	.word	0x2000004c
 800de68:	ffff0208 	.word	0xffff0208

0800de6c <__ssputs_r>:
 800de6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de70:	688e      	ldr	r6, [r1, #8]
 800de72:	429e      	cmp	r6, r3
 800de74:	4682      	mov	sl, r0
 800de76:	460c      	mov	r4, r1
 800de78:	4690      	mov	r8, r2
 800de7a:	4699      	mov	r9, r3
 800de7c:	d837      	bhi.n	800deee <__ssputs_r+0x82>
 800de7e:	898a      	ldrh	r2, [r1, #12]
 800de80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800de84:	d031      	beq.n	800deea <__ssputs_r+0x7e>
 800de86:	6825      	ldr	r5, [r4, #0]
 800de88:	6909      	ldr	r1, [r1, #16]
 800de8a:	1a6f      	subs	r7, r5, r1
 800de8c:	6965      	ldr	r5, [r4, #20]
 800de8e:	2302      	movs	r3, #2
 800de90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de94:	fb95 f5f3 	sdiv	r5, r5, r3
 800de98:	f109 0301 	add.w	r3, r9, #1
 800de9c:	443b      	add	r3, r7
 800de9e:	429d      	cmp	r5, r3
 800dea0:	bf38      	it	cc
 800dea2:	461d      	movcc	r5, r3
 800dea4:	0553      	lsls	r3, r2, #21
 800dea6:	d530      	bpl.n	800df0a <__ssputs_r+0x9e>
 800dea8:	4629      	mov	r1, r5
 800deaa:	f000 fb21 	bl	800e4f0 <_malloc_r>
 800deae:	4606      	mov	r6, r0
 800deb0:	b950      	cbnz	r0, 800dec8 <__ssputs_r+0x5c>
 800deb2:	230c      	movs	r3, #12
 800deb4:	f8ca 3000 	str.w	r3, [sl]
 800deb8:	89a3      	ldrh	r3, [r4, #12]
 800deba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800debe:	81a3      	strh	r3, [r4, #12]
 800dec0:	f04f 30ff 	mov.w	r0, #4294967295
 800dec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dec8:	463a      	mov	r2, r7
 800deca:	6921      	ldr	r1, [r4, #16]
 800decc:	f7ff ff9a 	bl	800de04 <memcpy>
 800ded0:	89a3      	ldrh	r3, [r4, #12]
 800ded2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ded6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800deda:	81a3      	strh	r3, [r4, #12]
 800dedc:	6126      	str	r6, [r4, #16]
 800dede:	6165      	str	r5, [r4, #20]
 800dee0:	443e      	add	r6, r7
 800dee2:	1bed      	subs	r5, r5, r7
 800dee4:	6026      	str	r6, [r4, #0]
 800dee6:	60a5      	str	r5, [r4, #8]
 800dee8:	464e      	mov	r6, r9
 800deea:	454e      	cmp	r6, r9
 800deec:	d900      	bls.n	800def0 <__ssputs_r+0x84>
 800deee:	464e      	mov	r6, r9
 800def0:	4632      	mov	r2, r6
 800def2:	4641      	mov	r1, r8
 800def4:	6820      	ldr	r0, [r4, #0]
 800def6:	f000 fa93 	bl	800e420 <memmove>
 800defa:	68a3      	ldr	r3, [r4, #8]
 800defc:	1b9b      	subs	r3, r3, r6
 800defe:	60a3      	str	r3, [r4, #8]
 800df00:	6823      	ldr	r3, [r4, #0]
 800df02:	441e      	add	r6, r3
 800df04:	6026      	str	r6, [r4, #0]
 800df06:	2000      	movs	r0, #0
 800df08:	e7dc      	b.n	800dec4 <__ssputs_r+0x58>
 800df0a:	462a      	mov	r2, r5
 800df0c:	f000 fb4a 	bl	800e5a4 <_realloc_r>
 800df10:	4606      	mov	r6, r0
 800df12:	2800      	cmp	r0, #0
 800df14:	d1e2      	bne.n	800dedc <__ssputs_r+0x70>
 800df16:	6921      	ldr	r1, [r4, #16]
 800df18:	4650      	mov	r0, sl
 800df1a:	f000 fa9b 	bl	800e454 <_free_r>
 800df1e:	e7c8      	b.n	800deb2 <__ssputs_r+0x46>

0800df20 <_svfiprintf_r>:
 800df20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df24:	461d      	mov	r5, r3
 800df26:	898b      	ldrh	r3, [r1, #12]
 800df28:	061f      	lsls	r7, r3, #24
 800df2a:	b09d      	sub	sp, #116	; 0x74
 800df2c:	4680      	mov	r8, r0
 800df2e:	460c      	mov	r4, r1
 800df30:	4616      	mov	r6, r2
 800df32:	d50f      	bpl.n	800df54 <_svfiprintf_r+0x34>
 800df34:	690b      	ldr	r3, [r1, #16]
 800df36:	b96b      	cbnz	r3, 800df54 <_svfiprintf_r+0x34>
 800df38:	2140      	movs	r1, #64	; 0x40
 800df3a:	f000 fad9 	bl	800e4f0 <_malloc_r>
 800df3e:	6020      	str	r0, [r4, #0]
 800df40:	6120      	str	r0, [r4, #16]
 800df42:	b928      	cbnz	r0, 800df50 <_svfiprintf_r+0x30>
 800df44:	230c      	movs	r3, #12
 800df46:	f8c8 3000 	str.w	r3, [r8]
 800df4a:	f04f 30ff 	mov.w	r0, #4294967295
 800df4e:	e0c8      	b.n	800e0e2 <_svfiprintf_r+0x1c2>
 800df50:	2340      	movs	r3, #64	; 0x40
 800df52:	6163      	str	r3, [r4, #20]
 800df54:	2300      	movs	r3, #0
 800df56:	9309      	str	r3, [sp, #36]	; 0x24
 800df58:	2320      	movs	r3, #32
 800df5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df5e:	2330      	movs	r3, #48	; 0x30
 800df60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df64:	9503      	str	r5, [sp, #12]
 800df66:	f04f 0b01 	mov.w	fp, #1
 800df6a:	4637      	mov	r7, r6
 800df6c:	463d      	mov	r5, r7
 800df6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800df72:	b10b      	cbz	r3, 800df78 <_svfiprintf_r+0x58>
 800df74:	2b25      	cmp	r3, #37	; 0x25
 800df76:	d13e      	bne.n	800dff6 <_svfiprintf_r+0xd6>
 800df78:	ebb7 0a06 	subs.w	sl, r7, r6
 800df7c:	d00b      	beq.n	800df96 <_svfiprintf_r+0x76>
 800df7e:	4653      	mov	r3, sl
 800df80:	4632      	mov	r2, r6
 800df82:	4621      	mov	r1, r4
 800df84:	4640      	mov	r0, r8
 800df86:	f7ff ff71 	bl	800de6c <__ssputs_r>
 800df8a:	3001      	adds	r0, #1
 800df8c:	f000 80a4 	beq.w	800e0d8 <_svfiprintf_r+0x1b8>
 800df90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df92:	4453      	add	r3, sl
 800df94:	9309      	str	r3, [sp, #36]	; 0x24
 800df96:	783b      	ldrb	r3, [r7, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	f000 809d 	beq.w	800e0d8 <_svfiprintf_r+0x1b8>
 800df9e:	2300      	movs	r3, #0
 800dfa0:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfa8:	9304      	str	r3, [sp, #16]
 800dfaa:	9307      	str	r3, [sp, #28]
 800dfac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfb0:	931a      	str	r3, [sp, #104]	; 0x68
 800dfb2:	462f      	mov	r7, r5
 800dfb4:	2205      	movs	r2, #5
 800dfb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dfba:	4850      	ldr	r0, [pc, #320]	; (800e0fc <_svfiprintf_r+0x1dc>)
 800dfbc:	f7f2 f928 	bl	8000210 <memchr>
 800dfc0:	9b04      	ldr	r3, [sp, #16]
 800dfc2:	b9d0      	cbnz	r0, 800dffa <_svfiprintf_r+0xda>
 800dfc4:	06d9      	lsls	r1, r3, #27
 800dfc6:	bf44      	itt	mi
 800dfc8:	2220      	movmi	r2, #32
 800dfca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dfce:	071a      	lsls	r2, r3, #28
 800dfd0:	bf44      	itt	mi
 800dfd2:	222b      	movmi	r2, #43	; 0x2b
 800dfd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dfd8:	782a      	ldrb	r2, [r5, #0]
 800dfda:	2a2a      	cmp	r2, #42	; 0x2a
 800dfdc:	d015      	beq.n	800e00a <_svfiprintf_r+0xea>
 800dfde:	9a07      	ldr	r2, [sp, #28]
 800dfe0:	462f      	mov	r7, r5
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	250a      	movs	r5, #10
 800dfe6:	4639      	mov	r1, r7
 800dfe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfec:	3b30      	subs	r3, #48	; 0x30
 800dfee:	2b09      	cmp	r3, #9
 800dff0:	d94d      	bls.n	800e08e <_svfiprintf_r+0x16e>
 800dff2:	b1b8      	cbz	r0, 800e024 <_svfiprintf_r+0x104>
 800dff4:	e00f      	b.n	800e016 <_svfiprintf_r+0xf6>
 800dff6:	462f      	mov	r7, r5
 800dff8:	e7b8      	b.n	800df6c <_svfiprintf_r+0x4c>
 800dffa:	4a40      	ldr	r2, [pc, #256]	; (800e0fc <_svfiprintf_r+0x1dc>)
 800dffc:	1a80      	subs	r0, r0, r2
 800dffe:	fa0b f000 	lsl.w	r0, fp, r0
 800e002:	4318      	orrs	r0, r3
 800e004:	9004      	str	r0, [sp, #16]
 800e006:	463d      	mov	r5, r7
 800e008:	e7d3      	b.n	800dfb2 <_svfiprintf_r+0x92>
 800e00a:	9a03      	ldr	r2, [sp, #12]
 800e00c:	1d11      	adds	r1, r2, #4
 800e00e:	6812      	ldr	r2, [r2, #0]
 800e010:	9103      	str	r1, [sp, #12]
 800e012:	2a00      	cmp	r2, #0
 800e014:	db01      	blt.n	800e01a <_svfiprintf_r+0xfa>
 800e016:	9207      	str	r2, [sp, #28]
 800e018:	e004      	b.n	800e024 <_svfiprintf_r+0x104>
 800e01a:	4252      	negs	r2, r2
 800e01c:	f043 0302 	orr.w	r3, r3, #2
 800e020:	9207      	str	r2, [sp, #28]
 800e022:	9304      	str	r3, [sp, #16]
 800e024:	783b      	ldrb	r3, [r7, #0]
 800e026:	2b2e      	cmp	r3, #46	; 0x2e
 800e028:	d10c      	bne.n	800e044 <_svfiprintf_r+0x124>
 800e02a:	787b      	ldrb	r3, [r7, #1]
 800e02c:	2b2a      	cmp	r3, #42	; 0x2a
 800e02e:	d133      	bne.n	800e098 <_svfiprintf_r+0x178>
 800e030:	9b03      	ldr	r3, [sp, #12]
 800e032:	1d1a      	adds	r2, r3, #4
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	9203      	str	r2, [sp, #12]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	bfb8      	it	lt
 800e03c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e040:	3702      	adds	r7, #2
 800e042:	9305      	str	r3, [sp, #20]
 800e044:	4d2e      	ldr	r5, [pc, #184]	; (800e100 <_svfiprintf_r+0x1e0>)
 800e046:	7839      	ldrb	r1, [r7, #0]
 800e048:	2203      	movs	r2, #3
 800e04a:	4628      	mov	r0, r5
 800e04c:	f7f2 f8e0 	bl	8000210 <memchr>
 800e050:	b138      	cbz	r0, 800e062 <_svfiprintf_r+0x142>
 800e052:	2340      	movs	r3, #64	; 0x40
 800e054:	1b40      	subs	r0, r0, r5
 800e056:	fa03 f000 	lsl.w	r0, r3, r0
 800e05a:	9b04      	ldr	r3, [sp, #16]
 800e05c:	4303      	orrs	r3, r0
 800e05e:	3701      	adds	r7, #1
 800e060:	9304      	str	r3, [sp, #16]
 800e062:	7839      	ldrb	r1, [r7, #0]
 800e064:	4827      	ldr	r0, [pc, #156]	; (800e104 <_svfiprintf_r+0x1e4>)
 800e066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e06a:	2206      	movs	r2, #6
 800e06c:	1c7e      	adds	r6, r7, #1
 800e06e:	f7f2 f8cf 	bl	8000210 <memchr>
 800e072:	2800      	cmp	r0, #0
 800e074:	d038      	beq.n	800e0e8 <_svfiprintf_r+0x1c8>
 800e076:	4b24      	ldr	r3, [pc, #144]	; (800e108 <_svfiprintf_r+0x1e8>)
 800e078:	bb13      	cbnz	r3, 800e0c0 <_svfiprintf_r+0x1a0>
 800e07a:	9b03      	ldr	r3, [sp, #12]
 800e07c:	3307      	adds	r3, #7
 800e07e:	f023 0307 	bic.w	r3, r3, #7
 800e082:	3308      	adds	r3, #8
 800e084:	9303      	str	r3, [sp, #12]
 800e086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e088:	444b      	add	r3, r9
 800e08a:	9309      	str	r3, [sp, #36]	; 0x24
 800e08c:	e76d      	b.n	800df6a <_svfiprintf_r+0x4a>
 800e08e:	fb05 3202 	mla	r2, r5, r2, r3
 800e092:	2001      	movs	r0, #1
 800e094:	460f      	mov	r7, r1
 800e096:	e7a6      	b.n	800dfe6 <_svfiprintf_r+0xc6>
 800e098:	2300      	movs	r3, #0
 800e09a:	3701      	adds	r7, #1
 800e09c:	9305      	str	r3, [sp, #20]
 800e09e:	4619      	mov	r1, r3
 800e0a0:	250a      	movs	r5, #10
 800e0a2:	4638      	mov	r0, r7
 800e0a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0a8:	3a30      	subs	r2, #48	; 0x30
 800e0aa:	2a09      	cmp	r2, #9
 800e0ac:	d903      	bls.n	800e0b6 <_svfiprintf_r+0x196>
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d0c8      	beq.n	800e044 <_svfiprintf_r+0x124>
 800e0b2:	9105      	str	r1, [sp, #20]
 800e0b4:	e7c6      	b.n	800e044 <_svfiprintf_r+0x124>
 800e0b6:	fb05 2101 	mla	r1, r5, r1, r2
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	4607      	mov	r7, r0
 800e0be:	e7f0      	b.n	800e0a2 <_svfiprintf_r+0x182>
 800e0c0:	ab03      	add	r3, sp, #12
 800e0c2:	9300      	str	r3, [sp, #0]
 800e0c4:	4622      	mov	r2, r4
 800e0c6:	4b11      	ldr	r3, [pc, #68]	; (800e10c <_svfiprintf_r+0x1ec>)
 800e0c8:	a904      	add	r1, sp, #16
 800e0ca:	4640      	mov	r0, r8
 800e0cc:	f3af 8000 	nop.w
 800e0d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e0d4:	4681      	mov	r9, r0
 800e0d6:	d1d6      	bne.n	800e086 <_svfiprintf_r+0x166>
 800e0d8:	89a3      	ldrh	r3, [r4, #12]
 800e0da:	065b      	lsls	r3, r3, #25
 800e0dc:	f53f af35 	bmi.w	800df4a <_svfiprintf_r+0x2a>
 800e0e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0e2:	b01d      	add	sp, #116	; 0x74
 800e0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e8:	ab03      	add	r3, sp, #12
 800e0ea:	9300      	str	r3, [sp, #0]
 800e0ec:	4622      	mov	r2, r4
 800e0ee:	4b07      	ldr	r3, [pc, #28]	; (800e10c <_svfiprintf_r+0x1ec>)
 800e0f0:	a904      	add	r1, sp, #16
 800e0f2:	4640      	mov	r0, r8
 800e0f4:	f000 f882 	bl	800e1fc <_printf_i>
 800e0f8:	e7ea      	b.n	800e0d0 <_svfiprintf_r+0x1b0>
 800e0fa:	bf00      	nop
 800e0fc:	080106cc 	.word	0x080106cc
 800e100:	080106d2 	.word	0x080106d2
 800e104:	080106d6 	.word	0x080106d6
 800e108:	00000000 	.word	0x00000000
 800e10c:	0800de6d 	.word	0x0800de6d

0800e110 <_printf_common>:
 800e110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e114:	4691      	mov	r9, r2
 800e116:	461f      	mov	r7, r3
 800e118:	688a      	ldr	r2, [r1, #8]
 800e11a:	690b      	ldr	r3, [r1, #16]
 800e11c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e120:	4293      	cmp	r3, r2
 800e122:	bfb8      	it	lt
 800e124:	4613      	movlt	r3, r2
 800e126:	f8c9 3000 	str.w	r3, [r9]
 800e12a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e12e:	4606      	mov	r6, r0
 800e130:	460c      	mov	r4, r1
 800e132:	b112      	cbz	r2, 800e13a <_printf_common+0x2a>
 800e134:	3301      	adds	r3, #1
 800e136:	f8c9 3000 	str.w	r3, [r9]
 800e13a:	6823      	ldr	r3, [r4, #0]
 800e13c:	0699      	lsls	r1, r3, #26
 800e13e:	bf42      	ittt	mi
 800e140:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e144:	3302      	addmi	r3, #2
 800e146:	f8c9 3000 	strmi.w	r3, [r9]
 800e14a:	6825      	ldr	r5, [r4, #0]
 800e14c:	f015 0506 	ands.w	r5, r5, #6
 800e150:	d107      	bne.n	800e162 <_printf_common+0x52>
 800e152:	f104 0a19 	add.w	sl, r4, #25
 800e156:	68e3      	ldr	r3, [r4, #12]
 800e158:	f8d9 2000 	ldr.w	r2, [r9]
 800e15c:	1a9b      	subs	r3, r3, r2
 800e15e:	42ab      	cmp	r3, r5
 800e160:	dc28      	bgt.n	800e1b4 <_printf_common+0xa4>
 800e162:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e166:	6822      	ldr	r2, [r4, #0]
 800e168:	3300      	adds	r3, #0
 800e16a:	bf18      	it	ne
 800e16c:	2301      	movne	r3, #1
 800e16e:	0692      	lsls	r2, r2, #26
 800e170:	d42d      	bmi.n	800e1ce <_printf_common+0xbe>
 800e172:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e176:	4639      	mov	r1, r7
 800e178:	4630      	mov	r0, r6
 800e17a:	47c0      	blx	r8
 800e17c:	3001      	adds	r0, #1
 800e17e:	d020      	beq.n	800e1c2 <_printf_common+0xb2>
 800e180:	6823      	ldr	r3, [r4, #0]
 800e182:	68e5      	ldr	r5, [r4, #12]
 800e184:	f8d9 2000 	ldr.w	r2, [r9]
 800e188:	f003 0306 	and.w	r3, r3, #6
 800e18c:	2b04      	cmp	r3, #4
 800e18e:	bf08      	it	eq
 800e190:	1aad      	subeq	r5, r5, r2
 800e192:	68a3      	ldr	r3, [r4, #8]
 800e194:	6922      	ldr	r2, [r4, #16]
 800e196:	bf0c      	ite	eq
 800e198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e19c:	2500      	movne	r5, #0
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	bfc4      	itt	gt
 800e1a2:	1a9b      	subgt	r3, r3, r2
 800e1a4:	18ed      	addgt	r5, r5, r3
 800e1a6:	f04f 0900 	mov.w	r9, #0
 800e1aa:	341a      	adds	r4, #26
 800e1ac:	454d      	cmp	r5, r9
 800e1ae:	d11a      	bne.n	800e1e6 <_printf_common+0xd6>
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	e008      	b.n	800e1c6 <_printf_common+0xb6>
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	4652      	mov	r2, sl
 800e1b8:	4639      	mov	r1, r7
 800e1ba:	4630      	mov	r0, r6
 800e1bc:	47c0      	blx	r8
 800e1be:	3001      	adds	r0, #1
 800e1c0:	d103      	bne.n	800e1ca <_printf_common+0xba>
 800e1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1ca:	3501      	adds	r5, #1
 800e1cc:	e7c3      	b.n	800e156 <_printf_common+0x46>
 800e1ce:	18e1      	adds	r1, r4, r3
 800e1d0:	1c5a      	adds	r2, r3, #1
 800e1d2:	2030      	movs	r0, #48	; 0x30
 800e1d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e1d8:	4422      	add	r2, r4
 800e1da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e1de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e1e2:	3302      	adds	r3, #2
 800e1e4:	e7c5      	b.n	800e172 <_printf_common+0x62>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	4622      	mov	r2, r4
 800e1ea:	4639      	mov	r1, r7
 800e1ec:	4630      	mov	r0, r6
 800e1ee:	47c0      	blx	r8
 800e1f0:	3001      	adds	r0, #1
 800e1f2:	d0e6      	beq.n	800e1c2 <_printf_common+0xb2>
 800e1f4:	f109 0901 	add.w	r9, r9, #1
 800e1f8:	e7d8      	b.n	800e1ac <_printf_common+0x9c>
	...

0800e1fc <_printf_i>:
 800e1fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e200:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e204:	460c      	mov	r4, r1
 800e206:	7e09      	ldrb	r1, [r1, #24]
 800e208:	b085      	sub	sp, #20
 800e20a:	296e      	cmp	r1, #110	; 0x6e
 800e20c:	4617      	mov	r7, r2
 800e20e:	4606      	mov	r6, r0
 800e210:	4698      	mov	r8, r3
 800e212:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e214:	f000 80b3 	beq.w	800e37e <_printf_i+0x182>
 800e218:	d822      	bhi.n	800e260 <_printf_i+0x64>
 800e21a:	2963      	cmp	r1, #99	; 0x63
 800e21c:	d036      	beq.n	800e28c <_printf_i+0x90>
 800e21e:	d80a      	bhi.n	800e236 <_printf_i+0x3a>
 800e220:	2900      	cmp	r1, #0
 800e222:	f000 80b9 	beq.w	800e398 <_printf_i+0x19c>
 800e226:	2958      	cmp	r1, #88	; 0x58
 800e228:	f000 8083 	beq.w	800e332 <_printf_i+0x136>
 800e22c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e230:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e234:	e032      	b.n	800e29c <_printf_i+0xa0>
 800e236:	2964      	cmp	r1, #100	; 0x64
 800e238:	d001      	beq.n	800e23e <_printf_i+0x42>
 800e23a:	2969      	cmp	r1, #105	; 0x69
 800e23c:	d1f6      	bne.n	800e22c <_printf_i+0x30>
 800e23e:	6820      	ldr	r0, [r4, #0]
 800e240:	6813      	ldr	r3, [r2, #0]
 800e242:	0605      	lsls	r5, r0, #24
 800e244:	f103 0104 	add.w	r1, r3, #4
 800e248:	d52a      	bpl.n	800e2a0 <_printf_i+0xa4>
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	6011      	str	r1, [r2, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	da03      	bge.n	800e25a <_printf_i+0x5e>
 800e252:	222d      	movs	r2, #45	; 0x2d
 800e254:	425b      	negs	r3, r3
 800e256:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e25a:	486f      	ldr	r0, [pc, #444]	; (800e418 <_printf_i+0x21c>)
 800e25c:	220a      	movs	r2, #10
 800e25e:	e039      	b.n	800e2d4 <_printf_i+0xd8>
 800e260:	2973      	cmp	r1, #115	; 0x73
 800e262:	f000 809d 	beq.w	800e3a0 <_printf_i+0x1a4>
 800e266:	d808      	bhi.n	800e27a <_printf_i+0x7e>
 800e268:	296f      	cmp	r1, #111	; 0x6f
 800e26a:	d020      	beq.n	800e2ae <_printf_i+0xb2>
 800e26c:	2970      	cmp	r1, #112	; 0x70
 800e26e:	d1dd      	bne.n	800e22c <_printf_i+0x30>
 800e270:	6823      	ldr	r3, [r4, #0]
 800e272:	f043 0320 	orr.w	r3, r3, #32
 800e276:	6023      	str	r3, [r4, #0]
 800e278:	e003      	b.n	800e282 <_printf_i+0x86>
 800e27a:	2975      	cmp	r1, #117	; 0x75
 800e27c:	d017      	beq.n	800e2ae <_printf_i+0xb2>
 800e27e:	2978      	cmp	r1, #120	; 0x78
 800e280:	d1d4      	bne.n	800e22c <_printf_i+0x30>
 800e282:	2378      	movs	r3, #120	; 0x78
 800e284:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e288:	4864      	ldr	r0, [pc, #400]	; (800e41c <_printf_i+0x220>)
 800e28a:	e055      	b.n	800e338 <_printf_i+0x13c>
 800e28c:	6813      	ldr	r3, [r2, #0]
 800e28e:	1d19      	adds	r1, r3, #4
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	6011      	str	r1, [r2, #0]
 800e294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e29c:	2301      	movs	r3, #1
 800e29e:	e08c      	b.n	800e3ba <_printf_i+0x1be>
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	6011      	str	r1, [r2, #0]
 800e2a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e2a8:	bf18      	it	ne
 800e2aa:	b21b      	sxthne	r3, r3
 800e2ac:	e7cf      	b.n	800e24e <_printf_i+0x52>
 800e2ae:	6813      	ldr	r3, [r2, #0]
 800e2b0:	6825      	ldr	r5, [r4, #0]
 800e2b2:	1d18      	adds	r0, r3, #4
 800e2b4:	6010      	str	r0, [r2, #0]
 800e2b6:	0628      	lsls	r0, r5, #24
 800e2b8:	d501      	bpl.n	800e2be <_printf_i+0xc2>
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	e002      	b.n	800e2c4 <_printf_i+0xc8>
 800e2be:	0668      	lsls	r0, r5, #25
 800e2c0:	d5fb      	bpl.n	800e2ba <_printf_i+0xbe>
 800e2c2:	881b      	ldrh	r3, [r3, #0]
 800e2c4:	4854      	ldr	r0, [pc, #336]	; (800e418 <_printf_i+0x21c>)
 800e2c6:	296f      	cmp	r1, #111	; 0x6f
 800e2c8:	bf14      	ite	ne
 800e2ca:	220a      	movne	r2, #10
 800e2cc:	2208      	moveq	r2, #8
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e2d4:	6865      	ldr	r5, [r4, #4]
 800e2d6:	60a5      	str	r5, [r4, #8]
 800e2d8:	2d00      	cmp	r5, #0
 800e2da:	f2c0 8095 	blt.w	800e408 <_printf_i+0x20c>
 800e2de:	6821      	ldr	r1, [r4, #0]
 800e2e0:	f021 0104 	bic.w	r1, r1, #4
 800e2e4:	6021      	str	r1, [r4, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d13d      	bne.n	800e366 <_printf_i+0x16a>
 800e2ea:	2d00      	cmp	r5, #0
 800e2ec:	f040 808e 	bne.w	800e40c <_printf_i+0x210>
 800e2f0:	4665      	mov	r5, ip
 800e2f2:	2a08      	cmp	r2, #8
 800e2f4:	d10b      	bne.n	800e30e <_printf_i+0x112>
 800e2f6:	6823      	ldr	r3, [r4, #0]
 800e2f8:	07db      	lsls	r3, r3, #31
 800e2fa:	d508      	bpl.n	800e30e <_printf_i+0x112>
 800e2fc:	6923      	ldr	r3, [r4, #16]
 800e2fe:	6862      	ldr	r2, [r4, #4]
 800e300:	429a      	cmp	r2, r3
 800e302:	bfde      	ittt	le
 800e304:	2330      	movle	r3, #48	; 0x30
 800e306:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e30a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e30e:	ebac 0305 	sub.w	r3, ip, r5
 800e312:	6123      	str	r3, [r4, #16]
 800e314:	f8cd 8000 	str.w	r8, [sp]
 800e318:	463b      	mov	r3, r7
 800e31a:	aa03      	add	r2, sp, #12
 800e31c:	4621      	mov	r1, r4
 800e31e:	4630      	mov	r0, r6
 800e320:	f7ff fef6 	bl	800e110 <_printf_common>
 800e324:	3001      	adds	r0, #1
 800e326:	d14d      	bne.n	800e3c4 <_printf_i+0x1c8>
 800e328:	f04f 30ff 	mov.w	r0, #4294967295
 800e32c:	b005      	add	sp, #20
 800e32e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e332:	4839      	ldr	r0, [pc, #228]	; (800e418 <_printf_i+0x21c>)
 800e334:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e338:	6813      	ldr	r3, [r2, #0]
 800e33a:	6821      	ldr	r1, [r4, #0]
 800e33c:	1d1d      	adds	r5, r3, #4
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	6015      	str	r5, [r2, #0]
 800e342:	060a      	lsls	r2, r1, #24
 800e344:	d50b      	bpl.n	800e35e <_printf_i+0x162>
 800e346:	07ca      	lsls	r2, r1, #31
 800e348:	bf44      	itt	mi
 800e34a:	f041 0120 	orrmi.w	r1, r1, #32
 800e34e:	6021      	strmi	r1, [r4, #0]
 800e350:	b91b      	cbnz	r3, 800e35a <_printf_i+0x15e>
 800e352:	6822      	ldr	r2, [r4, #0]
 800e354:	f022 0220 	bic.w	r2, r2, #32
 800e358:	6022      	str	r2, [r4, #0]
 800e35a:	2210      	movs	r2, #16
 800e35c:	e7b7      	b.n	800e2ce <_printf_i+0xd2>
 800e35e:	064d      	lsls	r5, r1, #25
 800e360:	bf48      	it	mi
 800e362:	b29b      	uxthmi	r3, r3
 800e364:	e7ef      	b.n	800e346 <_printf_i+0x14a>
 800e366:	4665      	mov	r5, ip
 800e368:	fbb3 f1f2 	udiv	r1, r3, r2
 800e36c:	fb02 3311 	mls	r3, r2, r1, r3
 800e370:	5cc3      	ldrb	r3, [r0, r3]
 800e372:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e376:	460b      	mov	r3, r1
 800e378:	2900      	cmp	r1, #0
 800e37a:	d1f5      	bne.n	800e368 <_printf_i+0x16c>
 800e37c:	e7b9      	b.n	800e2f2 <_printf_i+0xf6>
 800e37e:	6813      	ldr	r3, [r2, #0]
 800e380:	6825      	ldr	r5, [r4, #0]
 800e382:	6961      	ldr	r1, [r4, #20]
 800e384:	1d18      	adds	r0, r3, #4
 800e386:	6010      	str	r0, [r2, #0]
 800e388:	0628      	lsls	r0, r5, #24
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	d501      	bpl.n	800e392 <_printf_i+0x196>
 800e38e:	6019      	str	r1, [r3, #0]
 800e390:	e002      	b.n	800e398 <_printf_i+0x19c>
 800e392:	066a      	lsls	r2, r5, #25
 800e394:	d5fb      	bpl.n	800e38e <_printf_i+0x192>
 800e396:	8019      	strh	r1, [r3, #0]
 800e398:	2300      	movs	r3, #0
 800e39a:	6123      	str	r3, [r4, #16]
 800e39c:	4665      	mov	r5, ip
 800e39e:	e7b9      	b.n	800e314 <_printf_i+0x118>
 800e3a0:	6813      	ldr	r3, [r2, #0]
 800e3a2:	1d19      	adds	r1, r3, #4
 800e3a4:	6011      	str	r1, [r2, #0]
 800e3a6:	681d      	ldr	r5, [r3, #0]
 800e3a8:	6862      	ldr	r2, [r4, #4]
 800e3aa:	2100      	movs	r1, #0
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	f7f1 ff2f 	bl	8000210 <memchr>
 800e3b2:	b108      	cbz	r0, 800e3b8 <_printf_i+0x1bc>
 800e3b4:	1b40      	subs	r0, r0, r5
 800e3b6:	6060      	str	r0, [r4, #4]
 800e3b8:	6863      	ldr	r3, [r4, #4]
 800e3ba:	6123      	str	r3, [r4, #16]
 800e3bc:	2300      	movs	r3, #0
 800e3be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3c2:	e7a7      	b.n	800e314 <_printf_i+0x118>
 800e3c4:	6923      	ldr	r3, [r4, #16]
 800e3c6:	462a      	mov	r2, r5
 800e3c8:	4639      	mov	r1, r7
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	47c0      	blx	r8
 800e3ce:	3001      	adds	r0, #1
 800e3d0:	d0aa      	beq.n	800e328 <_printf_i+0x12c>
 800e3d2:	6823      	ldr	r3, [r4, #0]
 800e3d4:	079b      	lsls	r3, r3, #30
 800e3d6:	d413      	bmi.n	800e400 <_printf_i+0x204>
 800e3d8:	68e0      	ldr	r0, [r4, #12]
 800e3da:	9b03      	ldr	r3, [sp, #12]
 800e3dc:	4298      	cmp	r0, r3
 800e3de:	bfb8      	it	lt
 800e3e0:	4618      	movlt	r0, r3
 800e3e2:	e7a3      	b.n	800e32c <_printf_i+0x130>
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	464a      	mov	r2, r9
 800e3e8:	4639      	mov	r1, r7
 800e3ea:	4630      	mov	r0, r6
 800e3ec:	47c0      	blx	r8
 800e3ee:	3001      	adds	r0, #1
 800e3f0:	d09a      	beq.n	800e328 <_printf_i+0x12c>
 800e3f2:	3501      	adds	r5, #1
 800e3f4:	68e3      	ldr	r3, [r4, #12]
 800e3f6:	9a03      	ldr	r2, [sp, #12]
 800e3f8:	1a9b      	subs	r3, r3, r2
 800e3fa:	42ab      	cmp	r3, r5
 800e3fc:	dcf2      	bgt.n	800e3e4 <_printf_i+0x1e8>
 800e3fe:	e7eb      	b.n	800e3d8 <_printf_i+0x1dc>
 800e400:	2500      	movs	r5, #0
 800e402:	f104 0919 	add.w	r9, r4, #25
 800e406:	e7f5      	b.n	800e3f4 <_printf_i+0x1f8>
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d1ac      	bne.n	800e366 <_printf_i+0x16a>
 800e40c:	7803      	ldrb	r3, [r0, #0]
 800e40e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e412:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e416:	e76c      	b.n	800e2f2 <_printf_i+0xf6>
 800e418:	080106dd 	.word	0x080106dd
 800e41c:	080106ee 	.word	0x080106ee

0800e420 <memmove>:
 800e420:	4288      	cmp	r0, r1
 800e422:	b510      	push	{r4, lr}
 800e424:	eb01 0302 	add.w	r3, r1, r2
 800e428:	d807      	bhi.n	800e43a <memmove+0x1a>
 800e42a:	1e42      	subs	r2, r0, #1
 800e42c:	4299      	cmp	r1, r3
 800e42e:	d00a      	beq.n	800e446 <memmove+0x26>
 800e430:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e434:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e438:	e7f8      	b.n	800e42c <memmove+0xc>
 800e43a:	4283      	cmp	r3, r0
 800e43c:	d9f5      	bls.n	800e42a <memmove+0xa>
 800e43e:	1881      	adds	r1, r0, r2
 800e440:	1ad2      	subs	r2, r2, r3
 800e442:	42d3      	cmn	r3, r2
 800e444:	d100      	bne.n	800e448 <memmove+0x28>
 800e446:	bd10      	pop	{r4, pc}
 800e448:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e44c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e450:	e7f7      	b.n	800e442 <memmove+0x22>
	...

0800e454 <_free_r>:
 800e454:	b538      	push	{r3, r4, r5, lr}
 800e456:	4605      	mov	r5, r0
 800e458:	2900      	cmp	r1, #0
 800e45a:	d045      	beq.n	800e4e8 <_free_r+0x94>
 800e45c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e460:	1f0c      	subs	r4, r1, #4
 800e462:	2b00      	cmp	r3, #0
 800e464:	bfb8      	it	lt
 800e466:	18e4      	addlt	r4, r4, r3
 800e468:	f000 f8d2 	bl	800e610 <__malloc_lock>
 800e46c:	4a1f      	ldr	r2, [pc, #124]	; (800e4ec <_free_r+0x98>)
 800e46e:	6813      	ldr	r3, [r2, #0]
 800e470:	4610      	mov	r0, r2
 800e472:	b933      	cbnz	r3, 800e482 <_free_r+0x2e>
 800e474:	6063      	str	r3, [r4, #4]
 800e476:	6014      	str	r4, [r2, #0]
 800e478:	4628      	mov	r0, r5
 800e47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e47e:	f000 b8c8 	b.w	800e612 <__malloc_unlock>
 800e482:	42a3      	cmp	r3, r4
 800e484:	d90c      	bls.n	800e4a0 <_free_r+0x4c>
 800e486:	6821      	ldr	r1, [r4, #0]
 800e488:	1862      	adds	r2, r4, r1
 800e48a:	4293      	cmp	r3, r2
 800e48c:	bf04      	itt	eq
 800e48e:	681a      	ldreq	r2, [r3, #0]
 800e490:	685b      	ldreq	r3, [r3, #4]
 800e492:	6063      	str	r3, [r4, #4]
 800e494:	bf04      	itt	eq
 800e496:	1852      	addeq	r2, r2, r1
 800e498:	6022      	streq	r2, [r4, #0]
 800e49a:	6004      	str	r4, [r0, #0]
 800e49c:	e7ec      	b.n	800e478 <_free_r+0x24>
 800e49e:	4613      	mov	r3, r2
 800e4a0:	685a      	ldr	r2, [r3, #4]
 800e4a2:	b10a      	cbz	r2, 800e4a8 <_free_r+0x54>
 800e4a4:	42a2      	cmp	r2, r4
 800e4a6:	d9fa      	bls.n	800e49e <_free_r+0x4a>
 800e4a8:	6819      	ldr	r1, [r3, #0]
 800e4aa:	1858      	adds	r0, r3, r1
 800e4ac:	42a0      	cmp	r0, r4
 800e4ae:	d10b      	bne.n	800e4c8 <_free_r+0x74>
 800e4b0:	6820      	ldr	r0, [r4, #0]
 800e4b2:	4401      	add	r1, r0
 800e4b4:	1858      	adds	r0, r3, r1
 800e4b6:	4282      	cmp	r2, r0
 800e4b8:	6019      	str	r1, [r3, #0]
 800e4ba:	d1dd      	bne.n	800e478 <_free_r+0x24>
 800e4bc:	6810      	ldr	r0, [r2, #0]
 800e4be:	6852      	ldr	r2, [r2, #4]
 800e4c0:	605a      	str	r2, [r3, #4]
 800e4c2:	4401      	add	r1, r0
 800e4c4:	6019      	str	r1, [r3, #0]
 800e4c6:	e7d7      	b.n	800e478 <_free_r+0x24>
 800e4c8:	d902      	bls.n	800e4d0 <_free_r+0x7c>
 800e4ca:	230c      	movs	r3, #12
 800e4cc:	602b      	str	r3, [r5, #0]
 800e4ce:	e7d3      	b.n	800e478 <_free_r+0x24>
 800e4d0:	6820      	ldr	r0, [r4, #0]
 800e4d2:	1821      	adds	r1, r4, r0
 800e4d4:	428a      	cmp	r2, r1
 800e4d6:	bf04      	itt	eq
 800e4d8:	6811      	ldreq	r1, [r2, #0]
 800e4da:	6852      	ldreq	r2, [r2, #4]
 800e4dc:	6062      	str	r2, [r4, #4]
 800e4de:	bf04      	itt	eq
 800e4e0:	1809      	addeq	r1, r1, r0
 800e4e2:	6021      	streq	r1, [r4, #0]
 800e4e4:	605c      	str	r4, [r3, #4]
 800e4e6:	e7c7      	b.n	800e478 <_free_r+0x24>
 800e4e8:	bd38      	pop	{r3, r4, r5, pc}
 800e4ea:	bf00      	nop
 800e4ec:	20008698 	.word	0x20008698

0800e4f0 <_malloc_r>:
 800e4f0:	b570      	push	{r4, r5, r6, lr}
 800e4f2:	1ccd      	adds	r5, r1, #3
 800e4f4:	f025 0503 	bic.w	r5, r5, #3
 800e4f8:	3508      	adds	r5, #8
 800e4fa:	2d0c      	cmp	r5, #12
 800e4fc:	bf38      	it	cc
 800e4fe:	250c      	movcc	r5, #12
 800e500:	2d00      	cmp	r5, #0
 800e502:	4606      	mov	r6, r0
 800e504:	db01      	blt.n	800e50a <_malloc_r+0x1a>
 800e506:	42a9      	cmp	r1, r5
 800e508:	d903      	bls.n	800e512 <_malloc_r+0x22>
 800e50a:	230c      	movs	r3, #12
 800e50c:	6033      	str	r3, [r6, #0]
 800e50e:	2000      	movs	r0, #0
 800e510:	bd70      	pop	{r4, r5, r6, pc}
 800e512:	f000 f87d 	bl	800e610 <__malloc_lock>
 800e516:	4a21      	ldr	r2, [pc, #132]	; (800e59c <_malloc_r+0xac>)
 800e518:	6814      	ldr	r4, [r2, #0]
 800e51a:	4621      	mov	r1, r4
 800e51c:	b991      	cbnz	r1, 800e544 <_malloc_r+0x54>
 800e51e:	4c20      	ldr	r4, [pc, #128]	; (800e5a0 <_malloc_r+0xb0>)
 800e520:	6823      	ldr	r3, [r4, #0]
 800e522:	b91b      	cbnz	r3, 800e52c <_malloc_r+0x3c>
 800e524:	4630      	mov	r0, r6
 800e526:	f000 f863 	bl	800e5f0 <_sbrk_r>
 800e52a:	6020      	str	r0, [r4, #0]
 800e52c:	4629      	mov	r1, r5
 800e52e:	4630      	mov	r0, r6
 800e530:	f000 f85e 	bl	800e5f0 <_sbrk_r>
 800e534:	1c43      	adds	r3, r0, #1
 800e536:	d124      	bne.n	800e582 <_malloc_r+0x92>
 800e538:	230c      	movs	r3, #12
 800e53a:	6033      	str	r3, [r6, #0]
 800e53c:	4630      	mov	r0, r6
 800e53e:	f000 f868 	bl	800e612 <__malloc_unlock>
 800e542:	e7e4      	b.n	800e50e <_malloc_r+0x1e>
 800e544:	680b      	ldr	r3, [r1, #0]
 800e546:	1b5b      	subs	r3, r3, r5
 800e548:	d418      	bmi.n	800e57c <_malloc_r+0x8c>
 800e54a:	2b0b      	cmp	r3, #11
 800e54c:	d90f      	bls.n	800e56e <_malloc_r+0x7e>
 800e54e:	600b      	str	r3, [r1, #0]
 800e550:	50cd      	str	r5, [r1, r3]
 800e552:	18cc      	adds	r4, r1, r3
 800e554:	4630      	mov	r0, r6
 800e556:	f000 f85c 	bl	800e612 <__malloc_unlock>
 800e55a:	f104 000b 	add.w	r0, r4, #11
 800e55e:	1d23      	adds	r3, r4, #4
 800e560:	f020 0007 	bic.w	r0, r0, #7
 800e564:	1ac3      	subs	r3, r0, r3
 800e566:	d0d3      	beq.n	800e510 <_malloc_r+0x20>
 800e568:	425a      	negs	r2, r3
 800e56a:	50e2      	str	r2, [r4, r3]
 800e56c:	e7d0      	b.n	800e510 <_malloc_r+0x20>
 800e56e:	428c      	cmp	r4, r1
 800e570:	684b      	ldr	r3, [r1, #4]
 800e572:	bf16      	itet	ne
 800e574:	6063      	strne	r3, [r4, #4]
 800e576:	6013      	streq	r3, [r2, #0]
 800e578:	460c      	movne	r4, r1
 800e57a:	e7eb      	b.n	800e554 <_malloc_r+0x64>
 800e57c:	460c      	mov	r4, r1
 800e57e:	6849      	ldr	r1, [r1, #4]
 800e580:	e7cc      	b.n	800e51c <_malloc_r+0x2c>
 800e582:	1cc4      	adds	r4, r0, #3
 800e584:	f024 0403 	bic.w	r4, r4, #3
 800e588:	42a0      	cmp	r0, r4
 800e58a:	d005      	beq.n	800e598 <_malloc_r+0xa8>
 800e58c:	1a21      	subs	r1, r4, r0
 800e58e:	4630      	mov	r0, r6
 800e590:	f000 f82e 	bl	800e5f0 <_sbrk_r>
 800e594:	3001      	adds	r0, #1
 800e596:	d0cf      	beq.n	800e538 <_malloc_r+0x48>
 800e598:	6025      	str	r5, [r4, #0]
 800e59a:	e7db      	b.n	800e554 <_malloc_r+0x64>
 800e59c:	20008698 	.word	0x20008698
 800e5a0:	2000869c 	.word	0x2000869c

0800e5a4 <_realloc_r>:
 800e5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a6:	4607      	mov	r7, r0
 800e5a8:	4614      	mov	r4, r2
 800e5aa:	460e      	mov	r6, r1
 800e5ac:	b921      	cbnz	r1, 800e5b8 <_realloc_r+0x14>
 800e5ae:	4611      	mov	r1, r2
 800e5b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e5b4:	f7ff bf9c 	b.w	800e4f0 <_malloc_r>
 800e5b8:	b922      	cbnz	r2, 800e5c4 <_realloc_r+0x20>
 800e5ba:	f7ff ff4b 	bl	800e454 <_free_r>
 800e5be:	4625      	mov	r5, r4
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5c4:	f000 f826 	bl	800e614 <_malloc_usable_size_r>
 800e5c8:	42a0      	cmp	r0, r4
 800e5ca:	d20f      	bcs.n	800e5ec <_realloc_r+0x48>
 800e5cc:	4621      	mov	r1, r4
 800e5ce:	4638      	mov	r0, r7
 800e5d0:	f7ff ff8e 	bl	800e4f0 <_malloc_r>
 800e5d4:	4605      	mov	r5, r0
 800e5d6:	2800      	cmp	r0, #0
 800e5d8:	d0f2      	beq.n	800e5c0 <_realloc_r+0x1c>
 800e5da:	4631      	mov	r1, r6
 800e5dc:	4622      	mov	r2, r4
 800e5de:	f7ff fc11 	bl	800de04 <memcpy>
 800e5e2:	4631      	mov	r1, r6
 800e5e4:	4638      	mov	r0, r7
 800e5e6:	f7ff ff35 	bl	800e454 <_free_r>
 800e5ea:	e7e9      	b.n	800e5c0 <_realloc_r+0x1c>
 800e5ec:	4635      	mov	r5, r6
 800e5ee:	e7e7      	b.n	800e5c0 <_realloc_r+0x1c>

0800e5f0 <_sbrk_r>:
 800e5f0:	b538      	push	{r3, r4, r5, lr}
 800e5f2:	4c06      	ldr	r4, [pc, #24]	; (800e60c <_sbrk_r+0x1c>)
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	4605      	mov	r5, r0
 800e5f8:	4608      	mov	r0, r1
 800e5fa:	6023      	str	r3, [r4, #0]
 800e5fc:	f7f6 fc0a 	bl	8004e14 <_sbrk>
 800e600:	1c43      	adds	r3, r0, #1
 800e602:	d102      	bne.n	800e60a <_sbrk_r+0x1a>
 800e604:	6823      	ldr	r3, [r4, #0]
 800e606:	b103      	cbz	r3, 800e60a <_sbrk_r+0x1a>
 800e608:	602b      	str	r3, [r5, #0]
 800e60a:	bd38      	pop	{r3, r4, r5, pc}
 800e60c:	20008dd4 	.word	0x20008dd4

0800e610 <__malloc_lock>:
 800e610:	4770      	bx	lr

0800e612 <__malloc_unlock>:
 800e612:	4770      	bx	lr

0800e614 <_malloc_usable_size_r>:
 800e614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e618:	1f18      	subs	r0, r3, #4
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	bfbc      	itt	lt
 800e61e:	580b      	ldrlt	r3, [r1, r0]
 800e620:	18c0      	addlt	r0, r0, r3
 800e622:	4770      	bx	lr

0800e624 <_init>:
 800e624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e626:	bf00      	nop
 800e628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e62a:	bc08      	pop	{r3}
 800e62c:	469e      	mov	lr, r3
 800e62e:	4770      	bx	lr

0800e630 <_fini>:
 800e630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e632:	bf00      	nop
 800e634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e636:	bc08      	pop	{r3}
 800e638:	469e      	mov	lr, r3
 800e63a:	4770      	bx	lr
